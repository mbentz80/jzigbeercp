#line 1 "numpy/core/src/arraytypes.inc.src"

/*
 *****************************************************************************
 **       This file was autogenerated from a template  DO NOT EDIT!!!!      **
 **       Changes should be made to the original source (.src) file         **
 *****************************************************************************
 */

#line 1
/* -*- c -*- */
#include "config.h"

static double
_getNAN(void) {
#ifdef NAN
    return NAN;
#else
    static double nan=0;

    if (nan == 0) {
        double mul = 1e100;
        double tmp = 0.0;
        double pinf=0;
        pinf = mul;
        for (;;) {
            pinf *= mul;
            if (pinf == tmp) break;
            tmp = pinf;
        }
        nan = pinf / pinf;
    }
    return nan;
#endif
}


static double
MyPyFloat_AsDouble(PyObject *obj)
{
    double ret = 0;
    PyObject *num;

    if (obj == Py_None) {
        return _getNAN();
    }
    num = PyNumber_Float(obj);
    if (num == NULL) {
        return _getNAN();
    }
    ret = PyFloat_AsDouble(num);
    Py_DECREF(num);
    return ret;
}


#line 51

static long
MyPyLong_AsLong (PyObject *obj)
{
    long ret;
    PyObject *num = PyNumber_Long(obj);

    if (num == NULL) {
        return -1;
    }
    ret = PyLong_AsLong(num);
    Py_DECREF(num);
    return ret;
}


static ulong
MyPyLong_AsUnsignedLong (PyObject *obj)
{
    ulong ret;
    PyObject *num = PyNumber_Long(obj);

    if (num == NULL) {
        return -1;
    }
    ret = PyLong_AsUnsignedLong(num);
    if (PyErr_Occurred()) {
        PyErr_Clear();
        ret = PyLong_AsLong(num);
    }
    Py_DECREF(num);
    return ret;
}


#line 51

static longlong
MyPyLong_AsLongLong (PyObject *obj)
{
    longlong ret;
    PyObject *num = PyNumber_Long(obj);

    if (num == NULL) {
        return -1;
    }
    ret = PyLong_AsLongLong(num);
    Py_DECREF(num);
    return ret;
}


static ulonglong
MyPyLong_AsUnsignedLongLong (PyObject *obj)
{
    ulonglong ret;
    PyObject *num = PyNumber_Long(obj);

    if (num == NULL) {
        return -1;
    }
    ret = PyLong_AsUnsignedLongLong(num);
    if (PyErr_Occurred()) {
        PyErr_Clear();
        ret = PyLong_AsLongLong(num);
    }
    Py_DECREF(num);
    return ret;
}




/****************** getitem and setitem **********************/

#line 99

static PyObject *
BOOL_getitem(char *ip, PyArrayObject *ap) {
    Bool t1;

    if ((ap==NULL) || PyArray_ISBEHAVED_RO(ap)) {
        t1 = *((Bool *)ip);
        return PyBool_FromLong((long)t1);
    }
    else {
        ap->descr->f->copyswap(&t1, ip, !PyArray_ISNOTSWAPPED(ap),
                ap);
        return PyBool_FromLong((long)t1);
    }
}

static int
BOOL_setitem(PyObject *op, char *ov, PyArrayObject *ap) {
    Bool temp;  /* ensures alignment */


    if (PyArray_IsScalar(op, Bool)) {
        temp = ((PyBoolScalarObject *)op)->obval;
    }
    else {
        temp = (Bool)PyObject_IsTrue(op);
    }
    if (PyErr_Occurred()) {
        if (PySequence_Check(op)) {
            PyErr_Clear();
            PyErr_SetString(PyExc_ValueError, "setting an array" \
                    " element with a sequence.");
        }
        return -1;
    }
    if (ap == NULL || PyArray_ISBEHAVED(ap))
        *((Bool *)ov)=temp;
    else {
        ap->descr->f->copyswap(ov, &temp, !PyArray_ISNOTSWAPPED(ap),
                ap);
    }

    return 0;
}


#line 99

static PyObject *
BYTE_getitem(char *ip, PyArrayObject *ap) {
    byte t1;

    if ((ap==NULL) || PyArray_ISBEHAVED_RO(ap)) {
        t1 = *((byte *)ip);
        return PyInt_FromLong((long)t1);
    }
    else {
        ap->descr->f->copyswap(&t1, ip, !PyArray_ISNOTSWAPPED(ap),
                ap);
        return PyInt_FromLong((long)t1);
    }
}

static int
BYTE_setitem(PyObject *op, char *ov, PyArrayObject *ap) {
    byte temp;  /* ensures alignment */


    if (PyArray_IsScalar(op, Byte)) {
        temp = ((PyByteScalarObject *)op)->obval;
    }
    else {
        temp = (byte)MyPyLong_AsLong(op);
    }
    if (PyErr_Occurred()) {
        if (PySequence_Check(op)) {
            PyErr_Clear();
            PyErr_SetString(PyExc_ValueError, "setting an array" \
                    " element with a sequence.");
        }
        return -1;
    }
    if (ap == NULL || PyArray_ISBEHAVED(ap))
        *((byte *)ov)=temp;
    else {
        ap->descr->f->copyswap(ov, &temp, !PyArray_ISNOTSWAPPED(ap),
                ap);
    }

    return 0;
}


#line 99

static PyObject *
UBYTE_getitem(char *ip, PyArrayObject *ap) {
    ubyte t1;

    if ((ap==NULL) || PyArray_ISBEHAVED_RO(ap)) {
        t1 = *((ubyte *)ip);
        return PyInt_FromLong((long)t1);
    }
    else {
        ap->descr->f->copyswap(&t1, ip, !PyArray_ISNOTSWAPPED(ap),
                ap);
        return PyInt_FromLong((long)t1);
    }
}

static int
UBYTE_setitem(PyObject *op, char *ov, PyArrayObject *ap) {
    ubyte temp;  /* ensures alignment */


    if (PyArray_IsScalar(op, UByte)) {
        temp = ((PyUByteScalarObject *)op)->obval;
    }
    else {
        temp = (ubyte)MyPyLong_AsLong(op);
    }
    if (PyErr_Occurred()) {
        if (PySequence_Check(op)) {
            PyErr_Clear();
            PyErr_SetString(PyExc_ValueError, "setting an array" \
                    " element with a sequence.");
        }
        return -1;
    }
    if (ap == NULL || PyArray_ISBEHAVED(ap))
        *((ubyte *)ov)=temp;
    else {
        ap->descr->f->copyswap(ov, &temp, !PyArray_ISNOTSWAPPED(ap),
                ap);
    }

    return 0;
}


#line 99

static PyObject *
SHORT_getitem(char *ip, PyArrayObject *ap) {
    short t1;

    if ((ap==NULL) || PyArray_ISBEHAVED_RO(ap)) {
        t1 = *((short *)ip);
        return PyInt_FromLong((long)t1);
    }
    else {
        ap->descr->f->copyswap(&t1, ip, !PyArray_ISNOTSWAPPED(ap),
                ap);
        return PyInt_FromLong((long)t1);
    }
}

static int
SHORT_setitem(PyObject *op, char *ov, PyArrayObject *ap) {
    short temp;  /* ensures alignment */


    if (PyArray_IsScalar(op, Short)) {
        temp = ((PyShortScalarObject *)op)->obval;
    }
    else {
        temp = (short)MyPyLong_AsLong(op);
    }
    if (PyErr_Occurred()) {
        if (PySequence_Check(op)) {
            PyErr_Clear();
            PyErr_SetString(PyExc_ValueError, "setting an array" \
                    " element with a sequence.");
        }
        return -1;
    }
    if (ap == NULL || PyArray_ISBEHAVED(ap))
        *((short *)ov)=temp;
    else {
        ap->descr->f->copyswap(ov, &temp, !PyArray_ISNOTSWAPPED(ap),
                ap);
    }

    return 0;
}


#line 99

static PyObject *
USHORT_getitem(char *ip, PyArrayObject *ap) {
    ushort t1;

    if ((ap==NULL) || PyArray_ISBEHAVED_RO(ap)) {
        t1 = *((ushort *)ip);
        return PyInt_FromLong((long)t1);
    }
    else {
        ap->descr->f->copyswap(&t1, ip, !PyArray_ISNOTSWAPPED(ap),
                ap);
        return PyInt_FromLong((long)t1);
    }
}

static int
USHORT_setitem(PyObject *op, char *ov, PyArrayObject *ap) {
    ushort temp;  /* ensures alignment */


    if (PyArray_IsScalar(op, UShort)) {
        temp = ((PyUShortScalarObject *)op)->obval;
    }
    else {
        temp = (ushort)MyPyLong_AsLong(op);
    }
    if (PyErr_Occurred()) {
        if (PySequence_Check(op)) {
            PyErr_Clear();
            PyErr_SetString(PyExc_ValueError, "setting an array" \
                    " element with a sequence.");
        }
        return -1;
    }
    if (ap == NULL || PyArray_ISBEHAVED(ap))
        *((ushort *)ov)=temp;
    else {
        ap->descr->f->copyswap(ov, &temp, !PyArray_ISNOTSWAPPED(ap),
                ap);
    }

    return 0;
}


#line 99

static PyObject *
INT_getitem(char *ip, PyArrayObject *ap) {
    int t1;

    if ((ap==NULL) || PyArray_ISBEHAVED_RO(ap)) {
        t1 = *((int *)ip);
        return PyInt_FromLong((long)t1);
    }
    else {
        ap->descr->f->copyswap(&t1, ip, !PyArray_ISNOTSWAPPED(ap),
                ap);
        return PyInt_FromLong((long)t1);
    }
}

static int
INT_setitem(PyObject *op, char *ov, PyArrayObject *ap) {
    int temp;  /* ensures alignment */


    if (PyArray_IsScalar(op, Int)) {
        temp = ((PyIntScalarObject *)op)->obval;
    }
    else {
        temp = (int)MyPyLong_AsLong(op);
    }
    if (PyErr_Occurred()) {
        if (PySequence_Check(op)) {
            PyErr_Clear();
            PyErr_SetString(PyExc_ValueError, "setting an array" \
                    " element with a sequence.");
        }
        return -1;
    }
    if (ap == NULL || PyArray_ISBEHAVED(ap))
        *((int *)ov)=temp;
    else {
        ap->descr->f->copyswap(ov, &temp, !PyArray_ISNOTSWAPPED(ap),
                ap);
    }

    return 0;
}


#line 99

static PyObject *
LONG_getitem(char *ip, PyArrayObject *ap) {
    long t1;

    if ((ap==NULL) || PyArray_ISBEHAVED_RO(ap)) {
        t1 = *((long *)ip);
        return PyInt_FromLong((long)t1);
    }
    else {
        ap->descr->f->copyswap(&t1, ip, !PyArray_ISNOTSWAPPED(ap),
                ap);
        return PyInt_FromLong((long)t1);
    }
}

static int
LONG_setitem(PyObject *op, char *ov, PyArrayObject *ap) {
    long temp;  /* ensures alignment */


    if (PyArray_IsScalar(op, Long)) {
        temp = ((PyLongScalarObject *)op)->obval;
    }
    else {
        temp = (long)MyPyLong_AsLong(op);
    }
    if (PyErr_Occurred()) {
        if (PySequence_Check(op)) {
            PyErr_Clear();
            PyErr_SetString(PyExc_ValueError, "setting an array" \
                    " element with a sequence.");
        }
        return -1;
    }
    if (ap == NULL || PyArray_ISBEHAVED(ap))
        *((long *)ov)=temp;
    else {
        ap->descr->f->copyswap(ov, &temp, !PyArray_ISNOTSWAPPED(ap),
                ap);
    }

    return 0;
}


#line 99

static PyObject *
UINT_getitem(char *ip, PyArrayObject *ap) {
    uint t1;

    if ((ap==NULL) || PyArray_ISBEHAVED_RO(ap)) {
        t1 = *((uint *)ip);
        return PyLong_FromUnsignedLong((ulong)t1);
    }
    else {
        ap->descr->f->copyswap(&t1, ip, !PyArray_ISNOTSWAPPED(ap),
                ap);
        return PyLong_FromUnsignedLong((ulong)t1);
    }
}

static int
UINT_setitem(PyObject *op, char *ov, PyArrayObject *ap) {
    uint temp;  /* ensures alignment */


    if (PyArray_IsScalar(op, UInt)) {
        temp = ((PyUIntScalarObject *)op)->obval;
    }
    else {
        temp = (uint)MyPyLong_AsUnsignedLong(op);
    }
    if (PyErr_Occurred()) {
        if (PySequence_Check(op)) {
            PyErr_Clear();
            PyErr_SetString(PyExc_ValueError, "setting an array" \
                    " element with a sequence.");
        }
        return -1;
    }
    if (ap == NULL || PyArray_ISBEHAVED(ap))
        *((uint *)ov)=temp;
    else {
        ap->descr->f->copyswap(ov, &temp, !PyArray_ISNOTSWAPPED(ap),
                ap);
    }

    return 0;
}


#line 99

static PyObject *
ULONG_getitem(char *ip, PyArrayObject *ap) {
    ulong t1;

    if ((ap==NULL) || PyArray_ISBEHAVED_RO(ap)) {
        t1 = *((ulong *)ip);
        return PyLong_FromUnsignedLong((ulong)t1);
    }
    else {
        ap->descr->f->copyswap(&t1, ip, !PyArray_ISNOTSWAPPED(ap),
                ap);
        return PyLong_FromUnsignedLong((ulong)t1);
    }
}

static int
ULONG_setitem(PyObject *op, char *ov, PyArrayObject *ap) {
    ulong temp;  /* ensures alignment */


    if (PyArray_IsScalar(op, ULong)) {
        temp = ((PyULongScalarObject *)op)->obval;
    }
    else {
        temp = (ulong)MyPyLong_AsUnsignedLong(op);
    }
    if (PyErr_Occurred()) {
        if (PySequence_Check(op)) {
            PyErr_Clear();
            PyErr_SetString(PyExc_ValueError, "setting an array" \
                    " element with a sequence.");
        }
        return -1;
    }
    if (ap == NULL || PyArray_ISBEHAVED(ap))
        *((ulong *)ov)=temp;
    else {
        ap->descr->f->copyswap(ov, &temp, !PyArray_ISNOTSWAPPED(ap),
                ap);
    }

    return 0;
}


#line 99

static PyObject *
LONGLONG_getitem(char *ip, PyArrayObject *ap) {
    longlong t1;

    if ((ap==NULL) || PyArray_ISBEHAVED_RO(ap)) {
        t1 = *((longlong *)ip);
        return PyLong_FromLongLong((longlong)t1);
    }
    else {
        ap->descr->f->copyswap(&t1, ip, !PyArray_ISNOTSWAPPED(ap),
                ap);
        return PyLong_FromLongLong((longlong)t1);
    }
}

static int
LONGLONG_setitem(PyObject *op, char *ov, PyArrayObject *ap) {
    longlong temp;  /* ensures alignment */


    if (PyArray_IsScalar(op, LongLong)) {
        temp = ((PyLongLongScalarObject *)op)->obval;
    }
    else {
        temp = (longlong)MyPyLong_AsLongLong(op);
    }
    if (PyErr_Occurred()) {
        if (PySequence_Check(op)) {
            PyErr_Clear();
            PyErr_SetString(PyExc_ValueError, "setting an array" \
                    " element with a sequence.");
        }
        return -1;
    }
    if (ap == NULL || PyArray_ISBEHAVED(ap))
        *((longlong *)ov)=temp;
    else {
        ap->descr->f->copyswap(ov, &temp, !PyArray_ISNOTSWAPPED(ap),
                ap);
    }

    return 0;
}


#line 99

static PyObject *
ULONGLONG_getitem(char *ip, PyArrayObject *ap) {
    ulonglong t1;

    if ((ap==NULL) || PyArray_ISBEHAVED_RO(ap)) {
        t1 = *((ulonglong *)ip);
        return PyLong_FromUnsignedLongLong((ulonglong)t1);
    }
    else {
        ap->descr->f->copyswap(&t1, ip, !PyArray_ISNOTSWAPPED(ap),
                ap);
        return PyLong_FromUnsignedLongLong((ulonglong)t1);
    }
}

static int
ULONGLONG_setitem(PyObject *op, char *ov, PyArrayObject *ap) {
    ulonglong temp;  /* ensures alignment */


    if (PyArray_IsScalar(op, ULongLong)) {
        temp = ((PyULongLongScalarObject *)op)->obval;
    }
    else {
        temp = (ulonglong)MyPyLong_AsUnsignedLongLong(op);
    }
    if (PyErr_Occurred()) {
        if (PySequence_Check(op)) {
            PyErr_Clear();
            PyErr_SetString(PyExc_ValueError, "setting an array" \
                    " element with a sequence.");
        }
        return -1;
    }
    if (ap == NULL || PyArray_ISBEHAVED(ap))
        *((ulonglong *)ov)=temp;
    else {
        ap->descr->f->copyswap(ov, &temp, !PyArray_ISNOTSWAPPED(ap),
                ap);
    }

    return 0;
}


#line 99

static PyObject *
FLOAT_getitem(char *ip, PyArrayObject *ap) {
    float t1;

    if ((ap==NULL) || PyArray_ISBEHAVED_RO(ap)) {
        t1 = *((float *)ip);
        return PyFloat_FromDouble((float)t1);
    }
    else {
        ap->descr->f->copyswap(&t1, ip, !PyArray_ISNOTSWAPPED(ap),
                ap);
        return PyFloat_FromDouble((float)t1);
    }
}

static int
FLOAT_setitem(PyObject *op, char *ov, PyArrayObject *ap) {
    float temp;  /* ensures alignment */


    if (PyArray_IsScalar(op, Float)) {
        temp = ((PyFloatScalarObject *)op)->obval;
    }
    else {
        temp = (float)MyPyFloat_AsDouble(op);
    }
    if (PyErr_Occurred()) {
        if (PySequence_Check(op)) {
            PyErr_Clear();
            PyErr_SetString(PyExc_ValueError, "setting an array" \
                    " element with a sequence.");
        }
        return -1;
    }
    if (ap == NULL || PyArray_ISBEHAVED(ap))
        *((float *)ov)=temp;
    else {
        ap->descr->f->copyswap(ov, &temp, !PyArray_ISNOTSWAPPED(ap),
                ap);
    }

    return 0;
}


#line 99

static PyObject *
DOUBLE_getitem(char *ip, PyArrayObject *ap) {
    double t1;

    if ((ap==NULL) || PyArray_ISBEHAVED_RO(ap)) {
        t1 = *((double *)ip);
        return PyFloat_FromDouble((double)t1);
    }
    else {
        ap->descr->f->copyswap(&t1, ip, !PyArray_ISNOTSWAPPED(ap),
                ap);
        return PyFloat_FromDouble((double)t1);
    }
}

static int
DOUBLE_setitem(PyObject *op, char *ov, PyArrayObject *ap) {
    double temp;  /* ensures alignment */


    if (PyArray_IsScalar(op, Double)) {
        temp = ((PyDoubleScalarObject *)op)->obval;
    }
    else {
        temp = (double)MyPyFloat_AsDouble(op);
    }
    if (PyErr_Occurred()) {
        if (PySequence_Check(op)) {
            PyErr_Clear();
            PyErr_SetString(PyExc_ValueError, "setting an array" \
                    " element with a sequence.");
        }
        return -1;
    }
    if (ap == NULL || PyArray_ISBEHAVED(ap))
        *((double *)ov)=temp;
    else {
        ap->descr->f->copyswap(ov, &temp, !PyArray_ISNOTSWAPPED(ap),
                ap);
    }

    return 0;
}




#line 152

static PyObject *
CFLOAT_getitem(char *ip, PyArrayObject *ap) {
    float t1, t2;

    if ((ap==NULL) || PyArray_ISBEHAVED_RO(ap)) {
        return PyComplex_FromDoubles((double)((float *)ip)[0],
                (double)((float *)ip)[1]);
    }
    else {
        int size = sizeof(float);
        Bool swap = !PyArray_ISNOTSWAPPED(ap);
        copy_and_swap(&t1, ip, size, 1, 0, swap);
        copy_and_swap(&t2, ip+size, size, 1, 0, swap);
        return PyComplex_FromDoubles((double)t1, (double)t2);
    }
}

#line 152

static PyObject *
CDOUBLE_getitem(char *ip, PyArrayObject *ap) {
    double t1, t2;

    if ((ap==NULL) || PyArray_ISBEHAVED_RO(ap)) {
        return PyComplex_FromDoubles((double)((double *)ip)[0],
                (double)((double *)ip)[1]);
    }
    else {
        int size = sizeof(double);
        Bool swap = !PyArray_ISNOTSWAPPED(ap);
        copy_and_swap(&t1, ip, size, 1, 0, swap);
        copy_and_swap(&t2, ip+size, size, 1, 0, swap);
        return PyComplex_FromDoubles((double)t1, (double)t2);
    }
}


#line 177
static int
CFLOAT_setitem(PyObject *op, char *ov, PyArrayObject *ap)
{
    Py_complex oop;
    PyObject *op2;
    cfloat temp;
    int rsize;

    if (!(PyArray_IsScalar(op, CFloat))) {
        if (PyArray_Check(op) && (PyArray_NDIM(op)==0)) {
            op2 = ((PyArrayObject *)op)->descr->f->getitem     \
                  (((PyArrayObject *)op)->data,
                   (PyArrayObject *)op);
        }
        else {
            op2 = op; Py_INCREF(op);
        }
        if (op2 == Py_None) {
            oop.real = oop.imag = _getNAN();
        }
        else {
            oop = PyComplex_AsCComplex (op2);
        }
        Py_DECREF(op2);
        if (PyErr_Occurred()) return -1;
        temp.real = (float) oop.real;
        temp.imag = (float) oop.imag;
    }
    else {
        temp = ((PyCFloatScalarObject *)op)->obval;
    }

    memcpy(ov, &temp, ap->descr->elsize);
    if (!PyArray_ISNOTSWAPPED(ap))
        byte_swap_vector(ov, 2, sizeof(float));

    rsize = sizeof(float);
    copy_and_swap(ov, &temp, rsize, 2, rsize, !PyArray_ISNOTSWAPPED(ap));
    return 0;
}

#line 177
static int
CDOUBLE_setitem(PyObject *op, char *ov, PyArrayObject *ap)
{
    Py_complex oop;
    PyObject *op2;
    cdouble temp;
    int rsize;

    if (!(PyArray_IsScalar(op, CDouble))) {
        if (PyArray_Check(op) && (PyArray_NDIM(op)==0)) {
            op2 = ((PyArrayObject *)op)->descr->f->getitem     \
                  (((PyArrayObject *)op)->data,
                   (PyArrayObject *)op);
        }
        else {
            op2 = op; Py_INCREF(op);
        }
        if (op2 == Py_None) {
            oop.real = oop.imag = _getNAN();
        }
        else {
            oop = PyComplex_AsCComplex (op2);
        }
        Py_DECREF(op2);
        if (PyErr_Occurred()) return -1;
        temp.real = (double) oop.real;
        temp.imag = (double) oop.imag;
    }
    else {
        temp = ((PyCDoubleScalarObject *)op)->obval;
    }

    memcpy(ov, &temp, ap->descr->elsize);
    if (!PyArray_ISNOTSWAPPED(ap))
        byte_swap_vector(ov, 2, sizeof(double));

    rsize = sizeof(double);
    copy_and_swap(ov, &temp, rsize, 2, rsize, !PyArray_ISNOTSWAPPED(ap));
    return 0;
}

#line 177
static int
CLONGDOUBLE_setitem(PyObject *op, char *ov, PyArrayObject *ap)
{
    Py_complex oop;
    PyObject *op2;
    clongdouble temp;
    int rsize;

    if (!(PyArray_IsScalar(op, CLongDouble))) {
        if (PyArray_Check(op) && (PyArray_NDIM(op)==0)) {
            op2 = ((PyArrayObject *)op)->descr->f->getitem     \
                  (((PyArrayObject *)op)->data,
                   (PyArrayObject *)op);
        }
        else {
            op2 = op; Py_INCREF(op);
        }
        if (op2 == Py_None) {
            oop.real = oop.imag = _getNAN();
        }
        else {
            oop = PyComplex_AsCComplex (op2);
        }
        Py_DECREF(op2);
        if (PyErr_Occurred()) return -1;
        temp.real = (longdouble) oop.real;
        temp.imag = (longdouble) oop.imag;
    }
    else {
        temp = ((PyCLongDoubleScalarObject *)op)->obval;
    }

    memcpy(ov, &temp, ap->descr->elsize);
    if (!PyArray_ISNOTSWAPPED(ap))
        byte_swap_vector(ov, 2, sizeof(longdouble));

    rsize = sizeof(longdouble);
    copy_and_swap(ov, &temp, rsize, 2, rsize, !PyArray_ISNOTSWAPPED(ap));
    return 0;
}


static PyObject *
LONGDOUBLE_getitem(char *ip, PyArrayObject *ap)
{
    return PyArray_Scalar(ip, ap->descr, NULL);
}

static int
LONGDOUBLE_setitem(PyObject *op, char *ov, PyArrayObject *ap) {
    longdouble temp;  /* ensures alignment */

    if (PyArray_IsScalar(op, LongDouble)) {
        temp = ((PyLongDoubleScalarObject *)op)->obval;
    }
    else {
        temp = (longdouble) MyPyFloat_AsDouble(op);
    }
    if (PyErr_Occurred()) return -1;
    if (ap == NULL || PyArray_ISBEHAVED(ap))
        *((longdouble *)ov)=temp;
    else {
        copy_and_swap(ov, &temp, ap->descr->elsize, 1, 0,
                !PyArray_ISNOTSWAPPED(ap));
    }
    return 0;
}

static PyObject *
CLONGDOUBLE_getitem(char *ip, PyArrayObject *ap)
{
    return PyArray_Scalar(ip, ap->descr, NULL);
}


/* UNICODE */
static PyObject *
UNICODE_getitem(char *ip, PyArrayObject *ap)
{
    intp elsize = ap->descr->elsize;
    intp mysize = elsize/sizeof(PyArray_UCS4);
    int alloc = 0;
    PyArray_UCS4 *buffer = NULL;
    PyUnicodeObject *obj;
    intp i;

    if (!PyArray_ISBEHAVED_RO(ap)) {
        buffer = malloc(elsize);
        if (buffer == NULL) {
            PyErr_NoMemory();
            goto fail;
        }
        alloc = 1;
        memcpy(buffer, ip, elsize);
        if (!PyArray_ISNOTSWAPPED(ap)) {
            byte_swap_vector(buffer, mysize, sizeof(PyArray_UCS4));
        }
    }
    else {
        buffer = (PyArray_UCS4 *)ip;
    }
    for (i = mysize; i > 0 && buffer[--i] == 0; mysize = i);

#ifdef Py_UNICODE_WIDE
    obj = (PyUnicodeObject *)PyUnicode_FromUnicode(buffer, mysize);
#else
    /* create new empty unicode object of length mysize*2 */
    obj = (PyUnicodeObject *)MyPyUnicode_New(mysize*2);
    if (obj == NULL) {
        goto fail;
    }
    mysize = PyUCS2Buffer_FromUCS4(obj->str, buffer, mysize);
    /* reset length of unicode object to ucs2size */
    if (MyPyUnicode_Resize(obj, mysize) < 0) {
        Py_DECREF(obj);
        goto fail;
    }
#endif

    if (alloc) {
        free(buffer);
    }
    return (PyObject *)obj;

fail:
    if (alloc) {
        free(buffer);
    }
    return NULL;
}

static int
UNICODE_setitem(PyObject *op, char *ov, PyArrayObject *ap)
{
    PyObject *temp;
    Py_UNICODE *ptr;
    int datalen;
#ifndef Py_UNICODE_WIDE
    char *buffer;
#endif

    if (!PyString_Check(op) && !PyUnicode_Check(op) &&
            PySequence_Check(op) && PySequence_Size(op) > 0) {
        PyErr_SetString(PyExc_ValueError,
                "setting an array element with a sequence");
        return -1;
    }
    /* Sequence_Size might have returned an error */
    if (PyErr_Occurred()) PyErr_Clear();
    if ((temp=PyObject_Unicode(op)) == NULL) return -1;
    ptr = PyUnicode_AS_UNICODE(temp);
    if ((ptr == NULL) || (PyErr_Occurred())) {
        Py_DECREF(temp);
        return -1;
    }
    datalen = PyUnicode_GET_DATA_SIZE(temp);

#ifdef Py_UNICODE_WIDE
    memcpy(ov, ptr, MIN(ap->descr->elsize, datalen));
#else
    if (!PyArray_ISALIGNED(ap)) {
        buffer = _pya_malloc(ap->descr->elsize);
        if (buffer == NULL) {
            Py_DECREF(temp);
            PyErr_NoMemory();
            return -1;
        }
    }
    else buffer = ov;
    datalen = PyUCS2Buffer_AsUCS4(ptr, (PyArray_UCS4 *)buffer,
            datalen >> 1,
            ap->descr->elsize >> 2);
    datalen <<= 2;
    if (!PyArray_ISALIGNED(ap)) {
        memcpy(ov, buffer, datalen);
        _pya_free(buffer);
    }
#endif
    /* Fill in the rest of the space with 0 */
    if (ap->descr->elsize > datalen) {
        memset(ov + datalen, 0, (ap->descr->elsize - datalen));
    }

    if (!PyArray_ISNOTSWAPPED(ap))
        byte_swap_vector(ov, ap->descr->elsize >> 2, 4);
    Py_DECREF(temp);
    return 0;
}

/* STRING -- can handle both NULL-terminated and not NULL-terminated cases
             will truncate all ending NULLs in returned string.
*/
static PyObject *
STRING_getitem(char *ip, PyArrayObject *ap)
{
    /* Will eliminate NULLs at the end */
    char *ptr;
    int size = ap->descr->elsize;

    ptr = ip + size-1;
    while (*ptr-- == '\0' && size > 0) size--;
    return PyString_FromStringAndSize(ip,size);
}

static int
STRING_setitem(PyObject *op, char *ov, PyArrayObject *ap)
{
    char *ptr;
    Py_ssize_t len;
    PyObject *temp=NULL;

    if (!PyString_Check(op) && !PyUnicode_Check(op) &&
            PySequence_Check(op) && PySequence_Size(op) > 0) {
        PyErr_SetString(PyExc_ValueError,
                "setting an array element with a sequence");
        return -1;
    }
    /* Sequence_Size might have returned an error */
    if (PyErr_Occurred()) PyErr_Clear();
    if ((temp = PyObject_Str(op)) == NULL) return -1;

    if (PyString_AsStringAndSize(temp, &ptr, &len) == -1) {
        Py_DECREF(temp);
        return -1;
    }
    memcpy(ov, ptr, MIN(ap->descr->elsize,len));
    /* If string lenth is smaller than room in array
       Then fill the rest of the element size
       with NULL */
    if (ap->descr->elsize > len) {
        memset(ov + len, 0, (ap->descr->elsize - len));
    }
    Py_DECREF(temp);
    return 0;
}

/* OBJECT */

static PyObject *
OBJECT_getitem(char *ip, PyArrayObject *ap)
{
    if (*(PyObject **)ip == NULL) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    if (!ap || PyArray_ISALIGNED(ap)) {
        Py_INCREF(*(PyObject **)ip);
        return *(PyObject **)ip;
    }
    else {
        PyObject **obj;
        obj = (PyObject **)ip;
        Py_INCREF(*obj);
        return *obj;
    }
}


static int
OBJECT_setitem(PyObject *op, char *ov, PyArrayObject *ap)
{
    Py_INCREF(op);
    if (!ap || PyArray_ISALIGNED(ap)) {
        Py_XDECREF(*(PyObject **)ov);
        *(PyObject **)ov = op;
    }
    else {
        PyObject **obj;
        obj = (PyObject **)ov;
        Py_XDECREF(*obj);
        memcpy(ov, &op, sizeof(PyObject *));
    }
    return PyErr_Occurred() ? -1:0;
}

/* VOID */

static PyObject *
VOID_getitem(char *ip, PyArrayObject *ap)
{
    PyObject *u=NULL;
    PyArray_Descr* descr;
    int itemsize;

    descr = ap->descr;
    if (descr->names) {
        PyObject *key;
        PyObject *names;
        int i, n;
        PyObject *ret;
        PyObject *tup, *title;
        PyArray_Descr *new;
        int offset;
        int savedflags;

        /* get the names from the fields dictionary*/
        names = descr->names;
        if (!names) goto finish;
        n = PyTuple_GET_SIZE(names);
        ret = PyTuple_New(n);
        savedflags = ap->flags;
        for (i=0; i<n; i++) {
            key = PyTuple_GET_ITEM(names, i);
            tup = PyDict_GetItem(descr->fields, key);
            if (!PyArg_ParseTuple(tup, "Oi|O", &new, &offset,
                        &title)) {
                Py_DECREF(ret);
                ap->descr = descr;
                return NULL;
            }
            ap->descr = new;
            /* update alignment based on offset */
            if ((new->alignment > 1) &&                     \
                    ((((intp)(ip+offset)) % new->alignment) != 0))
                ap->flags &= ~ALIGNED;
            else
                ap->flags |= ALIGNED;

            PyTuple_SET_ITEM(ret, i,                        \
                    new->f->getitem(ip+offset, ap));
            ap->flags = savedflags;
        }
        ap->descr = descr;
        return ret;
    }

    if (descr->subarray) {
        /* return an array of the basic type */
        PyArray_Dims shape={NULL,-1};
        PyObject *ret;
        if (!(PyArray_IntpConverter(descr->subarray->shape,
                        &shape))) {
            PyDimMem_FREE(shape.ptr);
            PyErr_SetString(PyExc_ValueError,
                    "invalid shape in fixed-type tuple.");
            return NULL;
        }
        Py_INCREF(descr->subarray->base);
        ret = PyArray_NewFromDescr(&PyArray_Type,
                descr->subarray->base,
                shape.len, shape.ptr,
                NULL, ip, ap->flags, NULL);
        PyDimMem_FREE(shape.ptr);
        if (!ret) return NULL;
        PyArray_BASE(ret) = (PyObject *)ap;
        Py_INCREF(ap);
        PyArray_UpdateFlags((PyArrayObject *)ret, UPDATE_ALL);
        return ret;
    }

finish:
    if (PyDataType_FLAGCHK(descr, NPY_ITEM_HASOBJECT) ||
            PyDataType_FLAGCHK(descr, NPY_ITEM_IS_POINTER)) {
        PyErr_SetString(PyExc_ValueError,
                "tried to get void-array with object"
                " members as buffer.");
        return NULL;
    }

    itemsize=ap->descr->elsize;
    if (PyArray_ISWRITEABLE(ap))
        u = PyBuffer_FromReadWriteMemory(ip, itemsize);
    else
        u = PyBuffer_FromMemory(ip, itemsize);
    if (u==NULL) goto fail;

    /* default is to return buffer object pointing to current item */
    /*  a view of it */
    return u;

fail:
    return NULL;
}



static int PyArray_CopyObject(PyArrayObject *, PyObject *);

static int
VOID_setitem(PyObject *op, char *ip, PyArrayObject *ap)
{
    PyArray_Descr* descr;
    int itemsize=ap->descr->elsize;
    int res;

    descr = ap->descr;
    if (descr->names && PyTuple_Check(op)) {
        PyObject *key;
        PyObject *names;
        int i, n;
        PyObject *tup, *title;
        PyArray_Descr *new;
        int offset;
        int savedflags;
        res = -1;
        /* get the names from the fields dictionary*/
        names = descr->names;
        n = PyTuple_GET_SIZE(names);
        if (PyTuple_GET_SIZE(op) != n) {
            PyErr_SetString(PyExc_ValueError,
                    "size of tuple must match "\
                    "number of fields.");
            return -1;
        }
        savedflags = ap->flags;
        for (i=0; i<n; i++) {
            key = PyTuple_GET_ITEM(names, i);
            tup = PyDict_GetItem(descr->fields, key);
            if (!PyArg_ParseTuple(tup, "Oi|O", &new, &offset,
                        &title)) {
                ap->descr = descr;
                return -1;
            }
            ap->descr = new;
            /* remember to update alignment flags */
            if ((new->alignment > 1) &&                     \
                    ((((intp)(ip+offset)) % new->alignment) != 0))
                ap->flags &= ~ALIGNED;
            else
                ap->flags |= ALIGNED;

            res = new->f->setitem(PyTuple_GET_ITEM(op, i),
                    ip+offset, ap);
            ap->flags = savedflags;
            if (res < 0) break;
        }
        ap->descr = descr;
        return res;
    }

    if (descr->subarray) {
        /* copy into an array of the same basic type */
        PyArray_Dims shape={NULL,-1};
        PyObject *ret;
        if (!(PyArray_IntpConverter(descr->subarray->shape,
                        &shape))) {
            PyDimMem_FREE(shape.ptr);
            PyErr_SetString(PyExc_ValueError,
                    "invalid shape in fixed-type tuple.");
            return -1;
        }
        Py_INCREF(descr->subarray->base);
        ret = PyArray_NewFromDescr(&PyArray_Type,
                descr->subarray->base,
                shape.len, shape.ptr,
                NULL, ip, ap->flags, NULL);
        PyDimMem_FREE(shape.ptr);
        if (!ret) return -1;
        PyArray_BASE(ret) = (PyObject *)ap;
        Py_INCREF(ap);
        PyArray_UpdateFlags((PyArrayObject *)ret, UPDATE_ALL);
        res = PyArray_CopyObject((PyArrayObject *)ret, op);
        Py_DECREF(ret);
        return res;
    }

    /* Default is to use buffer interface to set item */
    {
        const void *buffer;
        Py_ssize_t buflen;
        if (PyDataType_FLAGCHK(descr, NPY_ITEM_HASOBJECT) ||
                PyDataType_FLAGCHK(descr, NPY_ITEM_IS_POINTER)) {
            PyErr_SetString(PyExc_ValueError,
                    "tried to set void-array with object"
                    " members using buffer.");
            return -1;
        }
        res = PyObject_AsReadBuffer(op, &buffer, &buflen);
        if (res == -1) goto fail;
        memcpy(ip, buffer, NPY_MIN(buflen, itemsize));
        if (itemsize > buflen) {
            memset(ip+buflen, 0, (itemsize-buflen));
        }
    }
    return 0;

fail:
    return -1;
}


/****************** XXX_to_YYY *******************************/

/* Assumes contiguous, and aligned, from and to */


#line 670
static void
BYTE_to_BYTE(register byte *ip, register byte *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (byte)*ip;
        ip++;
    }
}

#line 670
static void
BYTE_to_UBYTE(register byte *ip, register ubyte *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (ubyte)*ip;
        ip++;
    }
}

#line 670
static void
BYTE_to_SHORT(register byte *ip, register short *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (short)*ip;
        ip++;
    }
}

#line 670
static void
BYTE_to_USHORT(register byte *ip, register ushort *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (ushort)*ip;
        ip++;
    }
}

#line 670
static void
BYTE_to_INT(register byte *ip, register int *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (int)*ip;
        ip++;
    }
}

#line 670
static void
BYTE_to_UINT(register byte *ip, register uint *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (uint)*ip;
        ip++;
    }
}

#line 670
static void
BYTE_to_LONG(register byte *ip, register long *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (long)*ip;
        ip++;
    }
}

#line 670
static void
BYTE_to_ULONG(register byte *ip, register ulong *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (ulong)*ip;
        ip++;
    }
}

#line 670
static void
BYTE_to_LONGLONG(register byte *ip, register longlong *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (longlong)*ip;
        ip++;
    }
}

#line 670
static void
BYTE_to_ULONGLONG(register byte *ip, register ulonglong *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (ulonglong)*ip;
        ip++;
    }
}

#line 670
static void
BYTE_to_FLOAT(register byte *ip, register float *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (float)*ip;
        ip++;
    }
}

#line 670
static void
BYTE_to_DOUBLE(register byte *ip, register double *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (double)*ip;
        ip++;
    }
}

#line 670
static void
BYTE_to_LONGDOUBLE(register byte *ip, register longdouble *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (longdouble)*ip;
        ip++;
    }
}

#line 670
static void
UBYTE_to_BYTE(register ubyte *ip, register byte *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (byte)*ip;
        ip++;
    }
}

#line 670
static void
UBYTE_to_UBYTE(register ubyte *ip, register ubyte *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (ubyte)*ip;
        ip++;
    }
}

#line 670
static void
UBYTE_to_SHORT(register ubyte *ip, register short *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (short)*ip;
        ip++;
    }
}

#line 670
static void
UBYTE_to_USHORT(register ubyte *ip, register ushort *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (ushort)*ip;
        ip++;
    }
}

#line 670
static void
UBYTE_to_INT(register ubyte *ip, register int *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (int)*ip;
        ip++;
    }
}

#line 670
static void
UBYTE_to_UINT(register ubyte *ip, register uint *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (uint)*ip;
        ip++;
    }
}

#line 670
static void
UBYTE_to_LONG(register ubyte *ip, register long *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (long)*ip;
        ip++;
    }
}

#line 670
static void
UBYTE_to_ULONG(register ubyte *ip, register ulong *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (ulong)*ip;
        ip++;
    }
}

#line 670
static void
UBYTE_to_LONGLONG(register ubyte *ip, register longlong *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (longlong)*ip;
        ip++;
    }
}

#line 670
static void
UBYTE_to_ULONGLONG(register ubyte *ip, register ulonglong *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (ulonglong)*ip;
        ip++;
    }
}

#line 670
static void
UBYTE_to_FLOAT(register ubyte *ip, register float *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (float)*ip;
        ip++;
    }
}

#line 670
static void
UBYTE_to_DOUBLE(register ubyte *ip, register double *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (double)*ip;
        ip++;
    }
}

#line 670
static void
UBYTE_to_LONGDOUBLE(register ubyte *ip, register longdouble *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (longdouble)*ip;
        ip++;
    }
}

#line 670
static void
SHORT_to_BYTE(register short *ip, register byte *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (byte)*ip;
        ip++;
    }
}

#line 670
static void
SHORT_to_UBYTE(register short *ip, register ubyte *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (ubyte)*ip;
        ip++;
    }
}

#line 670
static void
SHORT_to_SHORT(register short *ip, register short *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (short)*ip;
        ip++;
    }
}

#line 670
static void
SHORT_to_USHORT(register short *ip, register ushort *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (ushort)*ip;
        ip++;
    }
}

#line 670
static void
SHORT_to_INT(register short *ip, register int *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (int)*ip;
        ip++;
    }
}

#line 670
static void
SHORT_to_UINT(register short *ip, register uint *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (uint)*ip;
        ip++;
    }
}

#line 670
static void
SHORT_to_LONG(register short *ip, register long *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (long)*ip;
        ip++;
    }
}

#line 670
static void
SHORT_to_ULONG(register short *ip, register ulong *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (ulong)*ip;
        ip++;
    }
}

#line 670
static void
SHORT_to_LONGLONG(register short *ip, register longlong *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (longlong)*ip;
        ip++;
    }
}

#line 670
static void
SHORT_to_ULONGLONG(register short *ip, register ulonglong *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (ulonglong)*ip;
        ip++;
    }
}

#line 670
static void
SHORT_to_FLOAT(register short *ip, register float *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (float)*ip;
        ip++;
    }
}

#line 670
static void
SHORT_to_DOUBLE(register short *ip, register double *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (double)*ip;
        ip++;
    }
}

#line 670
static void
SHORT_to_LONGDOUBLE(register short *ip, register longdouble *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (longdouble)*ip;
        ip++;
    }
}

#line 670
static void
USHORT_to_BYTE(register ushort *ip, register byte *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (byte)*ip;
        ip++;
    }
}

#line 670
static void
USHORT_to_UBYTE(register ushort *ip, register ubyte *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (ubyte)*ip;
        ip++;
    }
}

#line 670
static void
USHORT_to_SHORT(register ushort *ip, register short *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (short)*ip;
        ip++;
    }
}

#line 670
static void
USHORT_to_USHORT(register ushort *ip, register ushort *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (ushort)*ip;
        ip++;
    }
}

#line 670
static void
USHORT_to_INT(register ushort *ip, register int *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (int)*ip;
        ip++;
    }
}

#line 670
static void
USHORT_to_UINT(register ushort *ip, register uint *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (uint)*ip;
        ip++;
    }
}

#line 670
static void
USHORT_to_LONG(register ushort *ip, register long *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (long)*ip;
        ip++;
    }
}

#line 670
static void
USHORT_to_ULONG(register ushort *ip, register ulong *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (ulong)*ip;
        ip++;
    }
}

#line 670
static void
USHORT_to_LONGLONG(register ushort *ip, register longlong *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (longlong)*ip;
        ip++;
    }
}

#line 670
static void
USHORT_to_ULONGLONG(register ushort *ip, register ulonglong *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (ulonglong)*ip;
        ip++;
    }
}

#line 670
static void
USHORT_to_FLOAT(register ushort *ip, register float *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (float)*ip;
        ip++;
    }
}

#line 670
static void
USHORT_to_DOUBLE(register ushort *ip, register double *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (double)*ip;
        ip++;
    }
}

#line 670
static void
USHORT_to_LONGDOUBLE(register ushort *ip, register longdouble *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (longdouble)*ip;
        ip++;
    }
}

#line 670
static void
INT_to_BYTE(register int *ip, register byte *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (byte)*ip;
        ip++;
    }
}

#line 670
static void
INT_to_UBYTE(register int *ip, register ubyte *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (ubyte)*ip;
        ip++;
    }
}

#line 670
static void
INT_to_SHORT(register int *ip, register short *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (short)*ip;
        ip++;
    }
}

#line 670
static void
INT_to_USHORT(register int *ip, register ushort *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (ushort)*ip;
        ip++;
    }
}

#line 670
static void
INT_to_INT(register int *ip, register int *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (int)*ip;
        ip++;
    }
}

#line 670
static void
INT_to_UINT(register int *ip, register uint *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (uint)*ip;
        ip++;
    }
}

#line 670
static void
INT_to_LONG(register int *ip, register long *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (long)*ip;
        ip++;
    }
}

#line 670
static void
INT_to_ULONG(register int *ip, register ulong *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (ulong)*ip;
        ip++;
    }
}

#line 670
static void
INT_to_LONGLONG(register int *ip, register longlong *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (longlong)*ip;
        ip++;
    }
}

#line 670
static void
INT_to_ULONGLONG(register int *ip, register ulonglong *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (ulonglong)*ip;
        ip++;
    }
}

#line 670
static void
INT_to_FLOAT(register int *ip, register float *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (float)*ip;
        ip++;
    }
}

#line 670
static void
INT_to_DOUBLE(register int *ip, register double *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (double)*ip;
        ip++;
    }
}

#line 670
static void
INT_to_LONGDOUBLE(register int *ip, register longdouble *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (longdouble)*ip;
        ip++;
    }
}

#line 670
static void
UINT_to_BYTE(register uint *ip, register byte *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (byte)*ip;
        ip++;
    }
}

#line 670
static void
UINT_to_UBYTE(register uint *ip, register ubyte *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (ubyte)*ip;
        ip++;
    }
}

#line 670
static void
UINT_to_SHORT(register uint *ip, register short *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (short)*ip;
        ip++;
    }
}

#line 670
static void
UINT_to_USHORT(register uint *ip, register ushort *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (ushort)*ip;
        ip++;
    }
}

#line 670
static void
UINT_to_INT(register uint *ip, register int *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (int)*ip;
        ip++;
    }
}

#line 670
static void
UINT_to_UINT(register uint *ip, register uint *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (uint)*ip;
        ip++;
    }
}

#line 670
static void
UINT_to_LONG(register uint *ip, register long *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (long)*ip;
        ip++;
    }
}

#line 670
static void
UINT_to_ULONG(register uint *ip, register ulong *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (ulong)*ip;
        ip++;
    }
}

#line 670
static void
UINT_to_LONGLONG(register uint *ip, register longlong *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (longlong)*ip;
        ip++;
    }
}

#line 670
static void
UINT_to_ULONGLONG(register uint *ip, register ulonglong *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (ulonglong)*ip;
        ip++;
    }
}

#line 670
static void
UINT_to_FLOAT(register uint *ip, register float *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (float)*ip;
        ip++;
    }
}

#line 670
static void
UINT_to_DOUBLE(register uint *ip, register double *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (double)*ip;
        ip++;
    }
}

#line 670
static void
UINT_to_LONGDOUBLE(register uint *ip, register longdouble *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (longdouble)*ip;
        ip++;
    }
}

#line 670
static void
LONG_to_BYTE(register long *ip, register byte *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (byte)*ip;
        ip++;
    }
}

#line 670
static void
LONG_to_UBYTE(register long *ip, register ubyte *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (ubyte)*ip;
        ip++;
    }
}

#line 670
static void
LONG_to_SHORT(register long *ip, register short *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (short)*ip;
        ip++;
    }
}

#line 670
static void
LONG_to_USHORT(register long *ip, register ushort *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (ushort)*ip;
        ip++;
    }
}

#line 670
static void
LONG_to_INT(register long *ip, register int *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (int)*ip;
        ip++;
    }
}

#line 670
static void
LONG_to_UINT(register long *ip, register uint *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (uint)*ip;
        ip++;
    }
}

#line 670
static void
LONG_to_LONG(register long *ip, register long *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (long)*ip;
        ip++;
    }
}

#line 670
static void
LONG_to_ULONG(register long *ip, register ulong *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (ulong)*ip;
        ip++;
    }
}

#line 670
static void
LONG_to_LONGLONG(register long *ip, register longlong *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (longlong)*ip;
        ip++;
    }
}

#line 670
static void
LONG_to_ULONGLONG(register long *ip, register ulonglong *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (ulonglong)*ip;
        ip++;
    }
}

#line 670
static void
LONG_to_FLOAT(register long *ip, register float *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (float)*ip;
        ip++;
    }
}

#line 670
static void
LONG_to_DOUBLE(register long *ip, register double *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (double)*ip;
        ip++;
    }
}

#line 670
static void
LONG_to_LONGDOUBLE(register long *ip, register longdouble *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (longdouble)*ip;
        ip++;
    }
}

#line 670
static void
ULONG_to_BYTE(register ulong *ip, register byte *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (byte)*ip;
        ip++;
    }
}

#line 670
static void
ULONG_to_UBYTE(register ulong *ip, register ubyte *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (ubyte)*ip;
        ip++;
    }
}

#line 670
static void
ULONG_to_SHORT(register ulong *ip, register short *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (short)*ip;
        ip++;
    }
}

#line 670
static void
ULONG_to_USHORT(register ulong *ip, register ushort *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (ushort)*ip;
        ip++;
    }
}

#line 670
static void
ULONG_to_INT(register ulong *ip, register int *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (int)*ip;
        ip++;
    }
}

#line 670
static void
ULONG_to_UINT(register ulong *ip, register uint *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (uint)*ip;
        ip++;
    }
}

#line 670
static void
ULONG_to_LONG(register ulong *ip, register long *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (long)*ip;
        ip++;
    }
}

#line 670
static void
ULONG_to_ULONG(register ulong *ip, register ulong *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (ulong)*ip;
        ip++;
    }
}

#line 670
static void
ULONG_to_LONGLONG(register ulong *ip, register longlong *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (longlong)*ip;
        ip++;
    }
}

#line 670
static void
ULONG_to_ULONGLONG(register ulong *ip, register ulonglong *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (ulonglong)*ip;
        ip++;
    }
}

#line 670
static void
ULONG_to_FLOAT(register ulong *ip, register float *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (float)*ip;
        ip++;
    }
}

#line 670
static void
ULONG_to_DOUBLE(register ulong *ip, register double *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (double)*ip;
        ip++;
    }
}

#line 670
static void
ULONG_to_LONGDOUBLE(register ulong *ip, register longdouble *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (longdouble)*ip;
        ip++;
    }
}

#line 670
static void
LONGLONG_to_BYTE(register longlong *ip, register byte *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (byte)*ip;
        ip++;
    }
}

#line 670
static void
LONGLONG_to_UBYTE(register longlong *ip, register ubyte *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (ubyte)*ip;
        ip++;
    }
}

#line 670
static void
LONGLONG_to_SHORT(register longlong *ip, register short *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (short)*ip;
        ip++;
    }
}

#line 670
static void
LONGLONG_to_USHORT(register longlong *ip, register ushort *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (ushort)*ip;
        ip++;
    }
}

#line 670
static void
LONGLONG_to_INT(register longlong *ip, register int *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (int)*ip;
        ip++;
    }
}

#line 670
static void
LONGLONG_to_UINT(register longlong *ip, register uint *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (uint)*ip;
        ip++;
    }
}

#line 670
static void
LONGLONG_to_LONG(register longlong *ip, register long *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (long)*ip;
        ip++;
    }
}

#line 670
static void
LONGLONG_to_ULONG(register longlong *ip, register ulong *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (ulong)*ip;
        ip++;
    }
}

#line 670
static void
LONGLONG_to_LONGLONG(register longlong *ip, register longlong *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (longlong)*ip;
        ip++;
    }
}

#line 670
static void
LONGLONG_to_ULONGLONG(register longlong *ip, register ulonglong *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (ulonglong)*ip;
        ip++;
    }
}

#line 670
static void
LONGLONG_to_FLOAT(register longlong *ip, register float *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (float)*ip;
        ip++;
    }
}

#line 670
static void
LONGLONG_to_DOUBLE(register longlong *ip, register double *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (double)*ip;
        ip++;
    }
}

#line 670
static void
LONGLONG_to_LONGDOUBLE(register longlong *ip, register longdouble *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (longdouble)*ip;
        ip++;
    }
}

#line 670
static void
ULONGLONG_to_BYTE(register ulonglong *ip, register byte *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (byte)*ip;
        ip++;
    }
}

#line 670
static void
ULONGLONG_to_UBYTE(register ulonglong *ip, register ubyte *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (ubyte)*ip;
        ip++;
    }
}

#line 670
static void
ULONGLONG_to_SHORT(register ulonglong *ip, register short *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (short)*ip;
        ip++;
    }
}

#line 670
static void
ULONGLONG_to_USHORT(register ulonglong *ip, register ushort *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (ushort)*ip;
        ip++;
    }
}

#line 670
static void
ULONGLONG_to_INT(register ulonglong *ip, register int *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (int)*ip;
        ip++;
    }
}

#line 670
static void
ULONGLONG_to_UINT(register ulonglong *ip, register uint *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (uint)*ip;
        ip++;
    }
}

#line 670
static void
ULONGLONG_to_LONG(register ulonglong *ip, register long *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (long)*ip;
        ip++;
    }
}

#line 670
static void
ULONGLONG_to_ULONG(register ulonglong *ip, register ulong *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (ulong)*ip;
        ip++;
    }
}

#line 670
static void
ULONGLONG_to_LONGLONG(register ulonglong *ip, register longlong *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (longlong)*ip;
        ip++;
    }
}

#line 670
static void
ULONGLONG_to_ULONGLONG(register ulonglong *ip, register ulonglong *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (ulonglong)*ip;
        ip++;
    }
}

#line 670
static void
ULONGLONG_to_FLOAT(register ulonglong *ip, register float *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (float)*ip;
        ip++;
    }
}

#line 670
static void
ULONGLONG_to_DOUBLE(register ulonglong *ip, register double *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (double)*ip;
        ip++;
    }
}

#line 670
static void
ULONGLONG_to_LONGDOUBLE(register ulonglong *ip, register longdouble *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (longdouble)*ip;
        ip++;
    }
}

#line 670
static void
FLOAT_to_BYTE(register float *ip, register byte *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (byte)*ip;
        ip++;
    }
}

#line 670
static void
FLOAT_to_UBYTE(register float *ip, register ubyte *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (ubyte)*ip;
        ip++;
    }
}

#line 670
static void
FLOAT_to_SHORT(register float *ip, register short *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (short)*ip;
        ip++;
    }
}

#line 670
static void
FLOAT_to_USHORT(register float *ip, register ushort *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (ushort)*ip;
        ip++;
    }
}

#line 670
static void
FLOAT_to_INT(register float *ip, register int *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (int)*ip;
        ip++;
    }
}

#line 670
static void
FLOAT_to_UINT(register float *ip, register uint *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (uint)*ip;
        ip++;
    }
}

#line 670
static void
FLOAT_to_LONG(register float *ip, register long *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (long)*ip;
        ip++;
    }
}

#line 670
static void
FLOAT_to_ULONG(register float *ip, register ulong *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (ulong)*ip;
        ip++;
    }
}

#line 670
static void
FLOAT_to_LONGLONG(register float *ip, register longlong *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (longlong)*ip;
        ip++;
    }
}

#line 670
static void
FLOAT_to_ULONGLONG(register float *ip, register ulonglong *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (ulonglong)*ip;
        ip++;
    }
}

#line 670
static void
FLOAT_to_FLOAT(register float *ip, register float *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (float)*ip;
        ip++;
    }
}

#line 670
static void
FLOAT_to_DOUBLE(register float *ip, register double *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (double)*ip;
        ip++;
    }
}

#line 670
static void
FLOAT_to_LONGDOUBLE(register float *ip, register longdouble *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (longdouble)*ip;
        ip++;
    }
}

#line 670
static void
DOUBLE_to_BYTE(register double *ip, register byte *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (byte)*ip;
        ip++;
    }
}

#line 670
static void
DOUBLE_to_UBYTE(register double *ip, register ubyte *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (ubyte)*ip;
        ip++;
    }
}

#line 670
static void
DOUBLE_to_SHORT(register double *ip, register short *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (short)*ip;
        ip++;
    }
}

#line 670
static void
DOUBLE_to_USHORT(register double *ip, register ushort *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (ushort)*ip;
        ip++;
    }
}

#line 670
static void
DOUBLE_to_INT(register double *ip, register int *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (int)*ip;
        ip++;
    }
}

#line 670
static void
DOUBLE_to_UINT(register double *ip, register uint *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (uint)*ip;
        ip++;
    }
}

#line 670
static void
DOUBLE_to_LONG(register double *ip, register long *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (long)*ip;
        ip++;
    }
}

#line 670
static void
DOUBLE_to_ULONG(register double *ip, register ulong *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (ulong)*ip;
        ip++;
    }
}

#line 670
static void
DOUBLE_to_LONGLONG(register double *ip, register longlong *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (longlong)*ip;
        ip++;
    }
}

#line 670
static void
DOUBLE_to_ULONGLONG(register double *ip, register ulonglong *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (ulonglong)*ip;
        ip++;
    }
}

#line 670
static void
DOUBLE_to_FLOAT(register double *ip, register float *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (float)*ip;
        ip++;
    }
}

#line 670
static void
DOUBLE_to_DOUBLE(register double *ip, register double *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (double)*ip;
        ip++;
    }
}

#line 670
static void
DOUBLE_to_LONGDOUBLE(register double *ip, register longdouble *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (longdouble)*ip;
        ip++;
    }
}

#line 670
static void
LONGDOUBLE_to_BYTE(register longdouble *ip, register byte *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (byte)*ip;
        ip++;
    }
}

#line 670
static void
LONGDOUBLE_to_UBYTE(register longdouble *ip, register ubyte *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (ubyte)*ip;
        ip++;
    }
}

#line 670
static void
LONGDOUBLE_to_SHORT(register longdouble *ip, register short *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (short)*ip;
        ip++;
    }
}

#line 670
static void
LONGDOUBLE_to_USHORT(register longdouble *ip, register ushort *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (ushort)*ip;
        ip++;
    }
}

#line 670
static void
LONGDOUBLE_to_INT(register longdouble *ip, register int *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (int)*ip;
        ip++;
    }
}

#line 670
static void
LONGDOUBLE_to_UINT(register longdouble *ip, register uint *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (uint)*ip;
        ip++;
    }
}

#line 670
static void
LONGDOUBLE_to_LONG(register longdouble *ip, register long *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (long)*ip;
        ip++;
    }
}

#line 670
static void
LONGDOUBLE_to_ULONG(register longdouble *ip, register ulong *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (ulong)*ip;
        ip++;
    }
}

#line 670
static void
LONGDOUBLE_to_LONGLONG(register longdouble *ip, register longlong *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (longlong)*ip;
        ip++;
    }
}

#line 670
static void
LONGDOUBLE_to_ULONGLONG(register longdouble *ip, register ulonglong *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (ulonglong)*ip;
        ip++;
    }
}

#line 670
static void
LONGDOUBLE_to_FLOAT(register longdouble *ip, register float *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (float)*ip;
        ip++;
    }
}

#line 670
static void
LONGDOUBLE_to_DOUBLE(register longdouble *ip, register double *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (double)*ip;
        ip++;
    }
}

#line 670
static void
LONGDOUBLE_to_LONGDOUBLE(register longdouble *ip, register longdouble *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (longdouble)*ip;
        ip++;
    }
}

#line 670
static void
CFLOAT_to_BYTE(register float *ip, register byte *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (byte)*ip;
        ip+=2;
    }
}

#line 670
static void
CFLOAT_to_UBYTE(register float *ip, register ubyte *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (ubyte)*ip;
        ip+=2;
    }
}

#line 670
static void
CFLOAT_to_SHORT(register float *ip, register short *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (short)*ip;
        ip+=2;
    }
}

#line 670
static void
CFLOAT_to_USHORT(register float *ip, register ushort *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (ushort)*ip;
        ip+=2;
    }
}

#line 670
static void
CFLOAT_to_INT(register float *ip, register int *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (int)*ip;
        ip+=2;
    }
}

#line 670
static void
CFLOAT_to_UINT(register float *ip, register uint *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (uint)*ip;
        ip+=2;
    }
}

#line 670
static void
CFLOAT_to_LONG(register float *ip, register long *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (long)*ip;
        ip+=2;
    }
}

#line 670
static void
CFLOAT_to_ULONG(register float *ip, register ulong *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (ulong)*ip;
        ip+=2;
    }
}

#line 670
static void
CFLOAT_to_LONGLONG(register float *ip, register longlong *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (longlong)*ip;
        ip+=2;
    }
}

#line 670
static void
CFLOAT_to_ULONGLONG(register float *ip, register ulonglong *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (ulonglong)*ip;
        ip+=2;
    }
}

#line 670
static void
CFLOAT_to_FLOAT(register float *ip, register float *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (float)*ip;
        ip+=2;
    }
}

#line 670
static void
CFLOAT_to_DOUBLE(register float *ip, register double *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (double)*ip;
        ip+=2;
    }
}

#line 670
static void
CFLOAT_to_LONGDOUBLE(register float *ip, register longdouble *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (longdouble)*ip;
        ip+=2;
    }
}

#line 670
static void
CDOUBLE_to_BYTE(register double *ip, register byte *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (byte)*ip;
        ip+=2;
    }
}

#line 670
static void
CDOUBLE_to_UBYTE(register double *ip, register ubyte *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (ubyte)*ip;
        ip+=2;
    }
}

#line 670
static void
CDOUBLE_to_SHORT(register double *ip, register short *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (short)*ip;
        ip+=2;
    }
}

#line 670
static void
CDOUBLE_to_USHORT(register double *ip, register ushort *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (ushort)*ip;
        ip+=2;
    }
}

#line 670
static void
CDOUBLE_to_INT(register double *ip, register int *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (int)*ip;
        ip+=2;
    }
}

#line 670
static void
CDOUBLE_to_UINT(register double *ip, register uint *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (uint)*ip;
        ip+=2;
    }
}

#line 670
static void
CDOUBLE_to_LONG(register double *ip, register long *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (long)*ip;
        ip+=2;
    }
}

#line 670
static void
CDOUBLE_to_ULONG(register double *ip, register ulong *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (ulong)*ip;
        ip+=2;
    }
}

#line 670
static void
CDOUBLE_to_LONGLONG(register double *ip, register longlong *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (longlong)*ip;
        ip+=2;
    }
}

#line 670
static void
CDOUBLE_to_ULONGLONG(register double *ip, register ulonglong *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (ulonglong)*ip;
        ip+=2;
    }
}

#line 670
static void
CDOUBLE_to_FLOAT(register double *ip, register float *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (float)*ip;
        ip+=2;
    }
}

#line 670
static void
CDOUBLE_to_DOUBLE(register double *ip, register double *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (double)*ip;
        ip+=2;
    }
}

#line 670
static void
CDOUBLE_to_LONGDOUBLE(register double *ip, register longdouble *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (longdouble)*ip;
        ip+=2;
    }
}

#line 670
static void
CLONGDOUBLE_to_BYTE(register longdouble *ip, register byte *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (byte)*ip;
        ip+=2;
    }
}

#line 670
static void
CLONGDOUBLE_to_UBYTE(register longdouble *ip, register ubyte *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (ubyte)*ip;
        ip+=2;
    }
}

#line 670
static void
CLONGDOUBLE_to_SHORT(register longdouble *ip, register short *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (short)*ip;
        ip+=2;
    }
}

#line 670
static void
CLONGDOUBLE_to_USHORT(register longdouble *ip, register ushort *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (ushort)*ip;
        ip+=2;
    }
}

#line 670
static void
CLONGDOUBLE_to_INT(register longdouble *ip, register int *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (int)*ip;
        ip+=2;
    }
}

#line 670
static void
CLONGDOUBLE_to_UINT(register longdouble *ip, register uint *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (uint)*ip;
        ip+=2;
    }
}

#line 670
static void
CLONGDOUBLE_to_LONG(register longdouble *ip, register long *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (long)*ip;
        ip+=2;
    }
}

#line 670
static void
CLONGDOUBLE_to_ULONG(register longdouble *ip, register ulong *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (ulong)*ip;
        ip+=2;
    }
}

#line 670
static void
CLONGDOUBLE_to_LONGLONG(register longdouble *ip, register longlong *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (longlong)*ip;
        ip+=2;
    }
}

#line 670
static void
CLONGDOUBLE_to_ULONGLONG(register longdouble *ip, register ulonglong *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (ulonglong)*ip;
        ip+=2;
    }
}

#line 670
static void
CLONGDOUBLE_to_FLOAT(register longdouble *ip, register float *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (float)*ip;
        ip+=2;
    }
}

#line 670
static void
CLONGDOUBLE_to_DOUBLE(register longdouble *ip, register double *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (double)*ip;
        ip+=2;
    }
}

#line 670
static void
CLONGDOUBLE_to_LONGDOUBLE(register longdouble *ip, register longdouble *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (longdouble)*ip;
        ip+=2;
    }
}


#line 685
static void
BOOL_to_BOOL(register Bool *ip, register Bool *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (Bool)(*ip++ != FALSE);
    }
}

#line 685
static void
BYTE_to_BOOL(register byte *ip, register Bool *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (Bool)(*ip++ != FALSE);
    }
}

#line 685
static void
UBYTE_to_BOOL(register ubyte *ip, register Bool *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (Bool)(*ip++ != FALSE);
    }
}

#line 685
static void
SHORT_to_BOOL(register short *ip, register Bool *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (Bool)(*ip++ != FALSE);
    }
}

#line 685
static void
USHORT_to_BOOL(register ushort *ip, register Bool *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (Bool)(*ip++ != FALSE);
    }
}

#line 685
static void
INT_to_BOOL(register int *ip, register Bool *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (Bool)(*ip++ != FALSE);
    }
}

#line 685
static void
UINT_to_BOOL(register uint *ip, register Bool *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (Bool)(*ip++ != FALSE);
    }
}

#line 685
static void
LONG_to_BOOL(register long *ip, register Bool *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (Bool)(*ip++ != FALSE);
    }
}

#line 685
static void
ULONG_to_BOOL(register ulong *ip, register Bool *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (Bool)(*ip++ != FALSE);
    }
}

#line 685
static void
LONGLONG_to_BOOL(register longlong *ip, register Bool *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (Bool)(*ip++ != FALSE);
    }
}

#line 685
static void
ULONGLONG_to_BOOL(register ulonglong *ip, register Bool *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (Bool)(*ip++ != FALSE);
    }
}

#line 685
static void
FLOAT_to_BOOL(register float *ip, register Bool *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (Bool)(*ip++ != FALSE);
    }
}

#line 685
static void
DOUBLE_to_BOOL(register double *ip, register Bool *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (Bool)(*ip++ != FALSE);
    }
}

#line 685
static void
LONGDOUBLE_to_BOOL(register longdouble *ip, register Bool *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (Bool)(*ip++ != FALSE);
    }
}


#line 699
static void
CFLOAT_to_BOOL(register cfloat *ip, register Bool *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op = (Bool)(((*ip).real != FALSE) || ((*ip).imag != FALSE));
        op++; ip++;
    }
}

#line 699
static void
CDOUBLE_to_BOOL(register cdouble *ip, register Bool *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op = (Bool)(((*ip).real != FALSE) || ((*ip).imag != FALSE));
        op++; ip++;
    }
}

#line 699
static void
CLONGDOUBLE_to_BOOL(register clongdouble *ip, register Bool *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op = (Bool)(((*ip).real != FALSE) || ((*ip).imag != FALSE));
        op++; ip++;
    }
}


#line 714
static void
BOOL_to_BYTE(register Bool *ip, register byte *op, register intp n,
             PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (byte)(*ip++ != FALSE);
    }
}

#line 714
static void
BOOL_to_UBYTE(register Bool *ip, register ubyte *op, register intp n,
             PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (ubyte)(*ip++ != FALSE);
    }
}

#line 714
static void
BOOL_to_SHORT(register Bool *ip, register short *op, register intp n,
             PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (short)(*ip++ != FALSE);
    }
}

#line 714
static void
BOOL_to_USHORT(register Bool *ip, register ushort *op, register intp n,
             PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (ushort)(*ip++ != FALSE);
    }
}

#line 714
static void
BOOL_to_INT(register Bool *ip, register int *op, register intp n,
             PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (int)(*ip++ != FALSE);
    }
}

#line 714
static void
BOOL_to_UINT(register Bool *ip, register uint *op, register intp n,
             PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (uint)(*ip++ != FALSE);
    }
}

#line 714
static void
BOOL_to_LONG(register Bool *ip, register long *op, register intp n,
             PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (long)(*ip++ != FALSE);
    }
}

#line 714
static void
BOOL_to_ULONG(register Bool *ip, register ulong *op, register intp n,
             PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (ulong)(*ip++ != FALSE);
    }
}

#line 714
static void
BOOL_to_LONGLONG(register Bool *ip, register longlong *op, register intp n,
             PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (longlong)(*ip++ != FALSE);
    }
}

#line 714
static void
BOOL_to_ULONGLONG(register Bool *ip, register ulonglong *op, register intp n,
             PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (ulonglong)(*ip++ != FALSE);
    }
}

#line 714
static void
BOOL_to_FLOAT(register Bool *ip, register float *op, register intp n,
             PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (float)(*ip++ != FALSE);
    }
}

#line 714
static void
BOOL_to_DOUBLE(register Bool *ip, register double *op, register intp n,
             PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (double)(*ip++ != FALSE);
    }
}

#line 714
static void
BOOL_to_LONGDOUBLE(register Bool *ip, register longdouble *op, register intp n,
             PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (longdouble)(*ip++ != FALSE);
    }
}


#line 731
static void
BOOL_to_CFLOAT(register Bool *ip, register float *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (float)*ip++;
        *op++ = 0.0;
    }

}

#line 731
static void
BOOL_to_CDOUBLE(register Bool *ip, register double *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (double)*ip++;
        *op++ = 0.0;
    }

}

#line 731
static void
BOOL_to_CLONGDOUBLE(register Bool *ip, register longdouble *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (longdouble)*ip++;
        *op++ = 0.0;
    }

}

#line 731
static void
BYTE_to_CFLOAT(register byte *ip, register float *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (float)*ip++;
        *op++ = 0.0;
    }

}

#line 731
static void
BYTE_to_CDOUBLE(register byte *ip, register double *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (double)*ip++;
        *op++ = 0.0;
    }

}

#line 731
static void
BYTE_to_CLONGDOUBLE(register byte *ip, register longdouble *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (longdouble)*ip++;
        *op++ = 0.0;
    }

}

#line 731
static void
UBYTE_to_CFLOAT(register ubyte *ip, register float *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (float)*ip++;
        *op++ = 0.0;
    }

}

#line 731
static void
UBYTE_to_CDOUBLE(register ubyte *ip, register double *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (double)*ip++;
        *op++ = 0.0;
    }

}

#line 731
static void
UBYTE_to_CLONGDOUBLE(register ubyte *ip, register longdouble *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (longdouble)*ip++;
        *op++ = 0.0;
    }

}

#line 731
static void
SHORT_to_CFLOAT(register short *ip, register float *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (float)*ip++;
        *op++ = 0.0;
    }

}

#line 731
static void
SHORT_to_CDOUBLE(register short *ip, register double *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (double)*ip++;
        *op++ = 0.0;
    }

}

#line 731
static void
SHORT_to_CLONGDOUBLE(register short *ip, register longdouble *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (longdouble)*ip++;
        *op++ = 0.0;
    }

}

#line 731
static void
USHORT_to_CFLOAT(register ushort *ip, register float *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (float)*ip++;
        *op++ = 0.0;
    }

}

#line 731
static void
USHORT_to_CDOUBLE(register ushort *ip, register double *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (double)*ip++;
        *op++ = 0.0;
    }

}

#line 731
static void
USHORT_to_CLONGDOUBLE(register ushort *ip, register longdouble *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (longdouble)*ip++;
        *op++ = 0.0;
    }

}

#line 731
static void
INT_to_CFLOAT(register int *ip, register float *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (float)*ip++;
        *op++ = 0.0;
    }

}

#line 731
static void
INT_to_CDOUBLE(register int *ip, register double *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (double)*ip++;
        *op++ = 0.0;
    }

}

#line 731
static void
INT_to_CLONGDOUBLE(register int *ip, register longdouble *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (longdouble)*ip++;
        *op++ = 0.0;
    }

}

#line 731
static void
UINT_to_CFLOAT(register uint *ip, register float *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (float)*ip++;
        *op++ = 0.0;
    }

}

#line 731
static void
UINT_to_CDOUBLE(register uint *ip, register double *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (double)*ip++;
        *op++ = 0.0;
    }

}

#line 731
static void
UINT_to_CLONGDOUBLE(register uint *ip, register longdouble *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (longdouble)*ip++;
        *op++ = 0.0;
    }

}

#line 731
static void
LONG_to_CFLOAT(register long *ip, register float *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (float)*ip++;
        *op++ = 0.0;
    }

}

#line 731
static void
LONG_to_CDOUBLE(register long *ip, register double *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (double)*ip++;
        *op++ = 0.0;
    }

}

#line 731
static void
LONG_to_CLONGDOUBLE(register long *ip, register longdouble *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (longdouble)*ip++;
        *op++ = 0.0;
    }

}

#line 731
static void
ULONG_to_CFLOAT(register ulong *ip, register float *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (float)*ip++;
        *op++ = 0.0;
    }

}

#line 731
static void
ULONG_to_CDOUBLE(register ulong *ip, register double *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (double)*ip++;
        *op++ = 0.0;
    }

}

#line 731
static void
ULONG_to_CLONGDOUBLE(register ulong *ip, register longdouble *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (longdouble)*ip++;
        *op++ = 0.0;
    }

}

#line 731
static void
LONGLONG_to_CFLOAT(register longlong *ip, register float *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (float)*ip++;
        *op++ = 0.0;
    }

}

#line 731
static void
LONGLONG_to_CDOUBLE(register longlong *ip, register double *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (double)*ip++;
        *op++ = 0.0;
    }

}

#line 731
static void
LONGLONG_to_CLONGDOUBLE(register longlong *ip, register longdouble *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (longdouble)*ip++;
        *op++ = 0.0;
    }

}

#line 731
static void
ULONGLONG_to_CFLOAT(register ulonglong *ip, register float *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (float)*ip++;
        *op++ = 0.0;
    }

}

#line 731
static void
ULONGLONG_to_CDOUBLE(register ulonglong *ip, register double *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (double)*ip++;
        *op++ = 0.0;
    }

}

#line 731
static void
ULONGLONG_to_CLONGDOUBLE(register ulonglong *ip, register longdouble *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (longdouble)*ip++;
        *op++ = 0.0;
    }

}

#line 731
static void
FLOAT_to_CFLOAT(register float *ip, register float *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (float)*ip++;
        *op++ = 0.0;
    }

}

#line 731
static void
FLOAT_to_CDOUBLE(register float *ip, register double *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (double)*ip++;
        *op++ = 0.0;
    }

}

#line 731
static void
FLOAT_to_CLONGDOUBLE(register float *ip, register longdouble *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (longdouble)*ip++;
        *op++ = 0.0;
    }

}

#line 731
static void
DOUBLE_to_CFLOAT(register double *ip, register float *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (float)*ip++;
        *op++ = 0.0;
    }

}

#line 731
static void
DOUBLE_to_CDOUBLE(register double *ip, register double *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (double)*ip++;
        *op++ = 0.0;
    }

}

#line 731
static void
DOUBLE_to_CLONGDOUBLE(register double *ip, register longdouble *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (longdouble)*ip++;
        *op++ = 0.0;
    }

}

#line 731
static void
LONGDOUBLE_to_CFLOAT(register longdouble *ip, register float *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (float)*ip++;
        *op++ = 0.0;
    }

}

#line 731
static void
LONGDOUBLE_to_CDOUBLE(register longdouble *ip, register double *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (double)*ip++;
        *op++ = 0.0;
    }

}

#line 731
static void
LONGDOUBLE_to_CLONGDOUBLE(register longdouble *ip, register longdouble *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    while (n--) {
        *op++ = (longdouble)*ip++;
        *op++ = 0.0;
    }

}


#line 750
static void
CFLOAT_to_CFLOAT(register float *ip, register float *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    n <<= 1;
    while (n--) {
        *op++ = (float)*ip++;
    }

}

#line 750
static void
CFLOAT_to_CDOUBLE(register float *ip, register double *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    n <<= 1;
    while (n--) {
        *op++ = (double)*ip++;
    }

}

#line 750
static void
CFLOAT_to_CLONGDOUBLE(register float *ip, register longdouble *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    n <<= 1;
    while (n--) {
        *op++ = (longdouble)*ip++;
    }

}

#line 750
static void
CDOUBLE_to_CFLOAT(register double *ip, register float *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    n <<= 1;
    while (n--) {
        *op++ = (float)*ip++;
    }

}

#line 750
static void
CDOUBLE_to_CDOUBLE(register double *ip, register double *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    n <<= 1;
    while (n--) {
        *op++ = (double)*ip++;
    }

}

#line 750
static void
CDOUBLE_to_CLONGDOUBLE(register double *ip, register longdouble *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    n <<= 1;
    while (n--) {
        *op++ = (longdouble)*ip++;
    }

}

#line 750
static void
CLONGDOUBLE_to_CFLOAT(register longdouble *ip, register float *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    n <<= 1;
    while (n--) {
        *op++ = (float)*ip++;
    }

}

#line 750
static void
CLONGDOUBLE_to_CDOUBLE(register longdouble *ip, register double *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    n <<= 1;
    while (n--) {
        *op++ = (double)*ip++;
    }

}

#line 750
static void
CLONGDOUBLE_to_CLONGDOUBLE(register longdouble *ip, register longdouble *op, register intp n,
               PyArrayObject *aip, PyArrayObject *aop)
{
    n <<= 1;
    while (n--) {
        *op++ = (longdouble)*ip++;
    }

}


#line 768
static void
BOOL_to_OBJECT(Bool *ip, PyObject **op, intp n, PyArrayObject *aip,
                 PyArrayObject *aop)
{
    register intp i;
    int skip=1;
    for(i=0;i<n;i++,ip+=skip,op++) {
        Py_XDECREF(*op);
        *op = BOOL_getitem((char *)ip, aip);
    }
}

#line 768
static void
BYTE_to_OBJECT(byte *ip, PyObject **op, intp n, PyArrayObject *aip,
                 PyArrayObject *aop)
{
    register intp i;
    int skip=1;
    for(i=0;i<n;i++,ip+=skip,op++) {
        Py_XDECREF(*op);
        *op = BYTE_getitem((char *)ip, aip);
    }
}

#line 768
static void
UBYTE_to_OBJECT(ubyte *ip, PyObject **op, intp n, PyArrayObject *aip,
                 PyArrayObject *aop)
{
    register intp i;
    int skip=1;
    for(i=0;i<n;i++,ip+=skip,op++) {
        Py_XDECREF(*op);
        *op = UBYTE_getitem((char *)ip, aip);
    }
}

#line 768
static void
SHORT_to_OBJECT(short *ip, PyObject **op, intp n, PyArrayObject *aip,
                 PyArrayObject *aop)
{
    register intp i;
    int skip=1;
    for(i=0;i<n;i++,ip+=skip,op++) {
        Py_XDECREF(*op);
        *op = SHORT_getitem((char *)ip, aip);
    }
}

#line 768
static void
USHORT_to_OBJECT(ushort *ip, PyObject **op, intp n, PyArrayObject *aip,
                 PyArrayObject *aop)
{
    register intp i;
    int skip=1;
    for(i=0;i<n;i++,ip+=skip,op++) {
        Py_XDECREF(*op);
        *op = USHORT_getitem((char *)ip, aip);
    }
}

#line 768
static void
INT_to_OBJECT(int *ip, PyObject **op, intp n, PyArrayObject *aip,
                 PyArrayObject *aop)
{
    register intp i;
    int skip=1;
    for(i=0;i<n;i++,ip+=skip,op++) {
        Py_XDECREF(*op);
        *op = INT_getitem((char *)ip, aip);
    }
}

#line 768
static void
UINT_to_OBJECT(uint *ip, PyObject **op, intp n, PyArrayObject *aip,
                 PyArrayObject *aop)
{
    register intp i;
    int skip=1;
    for(i=0;i<n;i++,ip+=skip,op++) {
        Py_XDECREF(*op);
        *op = UINT_getitem((char *)ip, aip);
    }
}

#line 768
static void
LONG_to_OBJECT(long *ip, PyObject **op, intp n, PyArrayObject *aip,
                 PyArrayObject *aop)
{
    register intp i;
    int skip=1;
    for(i=0;i<n;i++,ip+=skip,op++) {
        Py_XDECREF(*op);
        *op = LONG_getitem((char *)ip, aip);
    }
}

#line 768
static void
ULONG_to_OBJECT(ulong *ip, PyObject **op, intp n, PyArrayObject *aip,
                 PyArrayObject *aop)
{
    register intp i;
    int skip=1;
    for(i=0;i<n;i++,ip+=skip,op++) {
        Py_XDECREF(*op);
        *op = ULONG_getitem((char *)ip, aip);
    }
}

#line 768
static void
LONGLONG_to_OBJECT(longlong *ip, PyObject **op, intp n, PyArrayObject *aip,
                 PyArrayObject *aop)
{
    register intp i;
    int skip=1;
    for(i=0;i<n;i++,ip+=skip,op++) {
        Py_XDECREF(*op);
        *op = LONGLONG_getitem((char *)ip, aip);
    }
}

#line 768
static void
ULONGLONG_to_OBJECT(ulonglong *ip, PyObject **op, intp n, PyArrayObject *aip,
                 PyArrayObject *aop)
{
    register intp i;
    int skip=1;
    for(i=0;i<n;i++,ip+=skip,op++) {
        Py_XDECREF(*op);
        *op = ULONGLONG_getitem((char *)ip, aip);
    }
}

#line 768
static void
FLOAT_to_OBJECT(float *ip, PyObject **op, intp n, PyArrayObject *aip,
                 PyArrayObject *aop)
{
    register intp i;
    int skip=1;
    for(i=0;i<n;i++,ip+=skip,op++) {
        Py_XDECREF(*op);
        *op = FLOAT_getitem((char *)ip, aip);
    }
}

#line 768
static void
DOUBLE_to_OBJECT(double *ip, PyObject **op, intp n, PyArrayObject *aip,
                 PyArrayObject *aop)
{
    register intp i;
    int skip=1;
    for(i=0;i<n;i++,ip+=skip,op++) {
        Py_XDECREF(*op);
        *op = DOUBLE_getitem((char *)ip, aip);
    }
}

#line 768
static void
LONGDOUBLE_to_OBJECT(longdouble *ip, PyObject **op, intp n, PyArrayObject *aip,
                 PyArrayObject *aop)
{
    register intp i;
    int skip=1;
    for(i=0;i<n;i++,ip+=skip,op++) {
        Py_XDECREF(*op);
        *op = LONGDOUBLE_getitem((char *)ip, aip);
    }
}

#line 768
static void
CFLOAT_to_OBJECT(cfloat *ip, PyObject **op, intp n, PyArrayObject *aip,
                 PyArrayObject *aop)
{
    register intp i;
    int skip=1;
    for(i=0;i<n;i++,ip+=skip,op++) {
        Py_XDECREF(*op);
        *op = CFLOAT_getitem((char *)ip, aip);
    }
}

#line 768
static void
CDOUBLE_to_OBJECT(cdouble *ip, PyObject **op, intp n, PyArrayObject *aip,
                 PyArrayObject *aop)
{
    register intp i;
    int skip=1;
    for(i=0;i<n;i++,ip+=skip,op++) {
        Py_XDECREF(*op);
        *op = CDOUBLE_getitem((char *)ip, aip);
    }
}

#line 768
static void
CLONGDOUBLE_to_OBJECT(clongdouble *ip, PyObject **op, intp n, PyArrayObject *aip,
                 PyArrayObject *aop)
{
    register intp i;
    int skip=1;
    for(i=0;i<n;i++,ip+=skip,op++) {
        Py_XDECREF(*op);
        *op = CLONGDOUBLE_getitem((char *)ip, aip);
    }
}

#line 768
static void
STRING_to_OBJECT(char *ip, PyObject **op, intp n, PyArrayObject *aip,
                 PyArrayObject *aop)
{
    register intp i;
    int skip=aip->descr->elsize;
    for(i=0;i<n;i++,ip+=skip,op++) {
        Py_XDECREF(*op);
        *op = STRING_getitem((char *)ip, aip);
    }
}

#line 768
static void
UNICODE_to_OBJECT(char *ip, PyObject **op, intp n, PyArrayObject *aip,
                 PyArrayObject *aop)
{
    register intp i;
    int skip=aip->descr->elsize;
    for(i=0;i<n;i++,ip+=skip,op++) {
        Py_XDECREF(*op);
        *op = UNICODE_getitem((char *)ip, aip);
    }
}

#line 768
static void
VOID_to_OBJECT(char *ip, PyObject **op, intp n, PyArrayObject *aip,
                 PyArrayObject *aop)
{
    register intp i;
    int skip=aip->descr->elsize;
    for(i=0;i<n;i++,ip+=skip,op++) {
        Py_XDECREF(*op);
        *op = VOID_getitem((char *)ip, aip);
    }
}

#line 768
static void
OBJECT_to_OBJECT(PyObject * *ip, PyObject **op, intp n, PyArrayObject *aip,
                 PyArrayObject *aop)
{
    register intp i;
    int skip=1;
    for(i=0;i<n;i++,ip+=skip,op++) {
        Py_XDECREF(*op);
        *op = OBJECT_getitem((char *)ip, aip);
    }
}


#line 787
static void
OBJECT_to_BOOL(PyObject **ip, Bool *op, intp n, PyArrayObject *aip,
                 PyArrayObject *aop)
{
    register intp i;
    int skip=1;
    for(i=0;i<n;i++,ip++,op+=skip) {
        if (*ip == NULL) {
            BOOL_setitem(Py_False, (char *)op, aop);
        }
        else {
            BOOL_setitem(*ip, (char *)op, aop);
        }
    }
}

#line 787
static void
OBJECT_to_BYTE(PyObject **ip, byte *op, intp n, PyArrayObject *aip,
                 PyArrayObject *aop)
{
    register intp i;
    int skip=1;
    for(i=0;i<n;i++,ip++,op+=skip) {
        if (*ip == NULL) {
            BYTE_setitem(Py_False, (char *)op, aop);
        }
        else {
            BYTE_setitem(*ip, (char *)op, aop);
        }
    }
}

#line 787
static void
OBJECT_to_UBYTE(PyObject **ip, ubyte *op, intp n, PyArrayObject *aip,
                 PyArrayObject *aop)
{
    register intp i;
    int skip=1;
    for(i=0;i<n;i++,ip++,op+=skip) {
        if (*ip == NULL) {
            UBYTE_setitem(Py_False, (char *)op, aop);
        }
        else {
            UBYTE_setitem(*ip, (char *)op, aop);
        }
    }
}

#line 787
static void
OBJECT_to_SHORT(PyObject **ip, short *op, intp n, PyArrayObject *aip,
                 PyArrayObject *aop)
{
    register intp i;
    int skip=1;
    for(i=0;i<n;i++,ip++,op+=skip) {
        if (*ip == NULL) {
            SHORT_setitem(Py_False, (char *)op, aop);
        }
        else {
            SHORT_setitem(*ip, (char *)op, aop);
        }
    }
}

#line 787
static void
OBJECT_to_USHORT(PyObject **ip, ushort *op, intp n, PyArrayObject *aip,
                 PyArrayObject *aop)
{
    register intp i;
    int skip=1;
    for(i=0;i<n;i++,ip++,op+=skip) {
        if (*ip == NULL) {
            USHORT_setitem(Py_False, (char *)op, aop);
        }
        else {
            USHORT_setitem(*ip, (char *)op, aop);
        }
    }
}

#line 787
static void
OBJECT_to_INT(PyObject **ip, int *op, intp n, PyArrayObject *aip,
                 PyArrayObject *aop)
{
    register intp i;
    int skip=1;
    for(i=0;i<n;i++,ip++,op+=skip) {
        if (*ip == NULL) {
            INT_setitem(Py_False, (char *)op, aop);
        }
        else {
            INT_setitem(*ip, (char *)op, aop);
        }
    }
}

#line 787
static void
OBJECT_to_UINT(PyObject **ip, uint *op, intp n, PyArrayObject *aip,
                 PyArrayObject *aop)
{
    register intp i;
    int skip=1;
    for(i=0;i<n;i++,ip++,op+=skip) {
        if (*ip == NULL) {
            UINT_setitem(Py_False, (char *)op, aop);
        }
        else {
            UINT_setitem(*ip, (char *)op, aop);
        }
    }
}

#line 787
static void
OBJECT_to_LONG(PyObject **ip, long *op, intp n, PyArrayObject *aip,
                 PyArrayObject *aop)
{
    register intp i;
    int skip=1;
    for(i=0;i<n;i++,ip++,op+=skip) {
        if (*ip == NULL) {
            LONG_setitem(Py_False, (char *)op, aop);
        }
        else {
            LONG_setitem(*ip, (char *)op, aop);
        }
    }
}

#line 787
static void
OBJECT_to_ULONG(PyObject **ip, ulong *op, intp n, PyArrayObject *aip,
                 PyArrayObject *aop)
{
    register intp i;
    int skip=1;
    for(i=0;i<n;i++,ip++,op+=skip) {
        if (*ip == NULL) {
            ULONG_setitem(Py_False, (char *)op, aop);
        }
        else {
            ULONG_setitem(*ip, (char *)op, aop);
        }
    }
}

#line 787
static void
OBJECT_to_LONGLONG(PyObject **ip, longlong *op, intp n, PyArrayObject *aip,
                 PyArrayObject *aop)
{
    register intp i;
    int skip=1;
    for(i=0;i<n;i++,ip++,op+=skip) {
        if (*ip == NULL) {
            LONGLONG_setitem(Py_False, (char *)op, aop);
        }
        else {
            LONGLONG_setitem(*ip, (char *)op, aop);
        }
    }
}

#line 787
static void
OBJECT_to_ULONGLONG(PyObject **ip, ulonglong *op, intp n, PyArrayObject *aip,
                 PyArrayObject *aop)
{
    register intp i;
    int skip=1;
    for(i=0;i<n;i++,ip++,op+=skip) {
        if (*ip == NULL) {
            ULONGLONG_setitem(Py_False, (char *)op, aop);
        }
        else {
            ULONGLONG_setitem(*ip, (char *)op, aop);
        }
    }
}

#line 787
static void
OBJECT_to_FLOAT(PyObject **ip, float *op, intp n, PyArrayObject *aip,
                 PyArrayObject *aop)
{
    register intp i;
    int skip=1;
    for(i=0;i<n;i++,ip++,op+=skip) {
        if (*ip == NULL) {
            FLOAT_setitem(Py_False, (char *)op, aop);
        }
        else {
            FLOAT_setitem(*ip, (char *)op, aop);
        }
    }
}

#line 787
static void
OBJECT_to_DOUBLE(PyObject **ip, double *op, intp n, PyArrayObject *aip,
                 PyArrayObject *aop)
{
    register intp i;
    int skip=1;
    for(i=0;i<n;i++,ip++,op+=skip) {
        if (*ip == NULL) {
            DOUBLE_setitem(Py_False, (char *)op, aop);
        }
        else {
            DOUBLE_setitem(*ip, (char *)op, aop);
        }
    }
}

#line 787
static void
OBJECT_to_LONGDOUBLE(PyObject **ip, longdouble *op, intp n, PyArrayObject *aip,
                 PyArrayObject *aop)
{
    register intp i;
    int skip=1;
    for(i=0;i<n;i++,ip++,op+=skip) {
        if (*ip == NULL) {
            LONGDOUBLE_setitem(Py_False, (char *)op, aop);
        }
        else {
            LONGDOUBLE_setitem(*ip, (char *)op, aop);
        }
    }
}

#line 787
static void
OBJECT_to_CFLOAT(PyObject **ip, cfloat *op, intp n, PyArrayObject *aip,
                 PyArrayObject *aop)
{
    register intp i;
    int skip=1;
    for(i=0;i<n;i++,ip++,op+=skip) {
        if (*ip == NULL) {
            CFLOAT_setitem(Py_False, (char *)op, aop);
        }
        else {
            CFLOAT_setitem(*ip, (char *)op, aop);
        }
    }
}

#line 787
static void
OBJECT_to_CDOUBLE(PyObject **ip, cdouble *op, intp n, PyArrayObject *aip,
                 PyArrayObject *aop)
{
    register intp i;
    int skip=1;
    for(i=0;i<n;i++,ip++,op+=skip) {
        if (*ip == NULL) {
            CDOUBLE_setitem(Py_False, (char *)op, aop);
        }
        else {
            CDOUBLE_setitem(*ip, (char *)op, aop);
        }
    }
}

#line 787
static void
OBJECT_to_CLONGDOUBLE(PyObject **ip, clongdouble *op, intp n, PyArrayObject *aip,
                 PyArrayObject *aop)
{
    register intp i;
    int skip=1;
    for(i=0;i<n;i++,ip++,op+=skip) {
        if (*ip == NULL) {
            CLONGDOUBLE_setitem(Py_False, (char *)op, aop);
        }
        else {
            CLONGDOUBLE_setitem(*ip, (char *)op, aop);
        }
    }
}

#line 787
static void
OBJECT_to_STRING(PyObject **ip, char *op, intp n, PyArrayObject *aip,
                 PyArrayObject *aop)
{
    register intp i;
    int skip=aip->descr->elsize;
    for(i=0;i<n;i++,ip++,op+=skip) {
        if (*ip == NULL) {
            STRING_setitem(Py_False, (char *)op, aop);
        }
        else {
            STRING_setitem(*ip, (char *)op, aop);
        }
    }
}

#line 787
static void
OBJECT_to_UNICODE(PyObject **ip, char *op, intp n, PyArrayObject *aip,
                 PyArrayObject *aop)
{
    register intp i;
    int skip=aip->descr->elsize;
    for(i=0;i<n;i++,ip++,op+=skip) {
        if (*ip == NULL) {
            UNICODE_setitem(Py_False, (char *)op, aop);
        }
        else {
            UNICODE_setitem(*ip, (char *)op, aop);
        }
    }
}

#line 787
static void
OBJECT_to_VOID(PyObject **ip, char *op, intp n, PyArrayObject *aip,
                 PyArrayObject *aop)
{
    register intp i;
    int skip=aip->descr->elsize;
    for(i=0;i<n;i++,ip++,op+=skip) {
        if (*ip == NULL) {
            VOID_setitem(Py_False, (char *)op, aop);
        }
        else {
            VOID_setitem(*ip, (char *)op, aop);
        }
    }
}



#line 815
static void
STRING_to_BOOL(char *ip, Bool *op, intp n, PyArrayObject *aip,
             PyArrayObject *aop)
{
    register intp i;
    PyObject *temp=NULL;
    int skip=aip->descr->elsize;
    int oskip=1;
    for(i=0; i<n; i++, ip+=skip, op+=oskip) {
        temp = STRING_getitem((char *)ip, aip);
        if (temp==NULL) return;
        /* convert from Python object to needed one */
        if (1) {
            PyObject *new, *args;
            /* call out to the Python builtin given by convstr */
            args = Py_BuildValue("(N)", temp);
            new = PyInt_Type.tp_new(&PyInt_Type, args, NULL);
            Py_DECREF(args);
            temp = new;
            if (temp==NULL) return;
        }

        BOOL_setitem(temp,(char *)op, aop);
        Py_DECREF(temp);
    }
}


#line 815
static void
STRING_to_BYTE(char *ip, byte *op, intp n, PyArrayObject *aip,
             PyArrayObject *aop)
{
    register intp i;
    PyObject *temp=NULL;
    int skip=aip->descr->elsize;
    int oskip=1;
    for(i=0; i<n; i++, ip+=skip, op+=oskip) {
        temp = STRING_getitem((char *)ip, aip);
        if (temp==NULL) return;
        /* convert from Python object to needed one */
        if (1) {
            PyObject *new, *args;
            /* call out to the Python builtin given by convstr */
            args = Py_BuildValue("(N)", temp);
            new = PyInt_Type.tp_new(&PyInt_Type, args, NULL);
            Py_DECREF(args);
            temp = new;
            if (temp==NULL) return;
        }

        BYTE_setitem(temp,(char *)op, aop);
        Py_DECREF(temp);
    }
}


#line 815
static void
STRING_to_UBYTE(char *ip, ubyte *op, intp n, PyArrayObject *aip,
             PyArrayObject *aop)
{
    register intp i;
    PyObject *temp=NULL;
    int skip=aip->descr->elsize;
    int oskip=1;
    for(i=0; i<n; i++, ip+=skip, op+=oskip) {
        temp = STRING_getitem((char *)ip, aip);
        if (temp==NULL) return;
        /* convert from Python object to needed one */
        if (1) {
            PyObject *new, *args;
            /* call out to the Python builtin given by convstr */
            args = Py_BuildValue("(N)", temp);
            new = PyInt_Type.tp_new(&PyInt_Type, args, NULL);
            Py_DECREF(args);
            temp = new;
            if (temp==NULL) return;
        }

        UBYTE_setitem(temp,(char *)op, aop);
        Py_DECREF(temp);
    }
}


#line 815
static void
STRING_to_SHORT(char *ip, short *op, intp n, PyArrayObject *aip,
             PyArrayObject *aop)
{
    register intp i;
    PyObject *temp=NULL;
    int skip=aip->descr->elsize;
    int oskip=1;
    for(i=0; i<n; i++, ip+=skip, op+=oskip) {
        temp = STRING_getitem((char *)ip, aip);
        if (temp==NULL) return;
        /* convert from Python object to needed one */
        if (1) {
            PyObject *new, *args;
            /* call out to the Python builtin given by convstr */
            args = Py_BuildValue("(N)", temp);
            new = PyInt_Type.tp_new(&PyInt_Type, args, NULL);
            Py_DECREF(args);
            temp = new;
            if (temp==NULL) return;
        }

        SHORT_setitem(temp,(char *)op, aop);
        Py_DECREF(temp);
    }
}


#line 815
static void
STRING_to_USHORT(char *ip, ushort *op, intp n, PyArrayObject *aip,
             PyArrayObject *aop)
{
    register intp i;
    PyObject *temp=NULL;
    int skip=aip->descr->elsize;
    int oskip=1;
    for(i=0; i<n; i++, ip+=skip, op+=oskip) {
        temp = STRING_getitem((char *)ip, aip);
        if (temp==NULL) return;
        /* convert from Python object to needed one */
        if (1) {
            PyObject *new, *args;
            /* call out to the Python builtin given by convstr */
            args = Py_BuildValue("(N)", temp);
            new = PyInt_Type.tp_new(&PyInt_Type, args, NULL);
            Py_DECREF(args);
            temp = new;
            if (temp==NULL) return;
        }

        USHORT_setitem(temp,(char *)op, aop);
        Py_DECREF(temp);
    }
}


#line 815
static void
STRING_to_INT(char *ip, int *op, intp n, PyArrayObject *aip,
             PyArrayObject *aop)
{
    register intp i;
    PyObject *temp=NULL;
    int skip=aip->descr->elsize;
    int oskip=1;
    for(i=0; i<n; i++, ip+=skip, op+=oskip) {
        temp = STRING_getitem((char *)ip, aip);
        if (temp==NULL) return;
        /* convert from Python object to needed one */
        if (1) {
            PyObject *new, *args;
            /* call out to the Python builtin given by convstr */
            args = Py_BuildValue("(N)", temp);
            new = PyInt_Type.tp_new(&PyInt_Type, args, NULL);
            Py_DECREF(args);
            temp = new;
            if (temp==NULL) return;
        }

        INT_setitem(temp,(char *)op, aop);
        Py_DECREF(temp);
    }
}


#line 815
static void
STRING_to_UINT(char *ip, uint *op, intp n, PyArrayObject *aip,
             PyArrayObject *aop)
{
    register intp i;
    PyObject *temp=NULL;
    int skip=aip->descr->elsize;
    int oskip=1;
    for(i=0; i<n; i++, ip+=skip, op+=oskip) {
        temp = STRING_getitem((char *)ip, aip);
        if (temp==NULL) return;
        /* convert from Python object to needed one */
        if (1) {
            PyObject *new, *args;
            /* call out to the Python builtin given by convstr */
            args = Py_BuildValue("(N)", temp);
            new = PyInt_Type.tp_new(&PyInt_Type, args, NULL);
            Py_DECREF(args);
            temp = new;
            if (temp==NULL) return;
        }

        UINT_setitem(temp,(char *)op, aop);
        Py_DECREF(temp);
    }
}


#line 815
static void
STRING_to_LONG(char *ip, long *op, intp n, PyArrayObject *aip,
             PyArrayObject *aop)
{
    register intp i;
    PyObject *temp=NULL;
    int skip=aip->descr->elsize;
    int oskip=1;
    for(i=0; i<n; i++, ip+=skip, op+=oskip) {
        temp = STRING_getitem((char *)ip, aip);
        if (temp==NULL) return;
        /* convert from Python object to needed one */
        if (1) {
            PyObject *new, *args;
            /* call out to the Python builtin given by convstr */
            args = Py_BuildValue("(N)", temp);
            new = PyInt_Type.tp_new(&PyInt_Type, args, NULL);
            Py_DECREF(args);
            temp = new;
            if (temp==NULL) return;
        }

        LONG_setitem(temp,(char *)op, aop);
        Py_DECREF(temp);
    }
}


#line 815
static void
STRING_to_ULONG(char *ip, ulong *op, intp n, PyArrayObject *aip,
             PyArrayObject *aop)
{
    register intp i;
    PyObject *temp=NULL;
    int skip=aip->descr->elsize;
    int oskip=1;
    for(i=0; i<n; i++, ip+=skip, op+=oskip) {
        temp = STRING_getitem((char *)ip, aip);
        if (temp==NULL) return;
        /* convert from Python object to needed one */
        if (1) {
            PyObject *new, *args;
            /* call out to the Python builtin given by convstr */
            args = Py_BuildValue("(N)", temp);
            new = PyInt_Type.tp_new(&PyInt_Type, args, NULL);
            Py_DECREF(args);
            temp = new;
            if (temp==NULL) return;
        }

        ULONG_setitem(temp,(char *)op, aop);
        Py_DECREF(temp);
    }
}


#line 815
static void
STRING_to_LONGLONG(char *ip, longlong *op, intp n, PyArrayObject *aip,
             PyArrayObject *aop)
{
    register intp i;
    PyObject *temp=NULL;
    int skip=aip->descr->elsize;
    int oskip=1;
    for(i=0; i<n; i++, ip+=skip, op+=oskip) {
        temp = STRING_getitem((char *)ip, aip);
        if (temp==NULL) return;
        /* convert from Python object to needed one */
        if (1) {
            PyObject *new, *args;
            /* call out to the Python builtin given by convstr */
            args = Py_BuildValue("(N)", temp);
            new = PyLong_Type.tp_new(&PyLong_Type, args, NULL);
            Py_DECREF(args);
            temp = new;
            if (temp==NULL) return;
        }

        LONGLONG_setitem(temp,(char *)op, aop);
        Py_DECREF(temp);
    }
}


#line 815
static void
STRING_to_ULONGLONG(char *ip, ulonglong *op, intp n, PyArrayObject *aip,
             PyArrayObject *aop)
{
    register intp i;
    PyObject *temp=NULL;
    int skip=aip->descr->elsize;
    int oskip=1;
    for(i=0; i<n; i++, ip+=skip, op+=oskip) {
        temp = STRING_getitem((char *)ip, aip);
        if (temp==NULL) return;
        /* convert from Python object to needed one */
        if (1) {
            PyObject *new, *args;
            /* call out to the Python builtin given by convstr */
            args = Py_BuildValue("(N)", temp);
            new = PyLong_Type.tp_new(&PyLong_Type, args, NULL);
            Py_DECREF(args);
            temp = new;
            if (temp==NULL) return;
        }

        ULONGLONG_setitem(temp,(char *)op, aop);
        Py_DECREF(temp);
    }
}


#line 815
static void
STRING_to_FLOAT(char *ip, float *op, intp n, PyArrayObject *aip,
             PyArrayObject *aop)
{
    register intp i;
    PyObject *temp=NULL;
    int skip=aip->descr->elsize;
    int oskip=1;
    for(i=0; i<n; i++, ip+=skip, op+=oskip) {
        temp = STRING_getitem((char *)ip, aip);
        if (temp==NULL) return;
        /* convert from Python object to needed one */
        if (1) {
            PyObject *new, *args;
            /* call out to the Python builtin given by convstr */
            args = Py_BuildValue("(N)", temp);
            new = PyFloat_Type.tp_new(&PyFloat_Type, args, NULL);
            Py_DECREF(args);
            temp = new;
            if (temp==NULL) return;
        }

        FLOAT_setitem(temp,(char *)op, aop);
        Py_DECREF(temp);
    }
}


#line 815
static void
STRING_to_DOUBLE(char *ip, double *op, intp n, PyArrayObject *aip,
             PyArrayObject *aop)
{
    register intp i;
    PyObject *temp=NULL;
    int skip=aip->descr->elsize;
    int oskip=1;
    for(i=0; i<n; i++, ip+=skip, op+=oskip) {
        temp = STRING_getitem((char *)ip, aip);
        if (temp==NULL) return;
        /* convert from Python object to needed one */
        if (1) {
            PyObject *new, *args;
            /* call out to the Python builtin given by convstr */
            args = Py_BuildValue("(N)", temp);
            new = PyFloat_Type.tp_new(&PyFloat_Type, args, NULL);
            Py_DECREF(args);
            temp = new;
            if (temp==NULL) return;
        }

        DOUBLE_setitem(temp,(char *)op, aop);
        Py_DECREF(temp);
    }
}


#line 815
static void
STRING_to_LONGDOUBLE(char *ip, longdouble *op, intp n, PyArrayObject *aip,
             PyArrayObject *aop)
{
    register intp i;
    PyObject *temp=NULL;
    int skip=aip->descr->elsize;
    int oskip=1;
    for(i=0; i<n; i++, ip+=skip, op+=oskip) {
        temp = STRING_getitem((char *)ip, aip);
        if (temp==NULL) return;
        /* convert from Python object to needed one */
        if (1) {
            PyObject *new, *args;
            /* call out to the Python builtin given by convstr */
            args = Py_BuildValue("(N)", temp);
            new = PyFloat_Type.tp_new(&PyFloat_Type, args, NULL);
            Py_DECREF(args);
            temp = new;
            if (temp==NULL) return;
        }

        LONGDOUBLE_setitem(temp,(char *)op, aop);
        Py_DECREF(temp);
    }
}


#line 815
static void
STRING_to_CFLOAT(char *ip, cfloat *op, intp n, PyArrayObject *aip,
             PyArrayObject *aop)
{
    register intp i;
    PyObject *temp=NULL;
    int skip=aip->descr->elsize;
    int oskip=1;
    for(i=0; i<n; i++, ip+=skip, op+=oskip) {
        temp = STRING_getitem((char *)ip, aip);
        if (temp==NULL) return;
        /* convert from Python object to needed one */
        if (1) {
            PyObject *new, *args;
            /* call out to the Python builtin given by convstr */
            args = Py_BuildValue("(N)", temp);
            new = PyComplex_Type.tp_new(&PyComplex_Type, args, NULL);
            Py_DECREF(args);
            temp = new;
            if (temp==NULL) return;
        }

        CFLOAT_setitem(temp,(char *)op, aop);
        Py_DECREF(temp);
    }
}


#line 815
static void
STRING_to_CDOUBLE(char *ip, cdouble *op, intp n, PyArrayObject *aip,
             PyArrayObject *aop)
{
    register intp i;
    PyObject *temp=NULL;
    int skip=aip->descr->elsize;
    int oskip=1;
    for(i=0; i<n; i++, ip+=skip, op+=oskip) {
        temp = STRING_getitem((char *)ip, aip);
        if (temp==NULL) return;
        /* convert from Python object to needed one */
        if (1) {
            PyObject *new, *args;
            /* call out to the Python builtin given by convstr */
            args = Py_BuildValue("(N)", temp);
            new = PyComplex_Type.tp_new(&PyComplex_Type, args, NULL);
            Py_DECREF(args);
            temp = new;
            if (temp==NULL) return;
        }

        CDOUBLE_setitem(temp,(char *)op, aop);
        Py_DECREF(temp);
    }
}


#line 815
static void
STRING_to_CLONGDOUBLE(char *ip, clongdouble *op, intp n, PyArrayObject *aip,
             PyArrayObject *aop)
{
    register intp i;
    PyObject *temp=NULL;
    int skip=aip->descr->elsize;
    int oskip=1;
    for(i=0; i<n; i++, ip+=skip, op+=oskip) {
        temp = STRING_getitem((char *)ip, aip);
        if (temp==NULL) return;
        /* convert from Python object to needed one */
        if (1) {
            PyObject *new, *args;
            /* call out to the Python builtin given by convstr */
            args = Py_BuildValue("(N)", temp);
            new = PyComplex_Type.tp_new(&PyComplex_Type, args, NULL);
            Py_DECREF(args);
            temp = new;
            if (temp==NULL) return;
        }

        CLONGDOUBLE_setitem(temp,(char *)op, aop);
        Py_DECREF(temp);
    }
}


#line 815
static void
STRING_to_STRING(char *ip, char *op, intp n, PyArrayObject *aip,
             PyArrayObject *aop)
{
    register intp i;
    PyObject *temp=NULL;
    int skip=aip->descr->elsize;
    int oskip=aop->descr->elsize;
    for(i=0; i<n; i++, ip+=skip, op+=oskip) {
        temp = STRING_getitem((char *)ip, aip);
        if (temp==NULL) return;
        /* convert from Python object to needed one */
        if (0) {
            PyObject *new, *args;
            /* call out to the Python builtin given by convstr */
            args = Py_BuildValue("(N)", temp);
            new = PyTuple_Type.tp_new(&PyTuple_Type, args, NULL);
            Py_DECREF(args);
            temp = new;
            if (temp==NULL) return;
        }

        STRING_setitem(temp,(char *)op, aop);
        Py_DECREF(temp);
    }
}


#line 815
static void
STRING_to_UNICODE(char *ip, char *op, intp n, PyArrayObject *aip,
             PyArrayObject *aop)
{
    register intp i;
    PyObject *temp=NULL;
    int skip=aip->descr->elsize;
    int oskip=aop->descr->elsize;
    for(i=0; i<n; i++, ip+=skip, op+=oskip) {
        temp = STRING_getitem((char *)ip, aip);
        if (temp==NULL) return;
        /* convert from Python object to needed one */
        if (0) {
            PyObject *new, *args;
            /* call out to the Python builtin given by convstr */
            args = Py_BuildValue("(N)", temp);
            new = PyTuple_Type.tp_new(&PyTuple_Type, args, NULL);
            Py_DECREF(args);
            temp = new;
            if (temp==NULL) return;
        }

        UNICODE_setitem(temp,(char *)op, aop);
        Py_DECREF(temp);
    }
}


#line 815
static void
STRING_to_VOID(char *ip, char *op, intp n, PyArrayObject *aip,
             PyArrayObject *aop)
{
    register intp i;
    PyObject *temp=NULL;
    int skip=aip->descr->elsize;
    int oskip=aop->descr->elsize;
    for(i=0; i<n; i++, ip+=skip, op+=oskip) {
        temp = STRING_getitem((char *)ip, aip);
        if (temp==NULL) return;
        /* convert from Python object to needed one */
        if (0) {
            PyObject *new, *args;
            /* call out to the Python builtin given by convstr */
            args = Py_BuildValue("(N)", temp);
            new = PyTuple_Type.tp_new(&PyTuple_Type, args, NULL);
            Py_DECREF(args);
            temp = new;
            if (temp==NULL) return;
        }

        VOID_setitem(temp,(char *)op, aop);
        Py_DECREF(temp);
    }
}


#line 815
static void
UNICODE_to_BOOL(char *ip, Bool *op, intp n, PyArrayObject *aip,
             PyArrayObject *aop)
{
    register intp i;
    PyObject *temp=NULL;
    int skip=aip->descr->elsize;
    int oskip=1;
    for(i=0; i<n; i++, ip+=skip, op+=oskip) {
        temp = UNICODE_getitem((char *)ip, aip);
        if (temp==NULL) return;
        /* convert from Python object to needed one */
        if (1) {
            PyObject *new, *args;
            /* call out to the Python builtin given by convstr */
            args = Py_BuildValue("(N)", temp);
            new = PyInt_Type.tp_new(&PyInt_Type, args, NULL);
            Py_DECREF(args);
            temp = new;
            if (temp==NULL) return;
        }

        BOOL_setitem(temp,(char *)op, aop);
        Py_DECREF(temp);
    }
}


#line 815
static void
UNICODE_to_BYTE(char *ip, byte *op, intp n, PyArrayObject *aip,
             PyArrayObject *aop)
{
    register intp i;
    PyObject *temp=NULL;
    int skip=aip->descr->elsize;
    int oskip=1;
    for(i=0; i<n; i++, ip+=skip, op+=oskip) {
        temp = UNICODE_getitem((char *)ip, aip);
        if (temp==NULL) return;
        /* convert from Python object to needed one */
        if (1) {
            PyObject *new, *args;
            /* call out to the Python builtin given by convstr */
            args = Py_BuildValue("(N)", temp);
            new = PyInt_Type.tp_new(&PyInt_Type, args, NULL);
            Py_DECREF(args);
            temp = new;
            if (temp==NULL) return;
        }

        BYTE_setitem(temp,(char *)op, aop);
        Py_DECREF(temp);
    }
}


#line 815
static void
UNICODE_to_UBYTE(char *ip, ubyte *op, intp n, PyArrayObject *aip,
             PyArrayObject *aop)
{
    register intp i;
    PyObject *temp=NULL;
    int skip=aip->descr->elsize;
    int oskip=1;
    for(i=0; i<n; i++, ip+=skip, op+=oskip) {
        temp = UNICODE_getitem((char *)ip, aip);
        if (temp==NULL) return;
        /* convert from Python object to needed one */
        if (1) {
            PyObject *new, *args;
            /* call out to the Python builtin given by convstr */
            args = Py_BuildValue("(N)", temp);
            new = PyInt_Type.tp_new(&PyInt_Type, args, NULL);
            Py_DECREF(args);
            temp = new;
            if (temp==NULL) return;
        }

        UBYTE_setitem(temp,(char *)op, aop);
        Py_DECREF(temp);
    }
}


#line 815
static void
UNICODE_to_SHORT(char *ip, short *op, intp n, PyArrayObject *aip,
             PyArrayObject *aop)
{
    register intp i;
    PyObject *temp=NULL;
    int skip=aip->descr->elsize;
    int oskip=1;
    for(i=0; i<n; i++, ip+=skip, op+=oskip) {
        temp = UNICODE_getitem((char *)ip, aip);
        if (temp==NULL) return;
        /* convert from Python object to needed one */
        if (1) {
            PyObject *new, *args;
            /* call out to the Python builtin given by convstr */
            args = Py_BuildValue("(N)", temp);
            new = PyInt_Type.tp_new(&PyInt_Type, args, NULL);
            Py_DECREF(args);
            temp = new;
            if (temp==NULL) return;
        }

        SHORT_setitem(temp,(char *)op, aop);
        Py_DECREF(temp);
    }
}


#line 815
static void
UNICODE_to_USHORT(char *ip, ushort *op, intp n, PyArrayObject *aip,
             PyArrayObject *aop)
{
    register intp i;
    PyObject *temp=NULL;
    int skip=aip->descr->elsize;
    int oskip=1;
    for(i=0; i<n; i++, ip+=skip, op+=oskip) {
        temp = UNICODE_getitem((char *)ip, aip);
        if (temp==NULL) return;
        /* convert from Python object to needed one */
        if (1) {
            PyObject *new, *args;
            /* call out to the Python builtin given by convstr */
            args = Py_BuildValue("(N)", temp);
            new = PyInt_Type.tp_new(&PyInt_Type, args, NULL);
            Py_DECREF(args);
            temp = new;
            if (temp==NULL) return;
        }

        USHORT_setitem(temp,(char *)op, aop);
        Py_DECREF(temp);
    }
}


#line 815
static void
UNICODE_to_INT(char *ip, int *op, intp n, PyArrayObject *aip,
             PyArrayObject *aop)
{
    register intp i;
    PyObject *temp=NULL;
    int skip=aip->descr->elsize;
    int oskip=1;
    for(i=0; i<n; i++, ip+=skip, op+=oskip) {
        temp = UNICODE_getitem((char *)ip, aip);
        if (temp==NULL) return;
        /* convert from Python object to needed one */
        if (1) {
            PyObject *new, *args;
            /* call out to the Python builtin given by convstr */
            args = Py_BuildValue("(N)", temp);
            new = PyInt_Type.tp_new(&PyInt_Type, args, NULL);
            Py_DECREF(args);
            temp = new;
            if (temp==NULL) return;
        }

        INT_setitem(temp,(char *)op, aop);
        Py_DECREF(temp);
    }
}


#line 815
static void
UNICODE_to_UINT(char *ip, uint *op, intp n, PyArrayObject *aip,
             PyArrayObject *aop)
{
    register intp i;
    PyObject *temp=NULL;
    int skip=aip->descr->elsize;
    int oskip=1;
    for(i=0; i<n; i++, ip+=skip, op+=oskip) {
        temp = UNICODE_getitem((char *)ip, aip);
        if (temp==NULL) return;
        /* convert from Python object to needed one */
        if (1) {
            PyObject *new, *args;
            /* call out to the Python builtin given by convstr */
            args = Py_BuildValue("(N)", temp);
            new = PyInt_Type.tp_new(&PyInt_Type, args, NULL);
            Py_DECREF(args);
            temp = new;
            if (temp==NULL) return;
        }

        UINT_setitem(temp,(char *)op, aop);
        Py_DECREF(temp);
    }
}


#line 815
static void
UNICODE_to_LONG(char *ip, long *op, intp n, PyArrayObject *aip,
             PyArrayObject *aop)
{
    register intp i;
    PyObject *temp=NULL;
    int skip=aip->descr->elsize;
    int oskip=1;
    for(i=0; i<n; i++, ip+=skip, op+=oskip) {
        temp = UNICODE_getitem((char *)ip, aip);
        if (temp==NULL) return;
        /* convert from Python object to needed one */
        if (1) {
            PyObject *new, *args;
            /* call out to the Python builtin given by convstr */
            args = Py_BuildValue("(N)", temp);
            new = PyInt_Type.tp_new(&PyInt_Type, args, NULL);
            Py_DECREF(args);
            temp = new;
            if (temp==NULL) return;
        }

        LONG_setitem(temp,(char *)op, aop);
        Py_DECREF(temp);
    }
}


#line 815
static void
UNICODE_to_ULONG(char *ip, ulong *op, intp n, PyArrayObject *aip,
             PyArrayObject *aop)
{
    register intp i;
    PyObject *temp=NULL;
    int skip=aip->descr->elsize;
    int oskip=1;
    for(i=0; i<n; i++, ip+=skip, op+=oskip) {
        temp = UNICODE_getitem((char *)ip, aip);
        if (temp==NULL) return;
        /* convert from Python object to needed one */
        if (1) {
            PyObject *new, *args;
            /* call out to the Python builtin given by convstr */
            args = Py_BuildValue("(N)", temp);
            new = PyInt_Type.tp_new(&PyInt_Type, args, NULL);
            Py_DECREF(args);
            temp = new;
            if (temp==NULL) return;
        }

        ULONG_setitem(temp,(char *)op, aop);
        Py_DECREF(temp);
    }
}


#line 815
static void
UNICODE_to_LONGLONG(char *ip, longlong *op, intp n, PyArrayObject *aip,
             PyArrayObject *aop)
{
    register intp i;
    PyObject *temp=NULL;
    int skip=aip->descr->elsize;
    int oskip=1;
    for(i=0; i<n; i++, ip+=skip, op+=oskip) {
        temp = UNICODE_getitem((char *)ip, aip);
        if (temp==NULL) return;
        /* convert from Python object to needed one */
        if (1) {
            PyObject *new, *args;
            /* call out to the Python builtin given by convstr */
            args = Py_BuildValue("(N)", temp);
            new = PyLong_Type.tp_new(&PyLong_Type, args, NULL);
            Py_DECREF(args);
            temp = new;
            if (temp==NULL) return;
        }

        LONGLONG_setitem(temp,(char *)op, aop);
        Py_DECREF(temp);
    }
}


#line 815
static void
UNICODE_to_ULONGLONG(char *ip, ulonglong *op, intp n, PyArrayObject *aip,
             PyArrayObject *aop)
{
    register intp i;
    PyObject *temp=NULL;
    int skip=aip->descr->elsize;
    int oskip=1;
    for(i=0; i<n; i++, ip+=skip, op+=oskip) {
        temp = UNICODE_getitem((char *)ip, aip);
        if (temp==NULL) return;
        /* convert from Python object to needed one */
        if (1) {
            PyObject *new, *args;
            /* call out to the Python builtin given by convstr */
            args = Py_BuildValue("(N)", temp);
            new = PyLong_Type.tp_new(&PyLong_Type, args, NULL);
            Py_DECREF(args);
            temp = new;
            if (temp==NULL) return;
        }

        ULONGLONG_setitem(temp,(char *)op, aop);
        Py_DECREF(temp);
    }
}


#line 815
static void
UNICODE_to_FLOAT(char *ip, float *op, intp n, PyArrayObject *aip,
             PyArrayObject *aop)
{
    register intp i;
    PyObject *temp=NULL;
    int skip=aip->descr->elsize;
    int oskip=1;
    for(i=0; i<n; i++, ip+=skip, op+=oskip) {
        temp = UNICODE_getitem((char *)ip, aip);
        if (temp==NULL) return;
        /* convert from Python object to needed one */
        if (1) {
            PyObject *new, *args;
            /* call out to the Python builtin given by convstr */
            args = Py_BuildValue("(N)", temp);
            new = PyFloat_Type.tp_new(&PyFloat_Type, args, NULL);
            Py_DECREF(args);
            temp = new;
            if (temp==NULL) return;
        }

        FLOAT_setitem(temp,(char *)op, aop);
        Py_DECREF(temp);
    }
}


#line 815
static void
UNICODE_to_DOUBLE(char *ip, double *op, intp n, PyArrayObject *aip,
             PyArrayObject *aop)
{
    register intp i;
    PyObject *temp=NULL;
    int skip=aip->descr->elsize;
    int oskip=1;
    for(i=0; i<n; i++, ip+=skip, op+=oskip) {
        temp = UNICODE_getitem((char *)ip, aip);
        if (temp==NULL) return;
        /* convert from Python object to needed one */
        if (1) {
            PyObject *new, *args;
            /* call out to the Python builtin given by convstr */
            args = Py_BuildValue("(N)", temp);
            new = PyFloat_Type.tp_new(&PyFloat_Type, args, NULL);
            Py_DECREF(args);
            temp = new;
            if (temp==NULL) return;
        }

        DOUBLE_setitem(temp,(char *)op, aop);
        Py_DECREF(temp);
    }
}


#line 815
static void
UNICODE_to_LONGDOUBLE(char *ip, longdouble *op, intp n, PyArrayObject *aip,
             PyArrayObject *aop)
{
    register intp i;
    PyObject *temp=NULL;
    int skip=aip->descr->elsize;
    int oskip=1;
    for(i=0; i<n; i++, ip+=skip, op+=oskip) {
        temp = UNICODE_getitem((char *)ip, aip);
        if (temp==NULL) return;
        /* convert from Python object to needed one */
        if (1) {
            PyObject *new, *args;
            /* call out to the Python builtin given by convstr */
            args = Py_BuildValue("(N)", temp);
            new = PyFloat_Type.tp_new(&PyFloat_Type, args, NULL);
            Py_DECREF(args);
            temp = new;
            if (temp==NULL) return;
        }

        LONGDOUBLE_setitem(temp,(char *)op, aop);
        Py_DECREF(temp);
    }
}


#line 815
static void
UNICODE_to_CFLOAT(char *ip, cfloat *op, intp n, PyArrayObject *aip,
             PyArrayObject *aop)
{
    register intp i;
    PyObject *temp=NULL;
    int skip=aip->descr->elsize;
    int oskip=1;
    for(i=0; i<n; i++, ip+=skip, op+=oskip) {
        temp = UNICODE_getitem((char *)ip, aip);
        if (temp==NULL) return;
        /* convert from Python object to needed one */
        if (1) {
            PyObject *new, *args;
            /* call out to the Python builtin given by convstr */
            args = Py_BuildValue("(N)", temp);
            new = PyComplex_Type.tp_new(&PyComplex_Type, args, NULL);
            Py_DECREF(args);
            temp = new;
            if (temp==NULL) return;
        }

        CFLOAT_setitem(temp,(char *)op, aop);
        Py_DECREF(temp);
    }
}


#line 815
static void
UNICODE_to_CDOUBLE(char *ip, cdouble *op, intp n, PyArrayObject *aip,
             PyArrayObject *aop)
{
    register intp i;
    PyObject *temp=NULL;
    int skip=aip->descr->elsize;
    int oskip=1;
    for(i=0; i<n; i++, ip+=skip, op+=oskip) {
        temp = UNICODE_getitem((char *)ip, aip);
        if (temp==NULL) return;
        /* convert from Python object to needed one */
        if (1) {
            PyObject *new, *args;
            /* call out to the Python builtin given by convstr */
            args = Py_BuildValue("(N)", temp);
            new = PyComplex_Type.tp_new(&PyComplex_Type, args, NULL);
            Py_DECREF(args);
            temp = new;
            if (temp==NULL) return;
        }

        CDOUBLE_setitem(temp,(char *)op, aop);
        Py_DECREF(temp);
    }
}


#line 815
static void
UNICODE_to_CLONGDOUBLE(char *ip, clongdouble *op, intp n, PyArrayObject *aip,
             PyArrayObject *aop)
{
    register intp i;
    PyObject *temp=NULL;
    int skip=aip->descr->elsize;
    int oskip=1;
    for(i=0; i<n; i++, ip+=skip, op+=oskip) {
        temp = UNICODE_getitem((char *)ip, aip);
        if (temp==NULL) return;
        /* convert from Python object to needed one */
        if (1) {
            PyObject *new, *args;
            /* call out to the Python builtin given by convstr */
            args = Py_BuildValue("(N)", temp);
            new = PyComplex_Type.tp_new(&PyComplex_Type, args, NULL);
            Py_DECREF(args);
            temp = new;
            if (temp==NULL) return;
        }

        CLONGDOUBLE_setitem(temp,(char *)op, aop);
        Py_DECREF(temp);
    }
}


#line 815
static void
UNICODE_to_STRING(char *ip, char *op, intp n, PyArrayObject *aip,
             PyArrayObject *aop)
{
    register intp i;
    PyObject *temp=NULL;
    int skip=aip->descr->elsize;
    int oskip=aop->descr->elsize;
    for(i=0; i<n; i++, ip+=skip, op+=oskip) {
        temp = UNICODE_getitem((char *)ip, aip);
        if (temp==NULL) return;
        /* convert from Python object to needed one */
        if (0) {
            PyObject *new, *args;
            /* call out to the Python builtin given by convstr */
            args = Py_BuildValue("(N)", temp);
            new = PyTuple_Type.tp_new(&PyTuple_Type, args, NULL);
            Py_DECREF(args);
            temp = new;
            if (temp==NULL) return;
        }

        STRING_setitem(temp,(char *)op, aop);
        Py_DECREF(temp);
    }
}


#line 815
static void
UNICODE_to_UNICODE(char *ip, char *op, intp n, PyArrayObject *aip,
             PyArrayObject *aop)
{
    register intp i;
    PyObject *temp=NULL;
    int skip=aip->descr->elsize;
    int oskip=aop->descr->elsize;
    for(i=0; i<n; i++, ip+=skip, op+=oskip) {
        temp = UNICODE_getitem((char *)ip, aip);
        if (temp==NULL) return;
        /* convert from Python object to needed one */
        if (0) {
            PyObject *new, *args;
            /* call out to the Python builtin given by convstr */
            args = Py_BuildValue("(N)", temp);
            new = PyTuple_Type.tp_new(&PyTuple_Type, args, NULL);
            Py_DECREF(args);
            temp = new;
            if (temp==NULL) return;
        }

        UNICODE_setitem(temp,(char *)op, aop);
        Py_DECREF(temp);
    }
}


#line 815
static void
UNICODE_to_VOID(char *ip, char *op, intp n, PyArrayObject *aip,
             PyArrayObject *aop)
{
    register intp i;
    PyObject *temp=NULL;
    int skip=aip->descr->elsize;
    int oskip=aop->descr->elsize;
    for(i=0; i<n; i++, ip+=skip, op+=oskip) {
        temp = UNICODE_getitem((char *)ip, aip);
        if (temp==NULL) return;
        /* convert from Python object to needed one */
        if (0) {
            PyObject *new, *args;
            /* call out to the Python builtin given by convstr */
            args = Py_BuildValue("(N)", temp);
            new = PyTuple_Type.tp_new(&PyTuple_Type, args, NULL);
            Py_DECREF(args);
            temp = new;
            if (temp==NULL) return;
        }

        VOID_setitem(temp,(char *)op, aop);
        Py_DECREF(temp);
    }
}


#line 815
static void
VOID_to_BOOL(char *ip, Bool *op, intp n, PyArrayObject *aip,
             PyArrayObject *aop)
{
    register intp i;
    PyObject *temp=NULL;
    int skip=aip->descr->elsize;
    int oskip=1;
    for(i=0; i<n; i++, ip+=skip, op+=oskip) {
        temp = VOID_getitem((char *)ip, aip);
        if (temp==NULL) return;
        /* convert from Python object to needed one */
        if (0) {
            PyObject *new, *args;
            /* call out to the Python builtin given by convstr */
            args = Py_BuildValue("(N)", temp);
            new = PyInt_Type.tp_new(&PyInt_Type, args, NULL);
            Py_DECREF(args);
            temp = new;
            if (temp==NULL) return;
        }

        BOOL_setitem(temp,(char *)op, aop);
        Py_DECREF(temp);
    }
}


#line 815
static void
VOID_to_BYTE(char *ip, byte *op, intp n, PyArrayObject *aip,
             PyArrayObject *aop)
{
    register intp i;
    PyObject *temp=NULL;
    int skip=aip->descr->elsize;
    int oskip=1;
    for(i=0; i<n; i++, ip+=skip, op+=oskip) {
        temp = VOID_getitem((char *)ip, aip);
        if (temp==NULL) return;
        /* convert from Python object to needed one */
        if (0) {
            PyObject *new, *args;
            /* call out to the Python builtin given by convstr */
            args = Py_BuildValue("(N)", temp);
            new = PyInt_Type.tp_new(&PyInt_Type, args, NULL);
            Py_DECREF(args);
            temp = new;
            if (temp==NULL) return;
        }

        BYTE_setitem(temp,(char *)op, aop);
        Py_DECREF(temp);
    }
}


#line 815
static void
VOID_to_UBYTE(char *ip, ubyte *op, intp n, PyArrayObject *aip,
             PyArrayObject *aop)
{
    register intp i;
    PyObject *temp=NULL;
    int skip=aip->descr->elsize;
    int oskip=1;
    for(i=0; i<n; i++, ip+=skip, op+=oskip) {
        temp = VOID_getitem((char *)ip, aip);
        if (temp==NULL) return;
        /* convert from Python object to needed one */
        if (0) {
            PyObject *new, *args;
            /* call out to the Python builtin given by convstr */
            args = Py_BuildValue("(N)", temp);
            new = PyInt_Type.tp_new(&PyInt_Type, args, NULL);
            Py_DECREF(args);
            temp = new;
            if (temp==NULL) return;
        }

        UBYTE_setitem(temp,(char *)op, aop);
        Py_DECREF(temp);
    }
}


#line 815
static void
VOID_to_SHORT(char *ip, short *op, intp n, PyArrayObject *aip,
             PyArrayObject *aop)
{
    register intp i;
    PyObject *temp=NULL;
    int skip=aip->descr->elsize;
    int oskip=1;
    for(i=0; i<n; i++, ip+=skip, op+=oskip) {
        temp = VOID_getitem((char *)ip, aip);
        if (temp==NULL) return;
        /* convert from Python object to needed one */
        if (0) {
            PyObject *new, *args;
            /* call out to the Python builtin given by convstr */
            args = Py_BuildValue("(N)", temp);
            new = PyInt_Type.tp_new(&PyInt_Type, args, NULL);
            Py_DECREF(args);
            temp = new;
            if (temp==NULL) return;
        }

        SHORT_setitem(temp,(char *)op, aop);
        Py_DECREF(temp);
    }
}


#line 815
static void
VOID_to_USHORT(char *ip, ushort *op, intp n, PyArrayObject *aip,
             PyArrayObject *aop)
{
    register intp i;
    PyObject *temp=NULL;
    int skip=aip->descr->elsize;
    int oskip=1;
    for(i=0; i<n; i++, ip+=skip, op+=oskip) {
        temp = VOID_getitem((char *)ip, aip);
        if (temp==NULL) return;
        /* convert from Python object to needed one */
        if (0) {
            PyObject *new, *args;
            /* call out to the Python builtin given by convstr */
            args = Py_BuildValue("(N)", temp);
            new = PyInt_Type.tp_new(&PyInt_Type, args, NULL);
            Py_DECREF(args);
            temp = new;
            if (temp==NULL) return;
        }

        USHORT_setitem(temp,(char *)op, aop);
        Py_DECREF(temp);
    }
}


#line 815
static void
VOID_to_INT(char *ip, int *op, intp n, PyArrayObject *aip,
             PyArrayObject *aop)
{
    register intp i;
    PyObject *temp=NULL;
    int skip=aip->descr->elsize;
    int oskip=1;
    for(i=0; i<n; i++, ip+=skip, op+=oskip) {
        temp = VOID_getitem((char *)ip, aip);
        if (temp==NULL) return;
        /* convert from Python object to needed one */
        if (0) {
            PyObject *new, *args;
            /* call out to the Python builtin given by convstr */
            args = Py_BuildValue("(N)", temp);
            new = PyInt_Type.tp_new(&PyInt_Type, args, NULL);
            Py_DECREF(args);
            temp = new;
            if (temp==NULL) return;
        }

        INT_setitem(temp,(char *)op, aop);
        Py_DECREF(temp);
    }
}


#line 815
static void
VOID_to_UINT(char *ip, uint *op, intp n, PyArrayObject *aip,
             PyArrayObject *aop)
{
    register intp i;
    PyObject *temp=NULL;
    int skip=aip->descr->elsize;
    int oskip=1;
    for(i=0; i<n; i++, ip+=skip, op+=oskip) {
        temp = VOID_getitem((char *)ip, aip);
        if (temp==NULL) return;
        /* convert from Python object to needed one */
        if (0) {
            PyObject *new, *args;
            /* call out to the Python builtin given by convstr */
            args = Py_BuildValue("(N)", temp);
            new = PyInt_Type.tp_new(&PyInt_Type, args, NULL);
            Py_DECREF(args);
            temp = new;
            if (temp==NULL) return;
        }

        UINT_setitem(temp,(char *)op, aop);
        Py_DECREF(temp);
    }
}


#line 815
static void
VOID_to_LONG(char *ip, long *op, intp n, PyArrayObject *aip,
             PyArrayObject *aop)
{
    register intp i;
    PyObject *temp=NULL;
    int skip=aip->descr->elsize;
    int oskip=1;
    for(i=0; i<n; i++, ip+=skip, op+=oskip) {
        temp = VOID_getitem((char *)ip, aip);
        if (temp==NULL) return;
        /* convert from Python object to needed one */
        if (0) {
            PyObject *new, *args;
            /* call out to the Python builtin given by convstr */
            args = Py_BuildValue("(N)", temp);
            new = PyInt_Type.tp_new(&PyInt_Type, args, NULL);
            Py_DECREF(args);
            temp = new;
            if (temp==NULL) return;
        }

        LONG_setitem(temp,(char *)op, aop);
        Py_DECREF(temp);
    }
}


#line 815
static void
VOID_to_ULONG(char *ip, ulong *op, intp n, PyArrayObject *aip,
             PyArrayObject *aop)
{
    register intp i;
    PyObject *temp=NULL;
    int skip=aip->descr->elsize;
    int oskip=1;
    for(i=0; i<n; i++, ip+=skip, op+=oskip) {
        temp = VOID_getitem((char *)ip, aip);
        if (temp==NULL) return;
        /* convert from Python object to needed one */
        if (0) {
            PyObject *new, *args;
            /* call out to the Python builtin given by convstr */
            args = Py_BuildValue("(N)", temp);
            new = PyInt_Type.tp_new(&PyInt_Type, args, NULL);
            Py_DECREF(args);
            temp = new;
            if (temp==NULL) return;
        }

        ULONG_setitem(temp,(char *)op, aop);
        Py_DECREF(temp);
    }
}


#line 815
static void
VOID_to_LONGLONG(char *ip, longlong *op, intp n, PyArrayObject *aip,
             PyArrayObject *aop)
{
    register intp i;
    PyObject *temp=NULL;
    int skip=aip->descr->elsize;
    int oskip=1;
    for(i=0; i<n; i++, ip+=skip, op+=oskip) {
        temp = VOID_getitem((char *)ip, aip);
        if (temp==NULL) return;
        /* convert from Python object to needed one */
        if (0) {
            PyObject *new, *args;
            /* call out to the Python builtin given by convstr */
            args = Py_BuildValue("(N)", temp);
            new = PyLong_Type.tp_new(&PyLong_Type, args, NULL);
            Py_DECREF(args);
            temp = new;
            if (temp==NULL) return;
        }

        LONGLONG_setitem(temp,(char *)op, aop);
        Py_DECREF(temp);
    }
}


#line 815
static void
VOID_to_ULONGLONG(char *ip, ulonglong *op, intp n, PyArrayObject *aip,
             PyArrayObject *aop)
{
    register intp i;
    PyObject *temp=NULL;
    int skip=aip->descr->elsize;
    int oskip=1;
    for(i=0; i<n; i++, ip+=skip, op+=oskip) {
        temp = VOID_getitem((char *)ip, aip);
        if (temp==NULL) return;
        /* convert from Python object to needed one */
        if (0) {
            PyObject *new, *args;
            /* call out to the Python builtin given by convstr */
            args = Py_BuildValue("(N)", temp);
            new = PyLong_Type.tp_new(&PyLong_Type, args, NULL);
            Py_DECREF(args);
            temp = new;
            if (temp==NULL) return;
        }

        ULONGLONG_setitem(temp,(char *)op, aop);
        Py_DECREF(temp);
    }
}


#line 815
static void
VOID_to_FLOAT(char *ip, float *op, intp n, PyArrayObject *aip,
             PyArrayObject *aop)
{
    register intp i;
    PyObject *temp=NULL;
    int skip=aip->descr->elsize;
    int oskip=1;
    for(i=0; i<n; i++, ip+=skip, op+=oskip) {
        temp = VOID_getitem((char *)ip, aip);
        if (temp==NULL) return;
        /* convert from Python object to needed one */
        if (0) {
            PyObject *new, *args;
            /* call out to the Python builtin given by convstr */
            args = Py_BuildValue("(N)", temp);
            new = PyFloat_Type.tp_new(&PyFloat_Type, args, NULL);
            Py_DECREF(args);
            temp = new;
            if (temp==NULL) return;
        }

        FLOAT_setitem(temp,(char *)op, aop);
        Py_DECREF(temp);
    }
}


#line 815
static void
VOID_to_DOUBLE(char *ip, double *op, intp n, PyArrayObject *aip,
             PyArrayObject *aop)
{
    register intp i;
    PyObject *temp=NULL;
    int skip=aip->descr->elsize;
    int oskip=1;
    for(i=0; i<n; i++, ip+=skip, op+=oskip) {
        temp = VOID_getitem((char *)ip, aip);
        if (temp==NULL) return;
        /* convert from Python object to needed one */
        if (0) {
            PyObject *new, *args;
            /* call out to the Python builtin given by convstr */
            args = Py_BuildValue("(N)", temp);
            new = PyFloat_Type.tp_new(&PyFloat_Type, args, NULL);
            Py_DECREF(args);
            temp = new;
            if (temp==NULL) return;
        }

        DOUBLE_setitem(temp,(char *)op, aop);
        Py_DECREF(temp);
    }
}


#line 815
static void
VOID_to_LONGDOUBLE(char *ip, longdouble *op, intp n, PyArrayObject *aip,
             PyArrayObject *aop)
{
    register intp i;
    PyObject *temp=NULL;
    int skip=aip->descr->elsize;
    int oskip=1;
    for(i=0; i<n; i++, ip+=skip, op+=oskip) {
        temp = VOID_getitem((char *)ip, aip);
        if (temp==NULL) return;
        /* convert from Python object to needed one */
        if (0) {
            PyObject *new, *args;
            /* call out to the Python builtin given by convstr */
            args = Py_BuildValue("(N)", temp);
            new = PyFloat_Type.tp_new(&PyFloat_Type, args, NULL);
            Py_DECREF(args);
            temp = new;
            if (temp==NULL) return;
        }

        LONGDOUBLE_setitem(temp,(char *)op, aop);
        Py_DECREF(temp);
    }
}


#line 815
static void
VOID_to_CFLOAT(char *ip, cfloat *op, intp n, PyArrayObject *aip,
             PyArrayObject *aop)
{
    register intp i;
    PyObject *temp=NULL;
    int skip=aip->descr->elsize;
    int oskip=1;
    for(i=0; i<n; i++, ip+=skip, op+=oskip) {
        temp = VOID_getitem((char *)ip, aip);
        if (temp==NULL) return;
        /* convert from Python object to needed one */
        if (0) {
            PyObject *new, *args;
            /* call out to the Python builtin given by convstr */
            args = Py_BuildValue("(N)", temp);
            new = PyComplex_Type.tp_new(&PyComplex_Type, args, NULL);
            Py_DECREF(args);
            temp = new;
            if (temp==NULL) return;
        }

        CFLOAT_setitem(temp,(char *)op, aop);
        Py_DECREF(temp);
    }
}


#line 815
static void
VOID_to_CDOUBLE(char *ip, cdouble *op, intp n, PyArrayObject *aip,
             PyArrayObject *aop)
{
    register intp i;
    PyObject *temp=NULL;
    int skip=aip->descr->elsize;
    int oskip=1;
    for(i=0; i<n; i++, ip+=skip, op+=oskip) {
        temp = VOID_getitem((char *)ip, aip);
        if (temp==NULL) return;
        /* convert from Python object to needed one */
        if (0) {
            PyObject *new, *args;
            /* call out to the Python builtin given by convstr */
            args = Py_BuildValue("(N)", temp);
            new = PyComplex_Type.tp_new(&PyComplex_Type, args, NULL);
            Py_DECREF(args);
            temp = new;
            if (temp==NULL) return;
        }

        CDOUBLE_setitem(temp,(char *)op, aop);
        Py_DECREF(temp);
    }
}


#line 815
static void
VOID_to_CLONGDOUBLE(char *ip, clongdouble *op, intp n, PyArrayObject *aip,
             PyArrayObject *aop)
{
    register intp i;
    PyObject *temp=NULL;
    int skip=aip->descr->elsize;
    int oskip=1;
    for(i=0; i<n; i++, ip+=skip, op+=oskip) {
        temp = VOID_getitem((char *)ip, aip);
        if (temp==NULL) return;
        /* convert from Python object to needed one */
        if (0) {
            PyObject *new, *args;
            /* call out to the Python builtin given by convstr */
            args = Py_BuildValue("(N)", temp);
            new = PyComplex_Type.tp_new(&PyComplex_Type, args, NULL);
            Py_DECREF(args);
            temp = new;
            if (temp==NULL) return;
        }

        CLONGDOUBLE_setitem(temp,(char *)op, aop);
        Py_DECREF(temp);
    }
}


#line 815
static void
VOID_to_STRING(char *ip, char *op, intp n, PyArrayObject *aip,
             PyArrayObject *aop)
{
    register intp i;
    PyObject *temp=NULL;
    int skip=aip->descr->elsize;
    int oskip=aop->descr->elsize;
    for(i=0; i<n; i++, ip+=skip, op+=oskip) {
        temp = VOID_getitem((char *)ip, aip);
        if (temp==NULL) return;
        /* convert from Python object to needed one */
        if (0) {
            PyObject *new, *args;
            /* call out to the Python builtin given by convstr */
            args = Py_BuildValue("(N)", temp);
            new = PyTuple_Type.tp_new(&PyTuple_Type, args, NULL);
            Py_DECREF(args);
            temp = new;
            if (temp==NULL) return;
        }

        STRING_setitem(temp,(char *)op, aop);
        Py_DECREF(temp);
    }
}


#line 815
static void
VOID_to_UNICODE(char *ip, char *op, intp n, PyArrayObject *aip,
             PyArrayObject *aop)
{
    register intp i;
    PyObject *temp=NULL;
    int skip=aip->descr->elsize;
    int oskip=aop->descr->elsize;
    for(i=0; i<n; i++, ip+=skip, op+=oskip) {
        temp = VOID_getitem((char *)ip, aip);
        if (temp==NULL) return;
        /* convert from Python object to needed one */
        if (0) {
            PyObject *new, *args;
            /* call out to the Python builtin given by convstr */
            args = Py_BuildValue("(N)", temp);
            new = PyTuple_Type.tp_new(&PyTuple_Type, args, NULL);
            Py_DECREF(args);
            temp = new;
            if (temp==NULL) return;
        }

        UNICODE_setitem(temp,(char *)op, aop);
        Py_DECREF(temp);
    }
}


#line 815
static void
VOID_to_VOID(char *ip, char *op, intp n, PyArrayObject *aip,
             PyArrayObject *aop)
{
    register intp i;
    PyObject *temp=NULL;
    int skip=aip->descr->elsize;
    int oskip=aop->descr->elsize;
    for(i=0; i<n; i++, ip+=skip, op+=oskip) {
        temp = VOID_getitem((char *)ip, aip);
        if (temp==NULL) return;
        /* convert from Python object to needed one */
        if (0) {
            PyObject *new, *args;
            /* call out to the Python builtin given by convstr */
            args = Py_BuildValue("(N)", temp);
            new = PyTuple_Type.tp_new(&PyTuple_Type, args, NULL);
            Py_DECREF(args);
            temp = new;
            if (temp==NULL) return;
        }

        VOID_setitem(temp,(char *)op, aop);
        Py_DECREF(temp);
    }
}



#line 851

static void
BOOL_to_STRING(Bool *ip, char *op, intp n, PyArrayObject *aip,
             PyArrayObject *aop)
{
    register intp i;
    PyObject *temp=NULL;
    int skip=1;
    int oskip=aop->descr->elsize;
    for(i=0; i<n; i++, ip+=skip, op+=oskip) {
        temp = BOOL_getitem((char *)ip, aip);
        if (temp==NULL) {
            Py_INCREF(Py_False);
            temp = Py_False;
        }
        STRING_setitem(temp,(char *)op, aop);
        Py_DECREF(temp);
    }
}


#line 851

static void
BYTE_to_STRING(byte *ip, char *op, intp n, PyArrayObject *aip,
             PyArrayObject *aop)
{
    register intp i;
    PyObject *temp=NULL;
    int skip=1;
    int oskip=aop->descr->elsize;
    for(i=0; i<n; i++, ip+=skip, op+=oskip) {
        temp = BYTE_getitem((char *)ip, aip);
        if (temp==NULL) {
            Py_INCREF(Py_False);
            temp = Py_False;
        }
        STRING_setitem(temp,(char *)op, aop);
        Py_DECREF(temp);
    }
}


#line 851

static void
UBYTE_to_STRING(ubyte *ip, char *op, intp n, PyArrayObject *aip,
             PyArrayObject *aop)
{
    register intp i;
    PyObject *temp=NULL;
    int skip=1;
    int oskip=aop->descr->elsize;
    for(i=0; i<n; i++, ip+=skip, op+=oskip) {
        temp = UBYTE_getitem((char *)ip, aip);
        if (temp==NULL) {
            Py_INCREF(Py_False);
            temp = Py_False;
        }
        STRING_setitem(temp,(char *)op, aop);
        Py_DECREF(temp);
    }
}


#line 851

static void
SHORT_to_STRING(short *ip, char *op, intp n, PyArrayObject *aip,
             PyArrayObject *aop)
{
    register intp i;
    PyObject *temp=NULL;
    int skip=1;
    int oskip=aop->descr->elsize;
    for(i=0; i<n; i++, ip+=skip, op+=oskip) {
        temp = SHORT_getitem((char *)ip, aip);
        if (temp==NULL) {
            Py_INCREF(Py_False);
            temp = Py_False;
        }
        STRING_setitem(temp,(char *)op, aop);
        Py_DECREF(temp);
    }
}


#line 851

static void
USHORT_to_STRING(ushort *ip, char *op, intp n, PyArrayObject *aip,
             PyArrayObject *aop)
{
    register intp i;
    PyObject *temp=NULL;
    int skip=1;
    int oskip=aop->descr->elsize;
    for(i=0; i<n; i++, ip+=skip, op+=oskip) {
        temp = USHORT_getitem((char *)ip, aip);
        if (temp==NULL) {
            Py_INCREF(Py_False);
            temp = Py_False;
        }
        STRING_setitem(temp,(char *)op, aop);
        Py_DECREF(temp);
    }
}


#line 851

static void
INT_to_STRING(int *ip, char *op, intp n, PyArrayObject *aip,
             PyArrayObject *aop)
{
    register intp i;
    PyObject *temp=NULL;
    int skip=1;
    int oskip=aop->descr->elsize;
    for(i=0; i<n; i++, ip+=skip, op+=oskip) {
        temp = INT_getitem((char *)ip, aip);
        if (temp==NULL) {
            Py_INCREF(Py_False);
            temp = Py_False;
        }
        STRING_setitem(temp,(char *)op, aop);
        Py_DECREF(temp);
    }
}


#line 851

static void
UINT_to_STRING(uint *ip, char *op, intp n, PyArrayObject *aip,
             PyArrayObject *aop)
{
    register intp i;
    PyObject *temp=NULL;
    int skip=1;
    int oskip=aop->descr->elsize;
    for(i=0; i<n; i++, ip+=skip, op+=oskip) {
        temp = UINT_getitem((char *)ip, aip);
        if (temp==NULL) {
            Py_INCREF(Py_False);
            temp = Py_False;
        }
        STRING_setitem(temp,(char *)op, aop);
        Py_DECREF(temp);
    }
}


#line 851

static void
LONG_to_STRING(long *ip, char *op, intp n, PyArrayObject *aip,
             PyArrayObject *aop)
{
    register intp i;
    PyObject *temp=NULL;
    int skip=1;
    int oskip=aop->descr->elsize;
    for(i=0; i<n; i++, ip+=skip, op+=oskip) {
        temp = LONG_getitem((char *)ip, aip);
        if (temp==NULL) {
            Py_INCREF(Py_False);
            temp = Py_False;
        }
        STRING_setitem(temp,(char *)op, aop);
        Py_DECREF(temp);
    }
}


#line 851

static void
ULONG_to_STRING(ulong *ip, char *op, intp n, PyArrayObject *aip,
             PyArrayObject *aop)
{
    register intp i;
    PyObject *temp=NULL;
    int skip=1;
    int oskip=aop->descr->elsize;
    for(i=0; i<n; i++, ip+=skip, op+=oskip) {
        temp = ULONG_getitem((char *)ip, aip);
        if (temp==NULL) {
            Py_INCREF(Py_False);
            temp = Py_False;
        }
        STRING_setitem(temp,(char *)op, aop);
        Py_DECREF(temp);
    }
}


#line 851

static void
LONGLONG_to_STRING(longlong *ip, char *op, intp n, PyArrayObject *aip,
             PyArrayObject *aop)
{
    register intp i;
    PyObject *temp=NULL;
    int skip=1;
    int oskip=aop->descr->elsize;
    for(i=0; i<n; i++, ip+=skip, op+=oskip) {
        temp = LONGLONG_getitem((char *)ip, aip);
        if (temp==NULL) {
            Py_INCREF(Py_False);
            temp = Py_False;
        }
        STRING_setitem(temp,(char *)op, aop);
        Py_DECREF(temp);
    }
}


#line 851

static void
ULONGLONG_to_STRING(ulonglong *ip, char *op, intp n, PyArrayObject *aip,
             PyArrayObject *aop)
{
    register intp i;
    PyObject *temp=NULL;
    int skip=1;
    int oskip=aop->descr->elsize;
    for(i=0; i<n; i++, ip+=skip, op+=oskip) {
        temp = ULONGLONG_getitem((char *)ip, aip);
        if (temp==NULL) {
            Py_INCREF(Py_False);
            temp = Py_False;
        }
        STRING_setitem(temp,(char *)op, aop);
        Py_DECREF(temp);
    }
}


#line 851

static void
FLOAT_to_STRING(float *ip, char *op, intp n, PyArrayObject *aip,
             PyArrayObject *aop)
{
    register intp i;
    PyObject *temp=NULL;
    int skip=1;
    int oskip=aop->descr->elsize;
    for(i=0; i<n; i++, ip+=skip, op+=oskip) {
        temp = FLOAT_getitem((char *)ip, aip);
        if (temp==NULL) {
            Py_INCREF(Py_False);
            temp = Py_False;
        }
        STRING_setitem(temp,(char *)op, aop);
        Py_DECREF(temp);
    }
}


#line 851

static void
DOUBLE_to_STRING(double *ip, char *op, intp n, PyArrayObject *aip,
             PyArrayObject *aop)
{
    register intp i;
    PyObject *temp=NULL;
    int skip=1;
    int oskip=aop->descr->elsize;
    for(i=0; i<n; i++, ip+=skip, op+=oskip) {
        temp = DOUBLE_getitem((char *)ip, aip);
        if (temp==NULL) {
            Py_INCREF(Py_False);
            temp = Py_False;
        }
        STRING_setitem(temp,(char *)op, aop);
        Py_DECREF(temp);
    }
}


#line 851

static void
LONGDOUBLE_to_STRING(longdouble *ip, char *op, intp n, PyArrayObject *aip,
             PyArrayObject *aop)
{
    register intp i;
    PyObject *temp=NULL;
    int skip=1;
    int oskip=aop->descr->elsize;
    for(i=0; i<n; i++, ip+=skip, op+=oskip) {
        temp = LONGDOUBLE_getitem((char *)ip, aip);
        if (temp==NULL) {
            Py_INCREF(Py_False);
            temp = Py_False;
        }
        STRING_setitem(temp,(char *)op, aop);
        Py_DECREF(temp);
    }
}


#line 851

static void
CFLOAT_to_STRING(cfloat *ip, char *op, intp n, PyArrayObject *aip,
             PyArrayObject *aop)
{
    register intp i;
    PyObject *temp=NULL;
    int skip=1;
    int oskip=aop->descr->elsize;
    for(i=0; i<n; i++, ip+=skip, op+=oskip) {
        temp = CFLOAT_getitem((char *)ip, aip);
        if (temp==NULL) {
            Py_INCREF(Py_False);
            temp = Py_False;
        }
        STRING_setitem(temp,(char *)op, aop);
        Py_DECREF(temp);
    }
}


#line 851

static void
CDOUBLE_to_STRING(cdouble *ip, char *op, intp n, PyArrayObject *aip,
             PyArrayObject *aop)
{
    register intp i;
    PyObject *temp=NULL;
    int skip=1;
    int oskip=aop->descr->elsize;
    for(i=0; i<n; i++, ip+=skip, op+=oskip) {
        temp = CDOUBLE_getitem((char *)ip, aip);
        if (temp==NULL) {
            Py_INCREF(Py_False);
            temp = Py_False;
        }
        STRING_setitem(temp,(char *)op, aop);
        Py_DECREF(temp);
    }
}


#line 851

static void
CLONGDOUBLE_to_STRING(clongdouble *ip, char *op, intp n, PyArrayObject *aip,
             PyArrayObject *aop)
{
    register intp i;
    PyObject *temp=NULL;
    int skip=1;
    int oskip=aop->descr->elsize;
    for(i=0; i<n; i++, ip+=skip, op+=oskip) {
        temp = CLONGDOUBLE_getitem((char *)ip, aip);
        if (temp==NULL) {
            Py_INCREF(Py_False);
            temp = Py_False;
        }
        STRING_setitem(temp,(char *)op, aop);
        Py_DECREF(temp);
    }
}


#line 851

static void
BOOL_to_UNICODE(Bool *ip, char *op, intp n, PyArrayObject *aip,
             PyArrayObject *aop)
{
    register intp i;
    PyObject *temp=NULL;
    int skip=1;
    int oskip=aop->descr->elsize;
    for(i=0; i<n; i++, ip+=skip, op+=oskip) {
        temp = BOOL_getitem((char *)ip, aip);
        if (temp==NULL) {
            Py_INCREF(Py_False);
            temp = Py_False;
        }
        UNICODE_setitem(temp,(char *)op, aop);
        Py_DECREF(temp);
    }
}


#line 851

static void
BYTE_to_UNICODE(byte *ip, char *op, intp n, PyArrayObject *aip,
             PyArrayObject *aop)
{
    register intp i;
    PyObject *temp=NULL;
    int skip=1;
    int oskip=aop->descr->elsize;
    for(i=0; i<n; i++, ip+=skip, op+=oskip) {
        temp = BYTE_getitem((char *)ip, aip);
        if (temp==NULL) {
            Py_INCREF(Py_False);
            temp = Py_False;
        }
        UNICODE_setitem(temp,(char *)op, aop);
        Py_DECREF(temp);
    }
}


#line 851

static void
UBYTE_to_UNICODE(ubyte *ip, char *op, intp n, PyArrayObject *aip,
             PyArrayObject *aop)
{
    register intp i;
    PyObject *temp=NULL;
    int skip=1;
    int oskip=aop->descr->elsize;
    for(i=0; i<n; i++, ip+=skip, op+=oskip) {
        temp = UBYTE_getitem((char *)ip, aip);
        if (temp==NULL) {
            Py_INCREF(Py_False);
            temp = Py_False;
        }
        UNICODE_setitem(temp,(char *)op, aop);
        Py_DECREF(temp);
    }
}


#line 851

static void
SHORT_to_UNICODE(short *ip, char *op, intp n, PyArrayObject *aip,
             PyArrayObject *aop)
{
    register intp i;
    PyObject *temp=NULL;
    int skip=1;
    int oskip=aop->descr->elsize;
    for(i=0; i<n; i++, ip+=skip, op+=oskip) {
        temp = SHORT_getitem((char *)ip, aip);
        if (temp==NULL) {
            Py_INCREF(Py_False);
            temp = Py_False;
        }
        UNICODE_setitem(temp,(char *)op, aop);
        Py_DECREF(temp);
    }
}


#line 851

static void
USHORT_to_UNICODE(ushort *ip, char *op, intp n, PyArrayObject *aip,
             PyArrayObject *aop)
{
    register intp i;
    PyObject *temp=NULL;
    int skip=1;
    int oskip=aop->descr->elsize;
    for(i=0; i<n; i++, ip+=skip, op+=oskip) {
        temp = USHORT_getitem((char *)ip, aip);
        if (temp==NULL) {
            Py_INCREF(Py_False);
            temp = Py_False;
        }
        UNICODE_setitem(temp,(char *)op, aop);
        Py_DECREF(temp);
    }
}


#line 851

static void
INT_to_UNICODE(int *ip, char *op, intp n, PyArrayObject *aip,
             PyArrayObject *aop)
{
    register intp i;
    PyObject *temp=NULL;
    int skip=1;
    int oskip=aop->descr->elsize;
    for(i=0; i<n; i++, ip+=skip, op+=oskip) {
        temp = INT_getitem((char *)ip, aip);
        if (temp==NULL) {
            Py_INCREF(Py_False);
            temp = Py_False;
        }
        UNICODE_setitem(temp,(char *)op, aop);
        Py_DECREF(temp);
    }
}


#line 851

static void
UINT_to_UNICODE(uint *ip, char *op, intp n, PyArrayObject *aip,
             PyArrayObject *aop)
{
    register intp i;
    PyObject *temp=NULL;
    int skip=1;
    int oskip=aop->descr->elsize;
    for(i=0; i<n; i++, ip+=skip, op+=oskip) {
        temp = UINT_getitem((char *)ip, aip);
        if (temp==NULL) {
            Py_INCREF(Py_False);
            temp = Py_False;
        }
        UNICODE_setitem(temp,(char *)op, aop);
        Py_DECREF(temp);
    }
}


#line 851

static void
LONG_to_UNICODE(long *ip, char *op, intp n, PyArrayObject *aip,
             PyArrayObject *aop)
{
    register intp i;
    PyObject *temp=NULL;
    int skip=1;
    int oskip=aop->descr->elsize;
    for(i=0; i<n; i++, ip+=skip, op+=oskip) {
        temp = LONG_getitem((char *)ip, aip);
        if (temp==NULL) {
            Py_INCREF(Py_False);
            temp = Py_False;
        }
        UNICODE_setitem(temp,(char *)op, aop);
        Py_DECREF(temp);
    }
}


#line 851

static void
ULONG_to_UNICODE(ulong *ip, char *op, intp n, PyArrayObject *aip,
             PyArrayObject *aop)
{
    register intp i;
    PyObject *temp=NULL;
    int skip=1;
    int oskip=aop->descr->elsize;
    for(i=0; i<n; i++, ip+=skip, op+=oskip) {
        temp = ULONG_getitem((char *)ip, aip);
        if (temp==NULL) {
            Py_INCREF(Py_False);
            temp = Py_False;
        }
        UNICODE_setitem(temp,(char *)op, aop);
        Py_DECREF(temp);
    }
}


#line 851

static void
LONGLONG_to_UNICODE(longlong *ip, char *op, intp n, PyArrayObject *aip,
             PyArrayObject *aop)
{
    register intp i;
    PyObject *temp=NULL;
    int skip=1;
    int oskip=aop->descr->elsize;
    for(i=0; i<n; i++, ip+=skip, op+=oskip) {
        temp = LONGLONG_getitem((char *)ip, aip);
        if (temp==NULL) {
            Py_INCREF(Py_False);
            temp = Py_False;
        }
        UNICODE_setitem(temp,(char *)op, aop);
        Py_DECREF(temp);
    }
}


#line 851

static void
ULONGLONG_to_UNICODE(ulonglong *ip, char *op, intp n, PyArrayObject *aip,
             PyArrayObject *aop)
{
    register intp i;
    PyObject *temp=NULL;
    int skip=1;
    int oskip=aop->descr->elsize;
    for(i=0; i<n; i++, ip+=skip, op+=oskip) {
        temp = ULONGLONG_getitem((char *)ip, aip);
        if (temp==NULL) {
            Py_INCREF(Py_False);
            temp = Py_False;
        }
        UNICODE_setitem(temp,(char *)op, aop);
        Py_DECREF(temp);
    }
}


#line 851

static void
FLOAT_to_UNICODE(float *ip, char *op, intp n, PyArrayObject *aip,
             PyArrayObject *aop)
{
    register intp i;
    PyObject *temp=NULL;
    int skip=1;
    int oskip=aop->descr->elsize;
    for(i=0; i<n; i++, ip+=skip, op+=oskip) {
        temp = FLOAT_getitem((char *)ip, aip);
        if (temp==NULL) {
            Py_INCREF(Py_False);
            temp = Py_False;
        }
        UNICODE_setitem(temp,(char *)op, aop);
        Py_DECREF(temp);
    }
}


#line 851

static void
DOUBLE_to_UNICODE(double *ip, char *op, intp n, PyArrayObject *aip,
             PyArrayObject *aop)
{
    register intp i;
    PyObject *temp=NULL;
    int skip=1;
    int oskip=aop->descr->elsize;
    for(i=0; i<n; i++, ip+=skip, op+=oskip) {
        temp = DOUBLE_getitem((char *)ip, aip);
        if (temp==NULL) {
            Py_INCREF(Py_False);
            temp = Py_False;
        }
        UNICODE_setitem(temp,(char *)op, aop);
        Py_DECREF(temp);
    }
}


#line 851

static void
LONGDOUBLE_to_UNICODE(longdouble *ip, char *op, intp n, PyArrayObject *aip,
             PyArrayObject *aop)
{
    register intp i;
    PyObject *temp=NULL;
    int skip=1;
    int oskip=aop->descr->elsize;
    for(i=0; i<n; i++, ip+=skip, op+=oskip) {
        temp = LONGDOUBLE_getitem((char *)ip, aip);
        if (temp==NULL) {
            Py_INCREF(Py_False);
            temp = Py_False;
        }
        UNICODE_setitem(temp,(char *)op, aop);
        Py_DECREF(temp);
    }
}


#line 851

static void
CFLOAT_to_UNICODE(cfloat *ip, char *op, intp n, PyArrayObject *aip,
             PyArrayObject *aop)
{
    register intp i;
    PyObject *temp=NULL;
    int skip=1;
    int oskip=aop->descr->elsize;
    for(i=0; i<n; i++, ip+=skip, op+=oskip) {
        temp = CFLOAT_getitem((char *)ip, aip);
        if (temp==NULL) {
            Py_INCREF(Py_False);
            temp = Py_False;
        }
        UNICODE_setitem(temp,(char *)op, aop);
        Py_DECREF(temp);
    }
}


#line 851

static void
CDOUBLE_to_UNICODE(cdouble *ip, char *op, intp n, PyArrayObject *aip,
             PyArrayObject *aop)
{
    register intp i;
    PyObject *temp=NULL;
    int skip=1;
    int oskip=aop->descr->elsize;
    for(i=0; i<n; i++, ip+=skip, op+=oskip) {
        temp = CDOUBLE_getitem((char *)ip, aip);
        if (temp==NULL) {
            Py_INCREF(Py_False);
            temp = Py_False;
        }
        UNICODE_setitem(temp,(char *)op, aop);
        Py_DECREF(temp);
    }
}


#line 851

static void
CLONGDOUBLE_to_UNICODE(clongdouble *ip, char *op, intp n, PyArrayObject *aip,
             PyArrayObject *aop)
{
    register intp i;
    PyObject *temp=NULL;
    int skip=1;
    int oskip=aop->descr->elsize;
    for(i=0; i<n; i++, ip+=skip, op+=oskip) {
        temp = CLONGDOUBLE_getitem((char *)ip, aip);
        if (temp==NULL) {
            Py_INCREF(Py_False);
            temp = Py_False;
        }
        UNICODE_setitem(temp,(char *)op, aop);
        Py_DECREF(temp);
    }
}


#line 851

static void
BOOL_to_VOID(Bool *ip, char *op, intp n, PyArrayObject *aip,
             PyArrayObject *aop)
{
    register intp i;
    PyObject *temp=NULL;
    int skip=1;
    int oskip=aop->descr->elsize;
    for(i=0; i<n; i++, ip+=skip, op+=oskip) {
        temp = BOOL_getitem((char *)ip, aip);
        if (temp==NULL) {
            Py_INCREF(Py_False);
            temp = Py_False;
        }
        VOID_setitem(temp,(char *)op, aop);
        Py_DECREF(temp);
    }
}


#line 851

static void
BYTE_to_VOID(byte *ip, char *op, intp n, PyArrayObject *aip,
             PyArrayObject *aop)
{
    register intp i;
    PyObject *temp=NULL;
    int skip=1;
    int oskip=aop->descr->elsize;
    for(i=0; i<n; i++, ip+=skip, op+=oskip) {
        temp = BYTE_getitem((char *)ip, aip);
        if (temp==NULL) {
            Py_INCREF(Py_False);
            temp = Py_False;
        }
        VOID_setitem(temp,(char *)op, aop);
        Py_DECREF(temp);
    }
}


#line 851

static void
UBYTE_to_VOID(ubyte *ip, char *op, intp n, PyArrayObject *aip,
             PyArrayObject *aop)
{
    register intp i;
    PyObject *temp=NULL;
    int skip=1;
    int oskip=aop->descr->elsize;
    for(i=0; i<n; i++, ip+=skip, op+=oskip) {
        temp = UBYTE_getitem((char *)ip, aip);
        if (temp==NULL) {
            Py_INCREF(Py_False);
            temp = Py_False;
        }
        VOID_setitem(temp,(char *)op, aop);
        Py_DECREF(temp);
    }
}


#line 851

static void
SHORT_to_VOID(short *ip, char *op, intp n, PyArrayObject *aip,
             PyArrayObject *aop)
{
    register intp i;
    PyObject *temp=NULL;
    int skip=1;
    int oskip=aop->descr->elsize;
    for(i=0; i<n; i++, ip+=skip, op+=oskip) {
        temp = SHORT_getitem((char *)ip, aip);
        if (temp==NULL) {
            Py_INCREF(Py_False);
            temp = Py_False;
        }
        VOID_setitem(temp,(char *)op, aop);
        Py_DECREF(temp);
    }
}


#line 851

static void
USHORT_to_VOID(ushort *ip, char *op, intp n, PyArrayObject *aip,
             PyArrayObject *aop)
{
    register intp i;
    PyObject *temp=NULL;
    int skip=1;
    int oskip=aop->descr->elsize;
    for(i=0; i<n; i++, ip+=skip, op+=oskip) {
        temp = USHORT_getitem((char *)ip, aip);
        if (temp==NULL) {
            Py_INCREF(Py_False);
            temp = Py_False;
        }
        VOID_setitem(temp,(char *)op, aop);
        Py_DECREF(temp);
    }
}


#line 851

static void
INT_to_VOID(int *ip, char *op, intp n, PyArrayObject *aip,
             PyArrayObject *aop)
{
    register intp i;
    PyObject *temp=NULL;
    int skip=1;
    int oskip=aop->descr->elsize;
    for(i=0; i<n; i++, ip+=skip, op+=oskip) {
        temp = INT_getitem((char *)ip, aip);
        if (temp==NULL) {
            Py_INCREF(Py_False);
            temp = Py_False;
        }
        VOID_setitem(temp,(char *)op, aop);
        Py_DECREF(temp);
    }
}


#line 851

static void
UINT_to_VOID(uint *ip, char *op, intp n, PyArrayObject *aip,
             PyArrayObject *aop)
{
    register intp i;
    PyObject *temp=NULL;
    int skip=1;
    int oskip=aop->descr->elsize;
    for(i=0; i<n; i++, ip+=skip, op+=oskip) {
        temp = UINT_getitem((char *)ip, aip);
        if (temp==NULL) {
            Py_INCREF(Py_False);
            temp = Py_False;
        }
        VOID_setitem(temp,(char *)op, aop);
        Py_DECREF(temp);
    }
}


#line 851

static void
LONG_to_VOID(long *ip, char *op, intp n, PyArrayObject *aip,
             PyArrayObject *aop)
{
    register intp i;
    PyObject *temp=NULL;
    int skip=1;
    int oskip=aop->descr->elsize;
    for(i=0; i<n; i++, ip+=skip, op+=oskip) {
        temp = LONG_getitem((char *)ip, aip);
        if (temp==NULL) {
            Py_INCREF(Py_False);
            temp = Py_False;
        }
        VOID_setitem(temp,(char *)op, aop);
        Py_DECREF(temp);
    }
}


#line 851

static void
ULONG_to_VOID(ulong *ip, char *op, intp n, PyArrayObject *aip,
             PyArrayObject *aop)
{
    register intp i;
    PyObject *temp=NULL;
    int skip=1;
    int oskip=aop->descr->elsize;
    for(i=0; i<n; i++, ip+=skip, op+=oskip) {
        temp = ULONG_getitem((char *)ip, aip);
        if (temp==NULL) {
            Py_INCREF(Py_False);
            temp = Py_False;
        }
        VOID_setitem(temp,(char *)op, aop);
        Py_DECREF(temp);
    }
}


#line 851

static void
LONGLONG_to_VOID(longlong *ip, char *op, intp n, PyArrayObject *aip,
             PyArrayObject *aop)
{
    register intp i;
    PyObject *temp=NULL;
    int skip=1;
    int oskip=aop->descr->elsize;
    for(i=0; i<n; i++, ip+=skip, op+=oskip) {
        temp = LONGLONG_getitem((char *)ip, aip);
        if (temp==NULL) {
            Py_INCREF(Py_False);
            temp = Py_False;
        }
        VOID_setitem(temp,(char *)op, aop);
        Py_DECREF(temp);
    }
}


#line 851

static void
ULONGLONG_to_VOID(ulonglong *ip, char *op, intp n, PyArrayObject *aip,
             PyArrayObject *aop)
{
    register intp i;
    PyObject *temp=NULL;
    int skip=1;
    int oskip=aop->descr->elsize;
    for(i=0; i<n; i++, ip+=skip, op+=oskip) {
        temp = ULONGLONG_getitem((char *)ip, aip);
        if (temp==NULL) {
            Py_INCREF(Py_False);
            temp = Py_False;
        }
        VOID_setitem(temp,(char *)op, aop);
        Py_DECREF(temp);
    }
}


#line 851

static void
FLOAT_to_VOID(float *ip, char *op, intp n, PyArrayObject *aip,
             PyArrayObject *aop)
{
    register intp i;
    PyObject *temp=NULL;
    int skip=1;
    int oskip=aop->descr->elsize;
    for(i=0; i<n; i++, ip+=skip, op+=oskip) {
        temp = FLOAT_getitem((char *)ip, aip);
        if (temp==NULL) {
            Py_INCREF(Py_False);
            temp = Py_False;
        }
        VOID_setitem(temp,(char *)op, aop);
        Py_DECREF(temp);
    }
}


#line 851

static void
DOUBLE_to_VOID(double *ip, char *op, intp n, PyArrayObject *aip,
             PyArrayObject *aop)
{
    register intp i;
    PyObject *temp=NULL;
    int skip=1;
    int oskip=aop->descr->elsize;
    for(i=0; i<n; i++, ip+=skip, op+=oskip) {
        temp = DOUBLE_getitem((char *)ip, aip);
        if (temp==NULL) {
            Py_INCREF(Py_False);
            temp = Py_False;
        }
        VOID_setitem(temp,(char *)op, aop);
        Py_DECREF(temp);
    }
}


#line 851

static void
LONGDOUBLE_to_VOID(longdouble *ip, char *op, intp n, PyArrayObject *aip,
             PyArrayObject *aop)
{
    register intp i;
    PyObject *temp=NULL;
    int skip=1;
    int oskip=aop->descr->elsize;
    for(i=0; i<n; i++, ip+=skip, op+=oskip) {
        temp = LONGDOUBLE_getitem((char *)ip, aip);
        if (temp==NULL) {
            Py_INCREF(Py_False);
            temp = Py_False;
        }
        VOID_setitem(temp,(char *)op, aop);
        Py_DECREF(temp);
    }
}


#line 851

static void
CFLOAT_to_VOID(cfloat *ip, char *op, intp n, PyArrayObject *aip,
             PyArrayObject *aop)
{
    register intp i;
    PyObject *temp=NULL;
    int skip=1;
    int oskip=aop->descr->elsize;
    for(i=0; i<n; i++, ip+=skip, op+=oskip) {
        temp = CFLOAT_getitem((char *)ip, aip);
        if (temp==NULL) {
            Py_INCREF(Py_False);
            temp = Py_False;
        }
        VOID_setitem(temp,(char *)op, aop);
        Py_DECREF(temp);
    }
}


#line 851

static void
CDOUBLE_to_VOID(cdouble *ip, char *op, intp n, PyArrayObject *aip,
             PyArrayObject *aop)
{
    register intp i;
    PyObject *temp=NULL;
    int skip=1;
    int oskip=aop->descr->elsize;
    for(i=0; i<n; i++, ip+=skip, op+=oskip) {
        temp = CDOUBLE_getitem((char *)ip, aip);
        if (temp==NULL) {
            Py_INCREF(Py_False);
            temp = Py_False;
        }
        VOID_setitem(temp,(char *)op, aop);
        Py_DECREF(temp);
    }
}


#line 851

static void
CLONGDOUBLE_to_VOID(clongdouble *ip, char *op, intp n, PyArrayObject *aip,
             PyArrayObject *aop)
{
    register intp i;
    PyObject *temp=NULL;
    int skip=1;
    int oskip=aop->descr->elsize;
    for(i=0; i<n; i++, ip+=skip, op+=oskip) {
        temp = CLONGDOUBLE_getitem((char *)ip, aip);
        if (temp==NULL) {
            Py_INCREF(Py_False);
            temp = Py_False;
        }
        VOID_setitem(temp,(char *)op, aop);
        Py_DECREF(temp);
    }
}




/****************** scan *************************************/

/* The first ignore argument is for backwards compatibility.
   Should be removed when the API version is bumped up.
 */

#line 886
static int
SHORT_scan (FILE *fp, short *ip, void *ignore, PyArray_Descr *ignore2)
{
    return fscanf(fp, "%""hd", ip);
}


#line 886
static int
USHORT_scan (FILE *fp, ushort *ip, void *ignore, PyArray_Descr *ignore2)
{
    return fscanf(fp, "%""hu", ip);
}


#line 886
static int
INT_scan (FILE *fp, int *ip, void *ignore, PyArray_Descr *ignore2)
{
    return fscanf(fp, "%""d", ip);
}


#line 886
static int
UINT_scan (FILE *fp, uint *ip, void *ignore, PyArray_Descr *ignore2)
{
    return fscanf(fp, "%""u", ip);
}


#line 886
static int
LONG_scan (FILE *fp, long *ip, void *ignore, PyArray_Descr *ignore2)
{
    return fscanf(fp, "%""ld", ip);
}


#line 886
static int
ULONG_scan (FILE *fp, ulong *ip, void *ignore, PyArray_Descr *ignore2)
{
    return fscanf(fp, "%""lu", ip);
}


#line 886
static int
LONGLONG_scan (FILE *fp, longlong *ip, void *ignore, PyArray_Descr *ignore2)
{
    return fscanf(fp, "%"LONGLONG_FMT, ip);
}


#line 886
static int
ULONGLONG_scan (FILE *fp, ulonglong *ip, void *ignore, PyArray_Descr *ignore2)
{
    return fscanf(fp, "%"ULONGLONG_FMT, ip);
}


#line 886
static int
FLOAT_scan (FILE *fp, float *ip, void *ignore, PyArray_Descr *ignore2)
{
    return fscanf(fp, "%""f", ip);
}


#line 886
static int
DOUBLE_scan (FILE *fp, double *ip, void *ignore, PyArray_Descr *ignore2)
{
    return fscanf(fp, "%""lf", ip);
}


#line 886
static int
LONGDOUBLE_scan (FILE *fp, longdouble *ip, void *ignore, PyArray_Descr *ignore2)
{
    return fscanf(fp, "%""Lf", ip);
}



#line 900
static int
BYTE_scan (FILE *fp, byte *ip, void *ignore, PyArray_Descr *ignore2)
{
    int temp;
    int num;
    num = fscanf(fp, "%""d", &temp);
    *ip = (byte) temp;
    return num;
}

#line 900
static int
UBYTE_scan (FILE *fp, ubyte *ip, void *ignore, PyArray_Descr *ignore2)
{
    uint temp;
    int num;
    num = fscanf(fp, "%""u", &temp);
    *ip = (ubyte) temp;
    return num;
}


static int
BOOL_scan (FILE *fp, Bool *ip, void *ignore, PyArray_Descr *ignore2)
{
    int temp;
    int num;
    num = fscanf(fp, "%d", &temp);
    *ip = (Bool) (temp != 0);
    return num;
}

#line 924
#define CFLOAT_scan NULL

#line 924
#define CDOUBLE_scan NULL

#line 924
#define CLONGDOUBLE_scan NULL

#line 924
#define OBJECT_scan NULL

#line 924
#define STRING_scan NULL

#line 924
#define UNICODE_scan NULL

#line 924
#define VOID_scan NULL


/****************** fromstr *************************************/

#line 935
static int
BYTE_fromstr(char *str, byte *ip, char **endptr, PyArray_Descr *ignore)
{
    long result;

    result = PyOS_strtol(str, endptr, 10);
    *ip = (byte) result;
    return 0;
}

#line 935
static int
UBYTE_fromstr(char *str, ubyte *ip, char **endptr, PyArray_Descr *ignore)
{
    ulong result;

    result = PyOS_strtoul(str, endptr, 10);
    *ip = (ubyte) result;
    return 0;
}

#line 935
static int
SHORT_fromstr(char *str, short *ip, char **endptr, PyArray_Descr *ignore)
{
    long result;

    result = PyOS_strtol(str, endptr, 10);
    *ip = (short) result;
    return 0;
}

#line 935
static int
USHORT_fromstr(char *str, ushort *ip, char **endptr, PyArray_Descr *ignore)
{
    ulong result;

    result = PyOS_strtoul(str, endptr, 10);
    *ip = (ushort) result;
    return 0;
}

#line 935
static int
INT_fromstr(char *str, int *ip, char **endptr, PyArray_Descr *ignore)
{
    long result;

    result = PyOS_strtol(str, endptr, 10);
    *ip = (int) result;
    return 0;
}

#line 935
static int
UINT_fromstr(char *str, uint *ip, char **endptr, PyArray_Descr *ignore)
{
    ulong result;

    result = PyOS_strtoul(str, endptr, 10);
    *ip = (uint) result;
    return 0;
}

#line 935
static int
LONG_fromstr(char *str, long *ip, char **endptr, PyArray_Descr *ignore)
{
    long result;

    result = PyOS_strtol(str, endptr, 10);
    *ip = (long) result;
    return 0;
}

#line 935
static int
ULONG_fromstr(char *str, ulong *ip, char **endptr, PyArray_Descr *ignore)
{
    ulong result;

    result = PyOS_strtoul(str, endptr, 10);
    *ip = (ulong) result;
    return 0;
}

#line 935
static int
LONGLONG_fromstr(char *str, longlong *ip, char **endptr, PyArray_Descr *ignore)
{
    long result;

    result = PyOS_strtol(str, endptr, 10);
    *ip = (longlong) result;
    return 0;
}

#line 935
static int
ULONGLONG_fromstr(char *str, ulonglong *ip, char **endptr, PyArray_Descr *ignore)
{
    ulong result;

    result = PyOS_strtoul(str, endptr, 10);
    *ip = (ulonglong) result;
    return 0;
}


#line 950
#if (PY_VERSION_HEX >= 0x02040000) || defined(PyOS_ascii_strtod)
static int
FLOAT_fromstr(char *str, float *ip, char **endptr, PyArray_Descr *ignore)
{
    double result;

    result = PyOS_ascii_strtod(str, endptr);
    *ip = (float) result;
    return 0;
}
#else
#define FLOAT_fromstr NULL
#endif

#line 950
#if (PY_VERSION_HEX >= 0x02040000) || defined(PyOS_ascii_strtod)
static int
DOUBLE_fromstr(char *str, double *ip, char **endptr, PyArray_Descr *ignore)
{
    double result;

    result = PyOS_ascii_strtod(str, endptr);
    *ip = (double) result;
    return 0;
}
#else
#define DOUBLE_fromstr NULL
#endif

#line 950
#if (PY_VERSION_HEX >= 0x02040000) || defined(PyOS_ascii_strtod)
static int
LONGDOUBLE_fromstr(char *str, longdouble *ip, char **endptr, PyArray_Descr *ignore)
{
    double result;

    result = PyOS_ascii_strtod(str, endptr);
    *ip = (longdouble) result;
    return 0;
}
#else
#define LONGDOUBLE_fromstr NULL
#endif




#line 970
#define BOOL_fromstr NULL

#line 970
#define CFLOAT_fromstr NULL

#line 970
#define CDOUBLE_fromstr NULL

#line 970
#define CLONGDOUBLE_fromstr NULL

#line 970
#define OBJECT_fromstr NULL

#line 970
#define STRING_fromstr NULL

#line 970
#define UNICODE_fromstr NULL

#line 970
#define VOID_fromstr NULL



/****************** copyswapn *************************************/

#line 982
static void
SHORT_copyswapn (void *dst, intp dstride, void *src, intp sstride,
                   intp n, int swap, void *arr)
{
    if (src != NULL) {
        if (sstride == sizeof(short) && dstride == sizeof(short)) {
            memcpy(dst, src, n*sizeof(short));
        }
        else {
            _unaligned_strided_byte_copy(dst, dstride, src, sstride,
                    n, sizeof(short));
        }
    }
    if (swap) {
        _strided_byte_swap(dst, dstride, n, sizeof(short));
    }
}

static void
SHORT_copyswap (void *dst, void *src, int swap, void *arr)
{

    if (src != NULL) /* copy first if needed */
        memcpy(dst, src, sizeof(short));

    if (swap) {
        register char *a, *b, c;
        a = (char *)dst;
#if SIZEOF_SHORT == 2
        b = a + 1;
        c = *a; *a++ = *b; *b = c;
#elif SIZEOF_SHORT == 4
        b = a + 3;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b   = c;
#elif SIZEOF_SHORT == 8
        b = a + 7;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b   = c;
#elif SIZEOF_SHORT == 10
        b = a + 9;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b   = c;
#elif SIZEOF_SHORT == 12
        b = a + 11;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b   = c;
#elif SIZEOF_SHORT == 16
        b = a + 15;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b   = c;
#else
        {
            register int i, nn;
            b = a + (SIZEOF_SHORT-1);
            nn = SIZEOF_SHORT / 2;
            for (i=0; i<nn; i++) {
                c=*a; *a++ = *b; *b-- = c;
            }
        }
#endif
    }
}



#line 982
static void
USHORT_copyswapn (void *dst, intp dstride, void *src, intp sstride,
                   intp n, int swap, void *arr)
{
    if (src != NULL) {
        if (sstride == sizeof(ushort) && dstride == sizeof(ushort)) {
            memcpy(dst, src, n*sizeof(ushort));
        }
        else {
            _unaligned_strided_byte_copy(dst, dstride, src, sstride,
                    n, sizeof(ushort));
        }
    }
    if (swap) {
        _strided_byte_swap(dst, dstride, n, sizeof(ushort));
    }
}

static void
USHORT_copyswap (void *dst, void *src, int swap, void *arr)
{

    if (src != NULL) /* copy first if needed */
        memcpy(dst, src, sizeof(ushort));

    if (swap) {
        register char *a, *b, c;
        a = (char *)dst;
#if SIZEOF_SHORT == 2
        b = a + 1;
        c = *a; *a++ = *b; *b = c;
#elif SIZEOF_SHORT == 4
        b = a + 3;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b   = c;
#elif SIZEOF_SHORT == 8
        b = a + 7;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b   = c;
#elif SIZEOF_SHORT == 10
        b = a + 9;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b   = c;
#elif SIZEOF_SHORT == 12
        b = a + 11;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b   = c;
#elif SIZEOF_SHORT == 16
        b = a + 15;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b   = c;
#else
        {
            register int i, nn;
            b = a + (SIZEOF_SHORT-1);
            nn = SIZEOF_SHORT / 2;
            for (i=0; i<nn; i++) {
                c=*a; *a++ = *b; *b-- = c;
            }
        }
#endif
    }
}



#line 982
static void
INT_copyswapn (void *dst, intp dstride, void *src, intp sstride,
                   intp n, int swap, void *arr)
{
    if (src != NULL) {
        if (sstride == sizeof(int) && dstride == sizeof(int)) {
            memcpy(dst, src, n*sizeof(int));
        }
        else {
            _unaligned_strided_byte_copy(dst, dstride, src, sstride,
                    n, sizeof(int));
        }
    }
    if (swap) {
        _strided_byte_swap(dst, dstride, n, sizeof(int));
    }
}

static void
INT_copyswap (void *dst, void *src, int swap, void *arr)
{

    if (src != NULL) /* copy first if needed */
        memcpy(dst, src, sizeof(int));

    if (swap) {
        register char *a, *b, c;
        a = (char *)dst;
#if SIZEOF_INT == 2
        b = a + 1;
        c = *a; *a++ = *b; *b = c;
#elif SIZEOF_INT == 4
        b = a + 3;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b   = c;
#elif SIZEOF_INT == 8
        b = a + 7;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b   = c;
#elif SIZEOF_INT == 10
        b = a + 9;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b   = c;
#elif SIZEOF_INT == 12
        b = a + 11;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b   = c;
#elif SIZEOF_INT == 16
        b = a + 15;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b   = c;
#else
        {
            register int i, nn;
            b = a + (SIZEOF_INT-1);
            nn = SIZEOF_INT / 2;
            for (i=0; i<nn; i++) {
                c=*a; *a++ = *b; *b-- = c;
            }
        }
#endif
    }
}



#line 982
static void
UINT_copyswapn (void *dst, intp dstride, void *src, intp sstride,
                   intp n, int swap, void *arr)
{
    if (src != NULL) {
        if (sstride == sizeof(uint) && dstride == sizeof(uint)) {
            memcpy(dst, src, n*sizeof(uint));
        }
        else {
            _unaligned_strided_byte_copy(dst, dstride, src, sstride,
                    n, sizeof(uint));
        }
    }
    if (swap) {
        _strided_byte_swap(dst, dstride, n, sizeof(uint));
    }
}

static void
UINT_copyswap (void *dst, void *src, int swap, void *arr)
{

    if (src != NULL) /* copy first if needed */
        memcpy(dst, src, sizeof(uint));

    if (swap) {
        register char *a, *b, c;
        a = (char *)dst;
#if SIZEOF_INT == 2
        b = a + 1;
        c = *a; *a++ = *b; *b = c;
#elif SIZEOF_INT == 4
        b = a + 3;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b   = c;
#elif SIZEOF_INT == 8
        b = a + 7;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b   = c;
#elif SIZEOF_INT == 10
        b = a + 9;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b   = c;
#elif SIZEOF_INT == 12
        b = a + 11;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b   = c;
#elif SIZEOF_INT == 16
        b = a + 15;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b   = c;
#else
        {
            register int i, nn;
            b = a + (SIZEOF_INT-1);
            nn = SIZEOF_INT / 2;
            for (i=0; i<nn; i++) {
                c=*a; *a++ = *b; *b-- = c;
            }
        }
#endif
    }
}



#line 982
static void
LONG_copyswapn (void *dst, intp dstride, void *src, intp sstride,
                   intp n, int swap, void *arr)
{
    if (src != NULL) {
        if (sstride == sizeof(long) && dstride == sizeof(long)) {
            memcpy(dst, src, n*sizeof(long));
        }
        else {
            _unaligned_strided_byte_copy(dst, dstride, src, sstride,
                    n, sizeof(long));
        }
    }
    if (swap) {
        _strided_byte_swap(dst, dstride, n, sizeof(long));
    }
}

static void
LONG_copyswap (void *dst, void *src, int swap, void *arr)
{

    if (src != NULL) /* copy first if needed */
        memcpy(dst, src, sizeof(long));

    if (swap) {
        register char *a, *b, c;
        a = (char *)dst;
#if SIZEOF_LONG == 2
        b = a + 1;
        c = *a; *a++ = *b; *b = c;
#elif SIZEOF_LONG == 4
        b = a + 3;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b   = c;
#elif SIZEOF_LONG == 8
        b = a + 7;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b   = c;
#elif SIZEOF_LONG == 10
        b = a + 9;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b   = c;
#elif SIZEOF_LONG == 12
        b = a + 11;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b   = c;
#elif SIZEOF_LONG == 16
        b = a + 15;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b   = c;
#else
        {
            register int i, nn;
            b = a + (SIZEOF_LONG-1);
            nn = SIZEOF_LONG / 2;
            for (i=0; i<nn; i++) {
                c=*a; *a++ = *b; *b-- = c;
            }
        }
#endif
    }
}



#line 982
static void
ULONG_copyswapn (void *dst, intp dstride, void *src, intp sstride,
                   intp n, int swap, void *arr)
{
    if (src != NULL) {
        if (sstride == sizeof(ulong) && dstride == sizeof(ulong)) {
            memcpy(dst, src, n*sizeof(ulong));
        }
        else {
            _unaligned_strided_byte_copy(dst, dstride, src, sstride,
                    n, sizeof(ulong));
        }
    }
    if (swap) {
        _strided_byte_swap(dst, dstride, n, sizeof(ulong));
    }
}

static void
ULONG_copyswap (void *dst, void *src, int swap, void *arr)
{

    if (src != NULL) /* copy first if needed */
        memcpy(dst, src, sizeof(ulong));

    if (swap) {
        register char *a, *b, c;
        a = (char *)dst;
#if SIZEOF_LONG == 2
        b = a + 1;
        c = *a; *a++ = *b; *b = c;
#elif SIZEOF_LONG == 4
        b = a + 3;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b   = c;
#elif SIZEOF_LONG == 8
        b = a + 7;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b   = c;
#elif SIZEOF_LONG == 10
        b = a + 9;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b   = c;
#elif SIZEOF_LONG == 12
        b = a + 11;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b   = c;
#elif SIZEOF_LONG == 16
        b = a + 15;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b   = c;
#else
        {
            register int i, nn;
            b = a + (SIZEOF_LONG-1);
            nn = SIZEOF_LONG / 2;
            for (i=0; i<nn; i++) {
                c=*a; *a++ = *b; *b-- = c;
            }
        }
#endif
    }
}



#line 982
static void
LONGLONG_copyswapn (void *dst, intp dstride, void *src, intp sstride,
                   intp n, int swap, void *arr)
{
    if (src != NULL) {
        if (sstride == sizeof(longlong) && dstride == sizeof(longlong)) {
            memcpy(dst, src, n*sizeof(longlong));
        }
        else {
            _unaligned_strided_byte_copy(dst, dstride, src, sstride,
                    n, sizeof(longlong));
        }
    }
    if (swap) {
        _strided_byte_swap(dst, dstride, n, sizeof(longlong));
    }
}

static void
LONGLONG_copyswap (void *dst, void *src, int swap, void *arr)
{

    if (src != NULL) /* copy first if needed */
        memcpy(dst, src, sizeof(longlong));

    if (swap) {
        register char *a, *b, c;
        a = (char *)dst;
#if SIZEOF_LONGLONG == 2
        b = a + 1;
        c = *a; *a++ = *b; *b = c;
#elif SIZEOF_LONGLONG == 4
        b = a + 3;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b   = c;
#elif SIZEOF_LONGLONG == 8
        b = a + 7;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b   = c;
#elif SIZEOF_LONGLONG == 10
        b = a + 9;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b   = c;
#elif SIZEOF_LONGLONG == 12
        b = a + 11;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b   = c;
#elif SIZEOF_LONGLONG == 16
        b = a + 15;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b   = c;
#else
        {
            register int i, nn;
            b = a + (SIZEOF_LONGLONG-1);
            nn = SIZEOF_LONGLONG / 2;
            for (i=0; i<nn; i++) {
                c=*a; *a++ = *b; *b-- = c;
            }
        }
#endif
    }
}



#line 982
static void
ULONGLONG_copyswapn (void *dst, intp dstride, void *src, intp sstride,
                   intp n, int swap, void *arr)
{
    if (src != NULL) {
        if (sstride == sizeof(ulonglong) && dstride == sizeof(ulonglong)) {
            memcpy(dst, src, n*sizeof(ulonglong));
        }
        else {
            _unaligned_strided_byte_copy(dst, dstride, src, sstride,
                    n, sizeof(ulonglong));
        }
    }
    if (swap) {
        _strided_byte_swap(dst, dstride, n, sizeof(ulonglong));
    }
}

static void
ULONGLONG_copyswap (void *dst, void *src, int swap, void *arr)
{

    if (src != NULL) /* copy first if needed */
        memcpy(dst, src, sizeof(ulonglong));

    if (swap) {
        register char *a, *b, c;
        a = (char *)dst;
#if SIZEOF_LONGLONG == 2
        b = a + 1;
        c = *a; *a++ = *b; *b = c;
#elif SIZEOF_LONGLONG == 4
        b = a + 3;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b   = c;
#elif SIZEOF_LONGLONG == 8
        b = a + 7;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b   = c;
#elif SIZEOF_LONGLONG == 10
        b = a + 9;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b   = c;
#elif SIZEOF_LONGLONG == 12
        b = a + 11;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b   = c;
#elif SIZEOF_LONGLONG == 16
        b = a + 15;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b   = c;
#else
        {
            register int i, nn;
            b = a + (SIZEOF_LONGLONG-1);
            nn = SIZEOF_LONGLONG / 2;
            for (i=0; i<nn; i++) {
                c=*a; *a++ = *b; *b-- = c;
            }
        }
#endif
    }
}



#line 982
static void
FLOAT_copyswapn (void *dst, intp dstride, void *src, intp sstride,
                   intp n, int swap, void *arr)
{
    if (src != NULL) {
        if (sstride == sizeof(float) && dstride == sizeof(float)) {
            memcpy(dst, src, n*sizeof(float));
        }
        else {
            _unaligned_strided_byte_copy(dst, dstride, src, sstride,
                    n, sizeof(float));
        }
    }
    if (swap) {
        _strided_byte_swap(dst, dstride, n, sizeof(float));
    }
}

static void
FLOAT_copyswap (void *dst, void *src, int swap, void *arr)
{

    if (src != NULL) /* copy first if needed */
        memcpy(dst, src, sizeof(float));

    if (swap) {
        register char *a, *b, c;
        a = (char *)dst;
#if SIZEOF_FLOAT == 2
        b = a + 1;
        c = *a; *a++ = *b; *b = c;
#elif SIZEOF_FLOAT == 4
        b = a + 3;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b   = c;
#elif SIZEOF_FLOAT == 8
        b = a + 7;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b   = c;
#elif SIZEOF_FLOAT == 10
        b = a + 9;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b   = c;
#elif SIZEOF_FLOAT == 12
        b = a + 11;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b   = c;
#elif SIZEOF_FLOAT == 16
        b = a + 15;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b   = c;
#else
        {
            register int i, nn;
            b = a + (SIZEOF_FLOAT-1);
            nn = SIZEOF_FLOAT / 2;
            for (i=0; i<nn; i++) {
                c=*a; *a++ = *b; *b-- = c;
            }
        }
#endif
    }
}



#line 982
static void
DOUBLE_copyswapn (void *dst, intp dstride, void *src, intp sstride,
                   intp n, int swap, void *arr)
{
    if (src != NULL) {
        if (sstride == sizeof(double) && dstride == sizeof(double)) {
            memcpy(dst, src, n*sizeof(double));
        }
        else {
            _unaligned_strided_byte_copy(dst, dstride, src, sstride,
                    n, sizeof(double));
        }
    }
    if (swap) {
        _strided_byte_swap(dst, dstride, n, sizeof(double));
    }
}

static void
DOUBLE_copyswap (void *dst, void *src, int swap, void *arr)
{

    if (src != NULL) /* copy first if needed */
        memcpy(dst, src, sizeof(double));

    if (swap) {
        register char *a, *b, c;
        a = (char *)dst;
#if SIZEOF_DOUBLE == 2
        b = a + 1;
        c = *a; *a++ = *b; *b = c;
#elif SIZEOF_DOUBLE == 4
        b = a + 3;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b   = c;
#elif SIZEOF_DOUBLE == 8
        b = a + 7;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b   = c;
#elif SIZEOF_DOUBLE == 10
        b = a + 9;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b   = c;
#elif SIZEOF_DOUBLE == 12
        b = a + 11;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b   = c;
#elif SIZEOF_DOUBLE == 16
        b = a + 15;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b   = c;
#else
        {
            register int i, nn;
            b = a + (SIZEOF_DOUBLE-1);
            nn = SIZEOF_DOUBLE / 2;
            for (i=0; i<nn; i++) {
                c=*a; *a++ = *b; *b-- = c;
            }
        }
#endif
    }
}



#line 982
static void
LONGDOUBLE_copyswapn (void *dst, intp dstride, void *src, intp sstride,
                   intp n, int swap, void *arr)
{
    if (src != NULL) {
        if (sstride == sizeof(longdouble) && dstride == sizeof(longdouble)) {
            memcpy(dst, src, n*sizeof(longdouble));
        }
        else {
            _unaligned_strided_byte_copy(dst, dstride, src, sstride,
                    n, sizeof(longdouble));
        }
    }
    if (swap) {
        _strided_byte_swap(dst, dstride, n, sizeof(longdouble));
    }
}

static void
LONGDOUBLE_copyswap (void *dst, void *src, int swap, void *arr)
{

    if (src != NULL) /* copy first if needed */
        memcpy(dst, src, sizeof(longdouble));

    if (swap) {
        register char *a, *b, c;
        a = (char *)dst;
#if SIZEOF_LONGDOUBLE == 2
        b = a + 1;
        c = *a; *a++ = *b; *b = c;
#elif SIZEOF_LONGDOUBLE == 4
        b = a + 3;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b   = c;
#elif SIZEOF_LONGDOUBLE == 8
        b = a + 7;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b   = c;
#elif SIZEOF_LONGDOUBLE == 10
        b = a + 9;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b   = c;
#elif SIZEOF_LONGDOUBLE == 12
        b = a + 11;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b   = c;
#elif SIZEOF_LONGDOUBLE == 16
        b = a + 15;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b   = c;
#else
        {
            register int i, nn;
            b = a + (SIZEOF_LONGDOUBLE-1);
            nn = SIZEOF_LONGDOUBLE / 2;
            for (i=0; i<nn; i++) {
                c=*a; *a++ = *b; *b-- = c;
            }
        }
#endif
    }
}




#line 1069
static void
BOOL_copyswapn (void *dst, intp dstride, void *src, intp sstride, intp n,
                   int swap, void *arr)
{
    if (src != NULL) {
        if (sstride == sizeof(Bool) && dstride == sizeof(Bool)) {
            memcpy(dst, src, n*sizeof(Bool));
        }
        else {
            _unaligned_strided_byte_copy(dst, dstride, src, sstride,
                    n, sizeof(Bool));
        }
    }
    /* ignore swap */
}

static void
BOOL_copyswap (void *dst, void *src, int swap, void *arr)
{
    if (src != NULL) /* copy first if needed */
        memcpy(dst, src, sizeof(Bool));
    /* ignore swap */
}


#line 1069
static void
BYTE_copyswapn (void *dst, intp dstride, void *src, intp sstride, intp n,
                   int swap, void *arr)
{
    if (src != NULL) {
        if (sstride == sizeof(byte) && dstride == sizeof(byte)) {
            memcpy(dst, src, n*sizeof(byte));
        }
        else {
            _unaligned_strided_byte_copy(dst, dstride, src, sstride,
                    n, sizeof(byte));
        }
    }
    /* ignore swap */
}

static void
BYTE_copyswap (void *dst, void *src, int swap, void *arr)
{
    if (src != NULL) /* copy first if needed */
        memcpy(dst, src, sizeof(byte));
    /* ignore swap */
}


#line 1069
static void
UBYTE_copyswapn (void *dst, intp dstride, void *src, intp sstride, intp n,
                   int swap, void *arr)
{
    if (src != NULL) {
        if (sstride == sizeof(ubyte) && dstride == sizeof(ubyte)) {
            memcpy(dst, src, n*sizeof(ubyte));
        }
        else {
            _unaligned_strided_byte_copy(dst, dstride, src, sstride,
                    n, sizeof(ubyte));
        }
    }
    /* ignore swap */
}

static void
UBYTE_copyswap (void *dst, void *src, int swap, void *arr)
{
    if (src != NULL) /* copy first if needed */
        memcpy(dst, src, sizeof(ubyte));
    /* ignore swap */
}





#line 1103
static void
CFLOAT_copyswapn (void *dst, intp dstride, void *src, intp sstride, intp n,
                   int swap, void *arr)
{

    if (src != NULL) { /* copy first if needed */
        if (sstride == sizeof(cfloat) && dstride == sizeof(cfloat)) {
            memcpy(dst, src, n*sizeof(cfloat));
        }
        else {
            _unaligned_strided_byte_copy(dst, dstride, src,
                    sstride, n,
                    sizeof(cfloat));
        }
    }

    if (swap) {
        _strided_byte_swap(dst, dstride, n, SIZEOF_FLOAT);
        _strided_byte_swap(((char *)dst + SIZEOF_FLOAT), dstride,
                n, SIZEOF_FLOAT);
    }
}

static void
CFLOAT_copyswap (void *dst, void *src, int swap, void *arr)
{
    if (src != NULL) /* copy first if needed */
        memcpy(dst, src, sizeof(cfloat));

    if (swap) {
        register char *a, *b, c;
        a = (char *)dst;
#if SIZEOF_FLOAT == 4
        b = a + 3;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b   = c;
        a += 2;
        b = a + 3;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b   = c;
#elif SIZEOF_FLOAT == 8
        b = a + 7;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b   = c;
        a += 4;
        b = a + 7;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b   = c;
#elif SIZEOF_FLOAT == 10
        b = a + 9;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b   = c;
        a += 5;
        b = a + 9;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b   = c;
#elif SIZEOF_FLOAT == 12
        b = a + 11;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b   = c;
        a += 6;
        b = a + 11;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b   = c;
#elif SIZEOF_FLOAT == 16
        b = a + 15;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b   = c;
        a += 8;
        b = a + 15;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b   = c;
#else
        {
            register int i, nn;
            b = a + (SIZEOF_FLOAT-1);
            nn = SIZEOF_FLOAT / 2;
            for (i=0; i<nn; i++) {
                c=*a; *a++ = *b; *b-- = c;
            }
            a += nn / 2;
            b = a + (SIZEOF_FLOAT-1);
            nn = SIZEOF_FLOAT / 2;
            for (i=0; i<nn; i++) {
                c=*a; *a++ = *b; *b-- = c;
            }
        }
#endif
    }
}


#line 1103
static void
CDOUBLE_copyswapn (void *dst, intp dstride, void *src, intp sstride, intp n,
                   int swap, void *arr)
{

    if (src != NULL) { /* copy first if needed */
        if (sstride == sizeof(cdouble) && dstride == sizeof(cdouble)) {
            memcpy(dst, src, n*sizeof(cdouble));
        }
        else {
            _unaligned_strided_byte_copy(dst, dstride, src,
                    sstride, n,
                    sizeof(cdouble));
        }
    }

    if (swap) {
        _strided_byte_swap(dst, dstride, n, SIZEOF_DOUBLE);
        _strided_byte_swap(((char *)dst + SIZEOF_DOUBLE), dstride,
                n, SIZEOF_DOUBLE);
    }
}

static void
CDOUBLE_copyswap (void *dst, void *src, int swap, void *arr)
{
    if (src != NULL) /* copy first if needed */
        memcpy(dst, src, sizeof(cdouble));

    if (swap) {
        register char *a, *b, c;
        a = (char *)dst;
#if SIZEOF_DOUBLE == 4
        b = a + 3;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b   = c;
        a += 2;
        b = a + 3;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b   = c;
#elif SIZEOF_DOUBLE == 8
        b = a + 7;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b   = c;
        a += 4;
        b = a + 7;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b   = c;
#elif SIZEOF_DOUBLE == 10
        b = a + 9;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b   = c;
        a += 5;
        b = a + 9;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b   = c;
#elif SIZEOF_DOUBLE == 12
        b = a + 11;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b   = c;
        a += 6;
        b = a + 11;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b   = c;
#elif SIZEOF_DOUBLE == 16
        b = a + 15;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b   = c;
        a += 8;
        b = a + 15;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b   = c;
#else
        {
            register int i, nn;
            b = a + (SIZEOF_DOUBLE-1);
            nn = SIZEOF_DOUBLE / 2;
            for (i=0; i<nn; i++) {
                c=*a; *a++ = *b; *b-- = c;
            }
            a += nn / 2;
            b = a + (SIZEOF_DOUBLE-1);
            nn = SIZEOF_DOUBLE / 2;
            for (i=0; i<nn; i++) {
                c=*a; *a++ = *b; *b-- = c;
            }
        }
#endif
    }
}


#line 1103
static void
CLONGDOUBLE_copyswapn (void *dst, intp dstride, void *src, intp sstride, intp n,
                   int swap, void *arr)
{

    if (src != NULL) { /* copy first if needed */
        if (sstride == sizeof(clongdouble) && dstride == sizeof(clongdouble)) {
            memcpy(dst, src, n*sizeof(clongdouble));
        }
        else {
            _unaligned_strided_byte_copy(dst, dstride, src,
                    sstride, n,
                    sizeof(clongdouble));
        }
    }

    if (swap) {
        _strided_byte_swap(dst, dstride, n, SIZEOF_LONGDOUBLE);
        _strided_byte_swap(((char *)dst + SIZEOF_LONGDOUBLE), dstride,
                n, SIZEOF_LONGDOUBLE);
    }
}

static void
CLONGDOUBLE_copyswap (void *dst, void *src, int swap, void *arr)
{
    if (src != NULL) /* copy first if needed */
        memcpy(dst, src, sizeof(clongdouble));

    if (swap) {
        register char *a, *b, c;
        a = (char *)dst;
#if SIZEOF_LONGDOUBLE == 4
        b = a + 3;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b   = c;
        a += 2;
        b = a + 3;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b   = c;
#elif SIZEOF_LONGDOUBLE == 8
        b = a + 7;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b   = c;
        a += 4;
        b = a + 7;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b   = c;
#elif SIZEOF_LONGDOUBLE == 10
        b = a + 9;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b   = c;
        a += 5;
        b = a + 9;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b   = c;
#elif SIZEOF_LONGDOUBLE == 12
        b = a + 11;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b   = c;
        a += 6;
        b = a + 11;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b   = c;
#elif SIZEOF_LONGDOUBLE == 16
        b = a + 15;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b   = c;
        a += 8;
        b = a + 15;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b   = c;
#else
        {
            register int i, nn;
            b = a + (SIZEOF_LONGDOUBLE-1);
            nn = SIZEOF_LONGDOUBLE / 2;
            for (i=0; i<nn; i++) {
                c=*a; *a++ = *b; *b-- = c;
            }
            a += nn / 2;
            b = a + (SIZEOF_LONGDOUBLE-1);
            nn = SIZEOF_LONGDOUBLE / 2;
            for (i=0; i<nn; i++) {
                c=*a; *a++ = *b; *b-- = c;
            }
        }
#endif
    }
}



#define __ALIGNED(obj, sz) ((((size_t) obj) % (sz))==0)
static void
OBJECT_copyswapn (PyObject **dst, intp dstride, PyObject **src, intp sstride,
                  register intp n, int swap, void *arr)
{
    register intp i;
    if (src != NULL) {
        dstride /= sizeof(PyObject **);
        sstride /= sizeof(PyObject **);
        if (__ALIGNED(dst,sizeof(PyObject **)) && __ALIGNED(src, sizeof(PyObject **))) {
            for (i=0; i<n; i++) {
                Py_XINCREF(*src);
                Py_XDECREF(*dst);
                *dst = *src;
                dst += dstride;
                src += sstride;
            }
        }
        else {
            PyObject **dp, **sp;
            for (i=0; i<n; i++) {
                dp = dst;
                sp = src;
                Py_XINCREF(*sp);
                Py_XDECREF(*dp);
                memcpy(dst, src, sizeof(PyObject *));
                dst += dstride;
                src += sstride;
            }
        }
    }
    /* ignore swap */
    return;
}

static void
OBJECT_copyswap(PyObject **dst, PyObject **src, int swap, void *arr)
{

    if (src != NULL) {
        if (__ALIGNED(dst,sizeof(PyObject **)) && __ALIGNED(src,sizeof(PyObject **))) {
            Py_XINCREF(*src);
            Py_XDECREF(*dst);
            *dst = *src;
        }
        else {
            PyObject **dp=dst, **sp=src;
            Py_XINCREF(*sp);
            Py_XDECREF(*dp);
            memcpy(dst, src, sizeof(PyObject *));
        }
    }
}

/* ignore swap */
static void
STRING_copyswapn (char *dst, intp dstride, char *src, intp sstride,
                  intp n, int swap, PyArrayObject *arr)
{
    if (src != NULL && arr != NULL) {
        int itemsize = arr->descr->elsize;
        if (dstride == itemsize && sstride == itemsize) {
            memcpy(dst, src, itemsize * n);
        }
        else {
            _unaligned_strided_byte_copy(dst, dstride, src, sstride, n, itemsize);
        }
    }
    return;
}

/* */
static void
VOID_copyswapn (char *dst, intp dstride, char *src, intp sstride,
                intp n, int swap, PyArrayObject *arr)
{
    if (arr == NULL) return;
    if (PyArray_HASFIELDS(arr)) {
        PyObject *key, *value, *title=NULL;
        PyArray_Descr *new, *descr;
        int offset;
        Py_ssize_t pos=0;
        descr = arr->descr;
        while (PyDict_Next(descr->fields, &pos, &key, &value)) {
            if (!PyArg_ParseTuple(value, "Oi|O", &new, &offset,
                        &title)) {
                arr->descr=descr;return;
            }
            arr->descr = new;
            new->f->copyswapn(dst+offset, dstride,
                    (src != NULL ? src+offset : NULL),
                    sstride, n, swap, arr);
        }
        arr->descr = descr;
        return;
    }
    if (swap && arr->descr->subarray != NULL) {
        PyArray_Descr *descr, *new;
        npy_intp num;
        npy_intp i;
        int subitemsize;
        char *dstptr, *srcptr;
        descr = arr->descr;
        new = descr->subarray->base;
        arr->descr = new;
        dstptr = dst;
        srcptr = src;
        subitemsize = new->elsize;
        num = descr->elsize / subitemsize;
        for (i=0; i<n; i++) {
            new->f->copyswapn(dstptr, subitemsize, srcptr,
                    subitemsize, num, swap, arr);
            dstptr += dstride;
            if (srcptr) srcptr += sstride;
        }
        arr->descr = descr;
        return;
    }
    if (src != NULL) {
        memcpy(dst, src, arr->descr->elsize * n);
    }
    return;
}

static void
VOID_copyswap (char *dst, char *src, int swap, PyArrayObject *arr)
{
    if (arr==NULL) return;
    if (PyArray_HASFIELDS(arr)) {
        PyObject *key, *value, *title=NULL;
        PyArray_Descr *new, *descr;
        int offset;
        Py_ssize_t pos=0;
        descr = arr->descr;  /* Save it */
        while (PyDict_Next(descr->fields, &pos, &key, &value)) {
            if (!PyArg_ParseTuple(value, "Oi|O", &new, &offset,
                        &title)) {
                arr->descr=descr;return;
            }
            arr->descr = new;
            new->f->copyswap(dst+offset,
                    (src != NULL ? src+offset : NULL),
                    swap, arr);
        }
        arr->descr = descr;
        return;
    }
    if (swap && arr->descr->subarray != NULL) {
        PyArray_Descr *descr, *new;
        npy_intp num;
        int itemsize;
        descr = arr->descr;
        new = descr->subarray->base;
        arr->descr = new;
        itemsize = new->elsize;
        num = descr->elsize / itemsize;
        new->f->copyswapn(dst, itemsize, src,
                itemsize, num, swap, arr);
        arr->descr = descr;
        return;
    }
    if (src != NULL) {
        memcpy(dst, src, arr->descr->elsize);
    }
    return;
}


static void
UNICODE_copyswapn (char *dst, intp dstride, char *src, intp sstride,
                   intp n, int swap, PyArrayObject *arr)
{
    int itemsize;
    if (arr==NULL) return;
    itemsize = arr->descr->elsize;
    if (src != NULL) {
        if (dstride == itemsize && sstride == itemsize)
            memcpy(dst, src, n * itemsize);
        else
            _unaligned_strided_byte_copy(dst, dstride, src,
                    sstride, n, itemsize);
    }

    n *= itemsize;
    if (swap) {
        register char *a, *b, c;
        n >>= 2; /* n is the number of unicode characters to swap */
        for (a = (char *)dst; n>0; n--) {
            b = a + 3;
            c=*a; *a++ = *b; *b-- = c;
            c=*a; *a++ = *b; *b-- = c;
            a += 2;
        }
    }
}


static void
STRING_copyswap (char *dst, char *src, int swap, PyArrayObject *arr)
{
    if (src != NULL && arr != NULL) {
        memcpy(dst, src, arr->descr->elsize);
    }
}

static void
UNICODE_copyswap (char *dst, char *src, int swap, PyArrayObject *arr)
{
    int itemsize;
    if (arr == NULL) return;
    itemsize = arr->descr->elsize;
    if (src != NULL) {
        memcpy(dst, src, itemsize);
    }

    if (swap) {
        register char *a, *b, c;
        itemsize >>= 2;
        for (a = (char *)dst; itemsize>0; itemsize--) {
            b = a + 3;
            c=*a; *a++ = *b; *b-- = c;
            c=*a; *a++ = *b; *b-- = c;
            a += 2;
        }
    }
}


/****************** nonzero **********************************/

#line 1460
static Bool
BOOL_nonzero (Bool *ip, PyArrayObject *ap)
{
    Bool t1;
    if (ap==NULL || PyArray_ISBEHAVED_RO(ap))
        return (Bool) (*ip != 0);
    else {
        /* don't worry about swap, since we are just testing
           whether or not equal to 0 */
        memcpy(&t1, ip, sizeof(Bool));
        return (Bool) (t1 != 0);
    }
}

#line 1460
static Bool
BYTE_nonzero (byte *ip, PyArrayObject *ap)
{
    byte t1;
    if (ap==NULL || PyArray_ISBEHAVED_RO(ap))
        return (Bool) (*ip != 0);
    else {
        /* don't worry about swap, since we are just testing
           whether or not equal to 0 */
        memcpy(&t1, ip, sizeof(byte));
        return (Bool) (t1 != 0);
    }
}

#line 1460
static Bool
UBYTE_nonzero (ubyte *ip, PyArrayObject *ap)
{
    ubyte t1;
    if (ap==NULL || PyArray_ISBEHAVED_RO(ap))
        return (Bool) (*ip != 0);
    else {
        /* don't worry about swap, since we are just testing
           whether or not equal to 0 */
        memcpy(&t1, ip, sizeof(ubyte));
        return (Bool) (t1 != 0);
    }
}

#line 1460
static Bool
SHORT_nonzero (short *ip, PyArrayObject *ap)
{
    short t1;
    if (ap==NULL || PyArray_ISBEHAVED_RO(ap))
        return (Bool) (*ip != 0);
    else {
        /* don't worry about swap, since we are just testing
           whether or not equal to 0 */
        memcpy(&t1, ip, sizeof(short));
        return (Bool) (t1 != 0);
    }
}

#line 1460
static Bool
USHORT_nonzero (ushort *ip, PyArrayObject *ap)
{
    ushort t1;
    if (ap==NULL || PyArray_ISBEHAVED_RO(ap))
        return (Bool) (*ip != 0);
    else {
        /* don't worry about swap, since we are just testing
           whether or not equal to 0 */
        memcpy(&t1, ip, sizeof(ushort));
        return (Bool) (t1 != 0);
    }
}

#line 1460
static Bool
INT_nonzero (int *ip, PyArrayObject *ap)
{
    int t1;
    if (ap==NULL || PyArray_ISBEHAVED_RO(ap))
        return (Bool) (*ip != 0);
    else {
        /* don't worry about swap, since we are just testing
           whether or not equal to 0 */
        memcpy(&t1, ip, sizeof(int));
        return (Bool) (t1 != 0);
    }
}

#line 1460
static Bool
UINT_nonzero (uint *ip, PyArrayObject *ap)
{
    uint t1;
    if (ap==NULL || PyArray_ISBEHAVED_RO(ap))
        return (Bool) (*ip != 0);
    else {
        /* don't worry about swap, since we are just testing
           whether or not equal to 0 */
        memcpy(&t1, ip, sizeof(uint));
        return (Bool) (t1 != 0);
    }
}

#line 1460
static Bool
LONG_nonzero (long *ip, PyArrayObject *ap)
{
    long t1;
    if (ap==NULL || PyArray_ISBEHAVED_RO(ap))
        return (Bool) (*ip != 0);
    else {
        /* don't worry about swap, since we are just testing
           whether or not equal to 0 */
        memcpy(&t1, ip, sizeof(long));
        return (Bool) (t1 != 0);
    }
}

#line 1460
static Bool
ULONG_nonzero (ulong *ip, PyArrayObject *ap)
{
    ulong t1;
    if (ap==NULL || PyArray_ISBEHAVED_RO(ap))
        return (Bool) (*ip != 0);
    else {
        /* don't worry about swap, since we are just testing
           whether or not equal to 0 */
        memcpy(&t1, ip, sizeof(ulong));
        return (Bool) (t1 != 0);
    }
}

#line 1460
static Bool
LONGLONG_nonzero (longlong *ip, PyArrayObject *ap)
{
    longlong t1;
    if (ap==NULL || PyArray_ISBEHAVED_RO(ap))
        return (Bool) (*ip != 0);
    else {
        /* don't worry about swap, since we are just testing
           whether or not equal to 0 */
        memcpy(&t1, ip, sizeof(longlong));
        return (Bool) (t1 != 0);
    }
}

#line 1460
static Bool
ULONGLONG_nonzero (ulonglong *ip, PyArrayObject *ap)
{
    ulonglong t1;
    if (ap==NULL || PyArray_ISBEHAVED_RO(ap))
        return (Bool) (*ip != 0);
    else {
        /* don't worry about swap, since we are just testing
           whether or not equal to 0 */
        memcpy(&t1, ip, sizeof(ulonglong));
        return (Bool) (t1 != 0);
    }
}

#line 1460
static Bool
FLOAT_nonzero (float *ip, PyArrayObject *ap)
{
    float t1;
    if (ap==NULL || PyArray_ISBEHAVED_RO(ap))
        return (Bool) (*ip != 0);
    else {
        /* don't worry about swap, since we are just testing
           whether or not equal to 0 */
        memcpy(&t1, ip, sizeof(float));
        return (Bool) (t1 != 0);
    }
}

#line 1460
static Bool
DOUBLE_nonzero (double *ip, PyArrayObject *ap)
{
    double t1;
    if (ap==NULL || PyArray_ISBEHAVED_RO(ap))
        return (Bool) (*ip != 0);
    else {
        /* don't worry about swap, since we are just testing
           whether or not equal to 0 */
        memcpy(&t1, ip, sizeof(double));
        return (Bool) (t1 != 0);
    }
}

#line 1460
static Bool
LONGDOUBLE_nonzero (longdouble *ip, PyArrayObject *ap)
{
    longdouble t1;
    if (ap==NULL || PyArray_ISBEHAVED_RO(ap))
        return (Bool) (*ip != 0);
    else {
        /* don't worry about swap, since we are just testing
           whether or not equal to 0 */
        memcpy(&t1, ip, sizeof(longdouble));
        return (Bool) (t1 != 0);
    }
}


#line 1479
static Bool
CFLOAT_nonzero (cfloat *ip, PyArrayObject *ap)
{
    cfloat t1;
    if (ap==NULL || PyArray_ISBEHAVED_RO(ap))
        return (Bool) ((ip->real != 0) || (ip->imag != 0));
    else {
        /* don't worry about swap, since we are just testing
           whether or not equal to 0 */
        memcpy(&t1, ip, sizeof(cfloat));
        return (Bool) ((t1.real != 0) || (t1.imag != 0));
    }
}

#line 1479
static Bool
CDOUBLE_nonzero (cdouble *ip, PyArrayObject *ap)
{
    cdouble t1;
    if (ap==NULL || PyArray_ISBEHAVED_RO(ap))
        return (Bool) ((ip->real != 0) || (ip->imag != 0));
    else {
        /* don't worry about swap, since we are just testing
           whether or not equal to 0 */
        memcpy(&t1, ip, sizeof(cdouble));
        return (Bool) ((t1.real != 0) || (t1.imag != 0));
    }
}

#line 1479
static Bool
CLONGDOUBLE_nonzero (clongdouble *ip, PyArrayObject *ap)
{
    clongdouble t1;
    if (ap==NULL || PyArray_ISBEHAVED_RO(ap))
        return (Bool) ((ip->real != 0) || (ip->imag != 0));
    else {
        /* don't worry about swap, since we are just testing
           whether or not equal to 0 */
        memcpy(&t1, ip, sizeof(clongdouble));
        return (Bool) ((t1.real != 0) || (t1.imag != 0));
    }
}



#define WHITESPACE " \t\n\r\v\f"
#define WHITELEN 6

static Bool
Py_STRING_ISSPACE(char ch)
{
    char white[] = WHITESPACE;
    int j;
    Bool space=FALSE;
    for (j=0; j<WHITELEN; j++) {
        if (ch == white[j]) {
            space=TRUE;
            break;
        }
    }
    return space;
}

static Bool
STRING_nonzero (char *ip, PyArrayObject *ap)
{
    int len = ap->descr->elsize;
    int i;
    Bool nonz = FALSE;

    for (i=0; i<len; i++) {
        if (!Py_STRING_ISSPACE(*ip)) {
            nonz = TRUE;
            break;
        }
        ip++;
    }
    return nonz;
}

#ifdef Py_UNICODE_WIDE
#define PyArray_UCS4_ISSPACE Py_UNICODE_ISSPACE
#else
#define PyArray_UCS4_ISSPACE(ch) Py_STRING_ISSPACE((char)ch)
#endif

static Bool
UNICODE_nonzero (PyArray_UCS4 *ip, PyArrayObject *ap)
{
    int len = ap->descr->elsize >> 2;
    int i;
    Bool nonz = FALSE;
    char *buffer=NULL;

    if ((!PyArray_ISNOTSWAPPED(ap)) || \
            (!PyArray_ISALIGNED(ap))) {
        buffer = _pya_malloc(ap->descr->elsize);
        if (buffer == NULL) {
            return nonz;
        }
        memcpy(buffer, ip, ap->descr->elsize);
        if (!PyArray_ISNOTSWAPPED(ap)) {
            byte_swap_vector(buffer, len, 4);
        }
        ip = (PyArray_UCS4 *)buffer;
    }

    for (i=0; i<len; i++) {
        if (!PyArray_UCS4_ISSPACE(*ip)) {
            nonz = TRUE;
            break;
        }
        ip++;
    }
    _pya_free(buffer);
    return nonz;
}

static Bool
OBJECT_nonzero (PyObject **ip, PyArrayObject *ap)
{

    if (*ip == NULL) return FALSE;
    if (PyArray_ISALIGNED(ap)) {
        return (Bool) PyObject_IsTrue(*ip);
    }
    else {
        PyObject **obj;
        obj = ip;
        return (Bool) PyObject_IsTrue(*obj);
    }
}

/* if we have fields, then nonzero only if all sub-fields are nonzero.
*/
static Bool
VOID_nonzero (char *ip, PyArrayObject *ap)
{
    int i;
    int len;
    Bool nonz = FALSE;

    if (PyArray_HASFIELDS(ap)) {
        PyArray_Descr *descr, *new;
        PyObject *key, *value, *title;
        int savedflags, offset;
        Py_ssize_t pos=0;
        descr = ap->descr;
        savedflags = ap->flags;
        while (PyDict_Next(descr->fields, &pos, &key, &value)) {
            if (!PyArg_ParseTuple(value, "Oi|O", &new, &offset,
                        &title)) {PyErr_Clear(); continue;}
            ap->descr = new;
            ap->flags = savedflags;
            if ((new->alignment > 1) && !__ALIGNED(ip+offset, new->alignment))
                ap->flags &= ~ALIGNED;
            else
                ap->flags |= ALIGNED;
            if (new->f->nonzero(ip+offset, ap)) {
                nonz=TRUE;
                break;
            }
        }
        ap->descr = descr;
        ap->flags = savedflags;
        return nonz;
    }
    len = ap->descr->elsize;
    for (i=0; i<len; i++) {
        if (*ip != '\0') {
            nonz = TRUE;
            break;
        }
        ip++;
    }
    return nonz;
}

#undef __ALIGNED


/****************** compare **********************************/

static int
BOOL_compare(Bool *ip1, Bool *ip2, PyArrayObject *ap)
{
    return (*ip1 ? (*ip2 ? 0 : 1) : (*ip2 ? -1 : 0));
}

#line 1643

static int
BYTE_compare (byte *ip1, byte *ip2, PyArrayObject *ap)
{
    return *ip1 < *ip2 ? -1 : *ip1 == *ip2 ? 0 : 1;
}


#line 1643

static int
UBYTE_compare (ubyte *ip1, ubyte *ip2, PyArrayObject *ap)
{
    return *ip1 < *ip2 ? -1 : *ip1 == *ip2 ? 0 : 1;
}


#line 1643

static int
SHORT_compare (short *ip1, short *ip2, PyArrayObject *ap)
{
    return *ip1 < *ip2 ? -1 : *ip1 == *ip2 ? 0 : 1;
}


#line 1643

static int
USHORT_compare (ushort *ip1, ushort *ip2, PyArrayObject *ap)
{
    return *ip1 < *ip2 ? -1 : *ip1 == *ip2 ? 0 : 1;
}


#line 1643

static int
INT_compare (int *ip1, int *ip2, PyArrayObject *ap)
{
    return *ip1 < *ip2 ? -1 : *ip1 == *ip2 ? 0 : 1;
}


#line 1643

static int
UINT_compare (uint *ip1, uint *ip2, PyArrayObject *ap)
{
    return *ip1 < *ip2 ? -1 : *ip1 == *ip2 ? 0 : 1;
}


#line 1643

static int
LONG_compare (long *ip1, long *ip2, PyArrayObject *ap)
{
    return *ip1 < *ip2 ? -1 : *ip1 == *ip2 ? 0 : 1;
}


#line 1643

static int
ULONG_compare (ulong *ip1, ulong *ip2, PyArrayObject *ap)
{
    return *ip1 < *ip2 ? -1 : *ip1 == *ip2 ? 0 : 1;
}


#line 1643

static int
LONGLONG_compare (longlong *ip1, longlong *ip2, PyArrayObject *ap)
{
    return *ip1 < *ip2 ? -1 : *ip1 == *ip2 ? 0 : 1;
}


#line 1643

static int
ULONGLONG_compare (ulonglong *ip1, ulonglong *ip2, PyArrayObject *ap)
{
    return *ip1 < *ip2 ? -1 : *ip1 == *ip2 ? 0 : 1;
}


#line 1643

static int
FLOAT_compare (float *ip1, float *ip2, PyArrayObject *ap)
{
    return *ip1 < *ip2 ? -1 : *ip1 == *ip2 ? 0 : 1;
}


#line 1643

static int
DOUBLE_compare (double *ip1, double *ip2, PyArrayObject *ap)
{
    return *ip1 < *ip2 ? -1 : *ip1 == *ip2 ? 0 : 1;
}


#line 1643

static int
LONGDOUBLE_compare (longdouble *ip1, longdouble *ip2, PyArrayObject *ap)
{
    return *ip1 < *ip2 ? -1 : *ip1 == *ip2 ? 0 : 1;
}



/* compare imaginary part first, then complex if equal imaginary  */
#line 1657

static int
CFLOAT_compare (float *ip1, float *ip2, PyArrayObject *ap)
{
    if (*ip1 == *ip2) {
        return ip1[1]<ip2[1] ? -1 : (ip1[1] == ip2[1] ? 0 : 1);
    }
    else {
        return *ip1 < *ip2 ? -1 : 1;
    }
}
 
#line 1657

static int
CDOUBLE_compare (double *ip1, double *ip2, PyArrayObject *ap)
{
    if (*ip1 == *ip2) {
        return ip1[1]<ip2[1] ? -1 : (ip1[1] == ip2[1] ? 0 : 1);
    }
    else {
        return *ip1 < *ip2 ? -1 : 1;
    }
}
 
#line 1657

static int
CLONGDOUBLE_compare (longdouble *ip1, longdouble *ip2, PyArrayObject *ap)
{
    if (*ip1 == *ip2) {
        return ip1[1]<ip2[1] ? -1 : (ip1[1] == ip2[1] ? 0 : 1);
    }
    else {
        return *ip1 < *ip2 ? -1 : 1;
    }
}
 

static int
OBJECT_compare(PyObject **ip1, PyObject **ip2, PyArrayObject *ap)
{
    if ((*ip1 == NULL) || (*ip2 == NULL)) {
        if (ip1 == ip2) return 1;
        if (ip1 == NULL) return -1;
        return 1;
    }
    return PyObject_Compare(*ip1, *ip2);
}

static int
STRING_compare(char *ip1, char *ip2, PyArrayObject *ap)
{
    const unsigned char *c1 = (unsigned char *)ip1;
    const unsigned char *c2 = (unsigned char *)ip2;
    const size_t len = ap->descr->elsize;
    size_t i;

    for(i = 0; i < len; ++i) {
        if (c1[i] != c2[i]) {
            return (c1[i] > c2[i]) ? 1 : -1;
        }
    }
    return 0;
}

/* taken from Python */
static int
UNICODE_compare(register PyArray_UCS4 *ip1, register PyArray_UCS4 *ip2,
                PyArrayObject *ap)
{
    register int itemsize=ap->descr->elsize;
    register PyArray_UCS4 c1, c2;

    if (itemsize < 0) return 0;

    while(itemsize-- > 0) {
        c1 = *ip1++;
        c2 = *ip2++;

        if (c1 != c2)
            return (c1 < c2) ? -1 : 1;
    }
    return 0;
}

/* If fields are defined, then compare on first field and if equal
   compare on second field.  Continue until done or comparison results
   in not_equal.

   Must align data passed on to sub-comparisons.
*/

static int
VOID_compare(char *ip1, char *ip2, PyArrayObject *ap)
{
    PyArray_Descr *descr, *new;
    PyObject *names, *key;
    PyObject *tup, *title;
    char *nip1, *nip2;
    int i, offset, res=0;

    if (!PyArray_HASFIELDS(ap))
        return STRING_compare(ip1, ip2, ap);

    descr = ap->descr;
    /* Compare on the first-field.  If equal, then
       compare on the second-field, etc.
     */
    names = descr->names;
    for (i=0; i<PyTuple_GET_SIZE(names); i++) {
        key = PyTuple_GET_ITEM(names, i);
        tup = PyDict_GetItem(descr->fields, key);
        if (!PyArg_ParseTuple(tup, "Oi|O", &new, &offset,
                    &title)) {
            goto finish;
        }
        ap->descr = new;
        nip1 = ip1+offset;
        nip2 = ip2+offset;
        if (new->alignment > 1) {
            if (((intp)(nip1) % new->alignment) != 0) {
                /* create buffer and copy */
                nip1 = _pya_malloc(new->elsize);
                if (nip1 == NULL) goto finish;
                memcpy(nip1, ip1+offset, new->elsize);
            }
            if (((intp)(nip2) % new->alignment) != 0) {
                /* copy data to a buffer */
                nip2 = _pya_malloc(new->elsize);
                if (nip2 == NULL) {
                    if (nip1 != ip1+offset)
                        _pya_free(nip1);
                    goto finish;
                }
                memcpy(nip2, ip2+offset, new->elsize);
            }
        }
        res = new->f->compare(nip1, nip2, ap);
        if (new->alignment > 1) {
            if (nip1 != ip1+offset) {
                _pya_free(nip1);
            }
            if (nip2 != ip2+offset) {
                _pya_free(nip2);
            }
        }
        if (res != 0) break;
    }

finish:
    ap->descr = descr;
    return res;
}

/****************** argfunc **********************************/

#line 1794

static int
BOOL_argmax(Bool *ip, intp n, intp *max_ind, PyArrayObject *aip)
{
    register intp i;
    Bool mp=*ip;
    *max_ind=0;
    for (i=1; i<n; i++) {
        ip++;
        if (*ip > mp) {
            mp = *ip;
            *max_ind = i;
        }
    }
    return 0;
}


#line 1794

static int
BYTE_argmax(byte *ip, intp n, intp *max_ind, PyArrayObject *aip)
{
    register intp i;
    byte mp=*ip;
    *max_ind=0;
    for (i=1; i<n; i++) {
        ip++;
        if (*ip > mp) {
            mp = *ip;
            *max_ind = i;
        }
    }
    return 0;
}


#line 1794

static int
UBYTE_argmax(ubyte *ip, intp n, intp *max_ind, PyArrayObject *aip)
{
    register intp i;
    ubyte mp=*ip;
    *max_ind=0;
    for (i=1; i<n; i++) {
        ip++;
        if (*ip > mp) {
            mp = *ip;
            *max_ind = i;
        }
    }
    return 0;
}


#line 1794

static int
SHORT_argmax(short *ip, intp n, intp *max_ind, PyArrayObject *aip)
{
    register intp i;
    short mp=*ip;
    *max_ind=0;
    for (i=1; i<n; i++) {
        ip++;
        if (*ip > mp) {
            mp = *ip;
            *max_ind = i;
        }
    }
    return 0;
}


#line 1794

static int
USHORT_argmax(ushort *ip, intp n, intp *max_ind, PyArrayObject *aip)
{
    register intp i;
    ushort mp=*ip;
    *max_ind=0;
    for (i=1; i<n; i++) {
        ip++;
        if (*ip > mp) {
            mp = *ip;
            *max_ind = i;
        }
    }
    return 0;
}


#line 1794

static int
INT_argmax(int *ip, intp n, intp *max_ind, PyArrayObject *aip)
{
    register intp i;
    int mp=*ip;
    *max_ind=0;
    for (i=1; i<n; i++) {
        ip++;
        if (*ip > mp) {
            mp = *ip;
            *max_ind = i;
        }
    }
    return 0;
}


#line 1794

static int
UINT_argmax(uint *ip, intp n, intp *max_ind, PyArrayObject *aip)
{
    register intp i;
    uint mp=*ip;
    *max_ind=0;
    for (i=1; i<n; i++) {
        ip++;
        if (*ip > mp) {
            mp = *ip;
            *max_ind = i;
        }
    }
    return 0;
}


#line 1794

static int
LONG_argmax(long *ip, intp n, intp *max_ind, PyArrayObject *aip)
{
    register intp i;
    long mp=*ip;
    *max_ind=0;
    for (i=1; i<n; i++) {
        ip++;
        if (*ip > mp) {
            mp = *ip;
            *max_ind = i;
        }
    }
    return 0;
}


#line 1794

static int
ULONG_argmax(ulong *ip, intp n, intp *max_ind, PyArrayObject *aip)
{
    register intp i;
    ulong mp=*ip;
    *max_ind=0;
    for (i=1; i<n; i++) {
        ip++;
        if (*ip > mp) {
            mp = *ip;
            *max_ind = i;
        }
    }
    return 0;
}


#line 1794

static int
LONGLONG_argmax(longlong *ip, intp n, intp *max_ind, PyArrayObject *aip)
{
    register intp i;
    longlong mp=*ip;
    *max_ind=0;
    for (i=1; i<n; i++) {
        ip++;
        if (*ip > mp) {
            mp = *ip;
            *max_ind = i;
        }
    }
    return 0;
}


#line 1794

static int
ULONGLONG_argmax(ulonglong *ip, intp n, intp *max_ind, PyArrayObject *aip)
{
    register intp i;
    ulonglong mp=*ip;
    *max_ind=0;
    for (i=1; i<n; i++) {
        ip++;
        if (*ip > mp) {
            mp = *ip;
            *max_ind = i;
        }
    }
    return 0;
}


#line 1794

static int
FLOAT_argmax(float *ip, intp n, intp *max_ind, PyArrayObject *aip)
{
    register intp i;
    float mp=*ip;
    *max_ind=0;
    for (i=1; i<n; i++) {
        ip++;
        if (*ip > mp) {
            mp = *ip;
            *max_ind = i;
        }
    }
    return 0;
}


#line 1794

static int
DOUBLE_argmax(double *ip, intp n, intp *max_ind, PyArrayObject *aip)
{
    register intp i;
    double mp=*ip;
    *max_ind=0;
    for (i=1; i<n; i++) {
        ip++;
        if (*ip > mp) {
            mp = *ip;
            *max_ind = i;
        }
    }
    return 0;
}


#line 1794

static int
LONGDOUBLE_argmax(longdouble *ip, intp n, intp *max_ind, PyArrayObject *aip)
{
    register intp i;
    longdouble mp=*ip;
    *max_ind=0;
    for (i=1; i<n; i++) {
        ip++;
        if (*ip > mp) {
            mp = *ip;
            *max_ind = i;
        }
    }
    return 0;
}


#line 1794

static int
CFLOAT_argmax(float *ip, intp n, intp *max_ind, PyArrayObject *aip)
{
    register intp i;
    float mp=*ip;
    *max_ind=0;
    for (i=1; i<n; i++) {
        ip+=2;
        if (*ip > mp) {
            mp = *ip;
            *max_ind = i;
        }
    }
    return 0;
}


#line 1794

static int
CDOUBLE_argmax(double *ip, intp n, intp *max_ind, PyArrayObject *aip)
{
    register intp i;
    double mp=*ip;
    *max_ind=0;
    for (i=1; i<n; i++) {
        ip+=2;
        if (*ip > mp) {
            mp = *ip;
            *max_ind = i;
        }
    }
    return 0;
}


#line 1794

static int
CLONGDOUBLE_argmax(longdouble *ip, intp n, intp *max_ind, PyArrayObject *aip)
{
    register intp i;
    longdouble mp=*ip;
    *max_ind=0;
    for (i=1; i<n; i++) {
        ip+=2;
        if (*ip > mp) {
            mp = *ip;
            *max_ind = i;
        }
    }
    return 0;
}



static int
OBJECT_argmax(PyObject **ip, intp n, intp *max_ind, PyArrayObject *aip)
{
    register intp i;
    PyObject *mp=ip[0]; *max_ind=0;
    i = 1;
    while(i<n && mp==NULL) {
        mp=ip[i];
        i++;
    }
    for(; i<n; i++) {
        ip++;
        if (*ip != NULL && PyObject_Compare(*ip,mp) > 0) {
            mp = *ip;
            *max_ind=i;
        }
    }
    return 0;
}

#line 1839
static int
STRING_argmax(char *ip, intp n, intp *max_ind, PyArrayObject *aip)
{
    register intp i;
    int elsize = aip->descr->elsize;
    char *mp = (char *)_pya_malloc(elsize);

    if (mp==NULL) return 0;
    memcpy(mp, ip, elsize);
    *max_ind = 0;
    for(i=1; i<n; i++) {
        ip += elsize;
        if (STRING_compare(ip,mp,aip) > 0) {
            memcpy(mp, ip, elsize);
            *max_ind=i;
        }
    }
    _pya_free(mp);
    return 0;
}


#line 1839
static int
UNICODE_argmax(PyArray_UCS4 *ip, intp n, intp *max_ind, PyArrayObject *aip)
{
    register intp i;
    int elsize = aip->descr->elsize;
    PyArray_UCS4 *mp = (PyArray_UCS4 *)_pya_malloc(elsize);

    if (mp==NULL) return 0;
    memcpy(mp, ip, elsize);
    *max_ind = 0;
    for(i=1; i<n; i++) {
        ip += elsize;
        if (UNICODE_compare(ip,mp,aip) > 0) {
            memcpy(mp, ip, elsize);
            *max_ind=i;
        }
    }
    _pya_free(mp);
    return 0;
}



#define VOID_argmax NULL

static void
BOOL_dot(char *ip1, intp is1, char *ip2, intp is2, char *op, intp n,
         void *ignore)
{
    register Bool tmp=FALSE;
    register intp i;
    for(i=0;i<n;i++,ip1+=is1,ip2+=is2) {
        if ((*((Bool *)ip1) != 0) && (*((Bool *)ip2) != 0)) {
            tmp = TRUE;
            break;
        }
    }
    *((Bool *)op) = tmp;
}

#line 1884
static void
BYTE_dot(char *ip1, intp is1, char *ip2, intp is2, char *op, intp n,
           void *ignore)
{
    register long tmp=(long)0;
    register intp i;
    for(i=0;i<n;i++,ip1+=is1,ip2+=is2) {
        tmp += (long)(*((byte *)ip1)) * \
               (long)(*((byte *)ip2));
    }
    *((byte *)op) = (byte) tmp;
}

#line 1884
static void
UBYTE_dot(char *ip1, intp is1, char *ip2, intp is2, char *op, intp n,
           void *ignore)
{
    register ulong tmp=(ulong)0;
    register intp i;
    for(i=0;i<n;i++,ip1+=is1,ip2+=is2) {
        tmp += (ulong)(*((ubyte *)ip1)) * \
               (ulong)(*((ubyte *)ip2));
    }
    *((ubyte *)op) = (ubyte) tmp;
}

#line 1884
static void
SHORT_dot(char *ip1, intp is1, char *ip2, intp is2, char *op, intp n,
           void *ignore)
{
    register long tmp=(long)0;
    register intp i;
    for(i=0;i<n;i++,ip1+=is1,ip2+=is2) {
        tmp += (long)(*((short *)ip1)) * \
               (long)(*((short *)ip2));
    }
    *((short *)op) = (short) tmp;
}

#line 1884
static void
USHORT_dot(char *ip1, intp is1, char *ip2, intp is2, char *op, intp n,
           void *ignore)
{
    register ulong tmp=(ulong)0;
    register intp i;
    for(i=0;i<n;i++,ip1+=is1,ip2+=is2) {
        tmp += (ulong)(*((ushort *)ip1)) * \
               (ulong)(*((ushort *)ip2));
    }
    *((ushort *)op) = (ushort) tmp;
}

#line 1884
static void
INT_dot(char *ip1, intp is1, char *ip2, intp is2, char *op, intp n,
           void *ignore)
{
    register long tmp=(long)0;
    register intp i;
    for(i=0;i<n;i++,ip1+=is1,ip2+=is2) {
        tmp += (long)(*((int *)ip1)) * \
               (long)(*((int *)ip2));
    }
    *((int *)op) = (int) tmp;
}

#line 1884
static void
UINT_dot(char *ip1, intp is1, char *ip2, intp is2, char *op, intp n,
           void *ignore)
{
    register ulong tmp=(ulong)0;
    register intp i;
    for(i=0;i<n;i++,ip1+=is1,ip2+=is2) {
        tmp += (ulong)(*((uint *)ip1)) * \
               (ulong)(*((uint *)ip2));
    }
    *((uint *)op) = (uint) tmp;
}

#line 1884
static void
LONG_dot(char *ip1, intp is1, char *ip2, intp is2, char *op, intp n,
           void *ignore)
{
    register long tmp=(long)0;
    register intp i;
    for(i=0;i<n;i++,ip1+=is1,ip2+=is2) {
        tmp += (long)(*((long *)ip1)) * \
               (long)(*((long *)ip2));
    }
    *((long *)op) = (long) tmp;
}

#line 1884
static void
ULONG_dot(char *ip1, intp is1, char *ip2, intp is2, char *op, intp n,
           void *ignore)
{
    register ulong tmp=(ulong)0;
    register intp i;
    for(i=0;i<n;i++,ip1+=is1,ip2+=is2) {
        tmp += (ulong)(*((ulong *)ip1)) * \
               (ulong)(*((ulong *)ip2));
    }
    *((ulong *)op) = (ulong) tmp;
}

#line 1884
static void
LONGLONG_dot(char *ip1, intp is1, char *ip2, intp is2, char *op, intp n,
           void *ignore)
{
    register longlong tmp=(longlong)0;
    register intp i;
    for(i=0;i<n;i++,ip1+=is1,ip2+=is2) {
        tmp += (longlong)(*((longlong *)ip1)) * \
               (longlong)(*((longlong *)ip2));
    }
    *((longlong *)op) = (longlong) tmp;
}

#line 1884
static void
ULONGLONG_dot(char *ip1, intp is1, char *ip2, intp is2, char *op, intp n,
           void *ignore)
{
    register ulonglong tmp=(ulonglong)0;
    register intp i;
    for(i=0;i<n;i++,ip1+=is1,ip2+=is2) {
        tmp += (ulonglong)(*((ulonglong *)ip1)) * \
               (ulonglong)(*((ulonglong *)ip2));
    }
    *((ulonglong *)op) = (ulonglong) tmp;
}

#line 1884
static void
FLOAT_dot(char *ip1, intp is1, char *ip2, intp is2, char *op, intp n,
           void *ignore)
{
    register float tmp=(float)0;
    register intp i;
    for(i=0;i<n;i++,ip1+=is1,ip2+=is2) {
        tmp += (float)(*((float *)ip1)) * \
               (float)(*((float *)ip2));
    }
    *((float *)op) = (float) tmp;
}

#line 1884
static void
DOUBLE_dot(char *ip1, intp is1, char *ip2, intp is2, char *op, intp n,
           void *ignore)
{
    register double tmp=(double)0;
    register intp i;
    for(i=0;i<n;i++,ip1+=is1,ip2+=is2) {
        tmp += (double)(*((double *)ip1)) * \
               (double)(*((double *)ip2));
    }
    *((double *)op) = (double) tmp;
}

#line 1884
static void
LONGDOUBLE_dot(char *ip1, intp is1, char *ip2, intp is2, char *op, intp n,
           void *ignore)
{
    register longdouble tmp=(longdouble)0;
    register intp i;
    for(i=0;i<n;i++,ip1+=is1,ip2+=is2) {
        tmp += (longdouble)(*((longdouble *)ip1)) * \
               (longdouble)(*((longdouble *)ip2));
    }
    *((longdouble *)op) = (longdouble) tmp;
}



#line 1903
static void CFLOAT_dot(char *ip1, intp is1, char *ip2, intp is2,
                       char *op, intp n, void *ignore)
{
    float tmpr=(float)0.0, tmpi=(float)0.0;
    intp i;
    for(i=0;i<n;i++,ip1+=is1,ip2+=is2) {
        tmpr += ((float *)ip1)[0] * ((float *)ip2)[0]
            - ((float *)ip1)[1] * ((float *)ip2)[1];
        tmpi += ((float *)ip1)[1] * ((float *)ip2)[0]
            + ((float *)ip1)[0] * ((float *)ip2)[1];
    }
    ((float *)op)[0] = tmpr; ((float *)op)[1] = tmpi;
}


#line 1903
static void CDOUBLE_dot(char *ip1, intp is1, char *ip2, intp is2,
                       char *op, intp n, void *ignore)
{
    double tmpr=(double)0.0, tmpi=(double)0.0;
    intp i;
    for(i=0;i<n;i++,ip1+=is1,ip2+=is2) {
        tmpr += ((double *)ip1)[0] * ((double *)ip2)[0]
            - ((double *)ip1)[1] * ((double *)ip2)[1];
        tmpi += ((double *)ip1)[1] * ((double *)ip2)[0]
            + ((double *)ip1)[0] * ((double *)ip2)[1];
    }
    ((double *)op)[0] = tmpr; ((double *)op)[1] = tmpi;
}


#line 1903
static void CLONGDOUBLE_dot(char *ip1, intp is1, char *ip2, intp is2,
                       char *op, intp n, void *ignore)
{
    longdouble tmpr=(longdouble)0.0, tmpi=(longdouble)0.0;
    intp i;
    for(i=0;i<n;i++,ip1+=is1,ip2+=is2) {
        tmpr += ((longdouble *)ip1)[0] * ((longdouble *)ip2)[0]
            - ((longdouble *)ip1)[1] * ((longdouble *)ip2)[1];
        tmpi += ((longdouble *)ip1)[1] * ((longdouble *)ip2)[0]
            + ((longdouble *)ip1)[0] * ((longdouble *)ip2)[1];
    }
    ((longdouble *)op)[0] = tmpr; ((longdouble *)op)[1] = tmpi;
}



static void
OBJECT_dot(char *ip1, intp is1, char *ip2, intp is2, char *op, intp n,
           void *ignore)
{
    intp i;
    PyObject *tmp1, *tmp2, *tmp=NULL;
    PyObject **tmp3;
    for(i=0;i<n;i++,ip1+=is1,ip2+=is2) {
        if ((*((PyObject **)ip1) == NULL) || (*((PyObject **)ip2) == NULL)) {
            tmp1 = Py_False;
            Py_INCREF(Py_False);
        }
        else {
            tmp1 = PyNumber_Multiply(*((PyObject **)ip1),
                    *((PyObject **)ip2));
            if (!tmp1) { Py_XDECREF(tmp); return;}
        }
        if (i == 0) {
            tmp = tmp1;
        } else {
            tmp2 = PyNumber_Add(tmp, tmp1);
            Py_XDECREF(tmp);
            Py_XDECREF(tmp1);
            if (!tmp2) return;
            tmp = tmp2;
        }
    }
    tmp3 = (PyObject**) op;
    tmp2 = *tmp3;
    *((PyObject **)op) = tmp;
    Py_XDECREF(tmp2);
}

#define BOOL_fill NULL

/* this requires buffer to be filled with objects or NULL */
static void
OBJECT_fill(PyObject **buffer, intp length, void *ignored)
{
    intp i;
    PyObject *start = buffer[0];
    PyObject *delta = buffer[1];
    delta = PyNumber_Subtract(delta, start);
    if (!delta) return;
    start = PyNumber_Add(start, delta);
    if (!start) goto finish;
    buffer += 2;

    for (i=2; i<length; i++, buffer++) {
        start = PyNumber_Add(start, delta);
        if (!start) goto finish;
        Py_XDECREF(*buffer);
        *buffer = start;
    }

finish:
    Py_DECREF(delta);
    return;
}

#line 1983
static void
BYTE_fill(byte *buffer, intp length, void *ignored)
{
    register intp i;
    byte start = buffer[0];
    byte delta = buffer[1];
    delta -= start;
    for (i=2; i<length; ++i) {
        buffer[i] = start + i*delta;
    }
}

#line 1983
static void
UBYTE_fill(ubyte *buffer, intp length, void *ignored)
{
    register intp i;
    ubyte start = buffer[0];
    ubyte delta = buffer[1];
    delta -= start;
    for (i=2; i<length; ++i) {
        buffer[i] = start + i*delta;
    }
}

#line 1983
static void
SHORT_fill(short *buffer, intp length, void *ignored)
{
    register intp i;
    short start = buffer[0];
    short delta = buffer[1];
    delta -= start;
    for (i=2; i<length; ++i) {
        buffer[i] = start + i*delta;
    }
}

#line 1983
static void
USHORT_fill(ushort *buffer, intp length, void *ignored)
{
    register intp i;
    ushort start = buffer[0];
    ushort delta = buffer[1];
    delta -= start;
    for (i=2; i<length; ++i) {
        buffer[i] = start + i*delta;
    }
}

#line 1983
static void
INT_fill(int *buffer, intp length, void *ignored)
{
    register intp i;
    int start = buffer[0];
    int delta = buffer[1];
    delta -= start;
    for (i=2; i<length; ++i) {
        buffer[i] = start + i*delta;
    }
}

#line 1983
static void
UINT_fill(uint *buffer, intp length, void *ignored)
{
    register intp i;
    uint start = buffer[0];
    uint delta = buffer[1];
    delta -= start;
    for (i=2; i<length; ++i) {
        buffer[i] = start + i*delta;
    }
}

#line 1983
static void
LONG_fill(long *buffer, intp length, void *ignored)
{
    register intp i;
    long start = buffer[0];
    long delta = buffer[1];
    delta -= start;
    for (i=2; i<length; ++i) {
        buffer[i] = start + i*delta;
    }
}

#line 1983
static void
ULONG_fill(ulong *buffer, intp length, void *ignored)
{
    register intp i;
    ulong start = buffer[0];
    ulong delta = buffer[1];
    delta -= start;
    for (i=2; i<length; ++i) {
        buffer[i] = start + i*delta;
    }
}

#line 1983
static void
LONGLONG_fill(longlong *buffer, intp length, void *ignored)
{
    register intp i;
    longlong start = buffer[0];
    longlong delta = buffer[1];
    delta -= start;
    for (i=2; i<length; ++i) {
        buffer[i] = start + i*delta;
    }
}

#line 1983
static void
ULONGLONG_fill(ulonglong *buffer, intp length, void *ignored)
{
    register intp i;
    ulonglong start = buffer[0];
    ulonglong delta = buffer[1];
    delta -= start;
    for (i=2; i<length; ++i) {
        buffer[i] = start + i*delta;
    }
}

#line 1983
static void
FLOAT_fill(float *buffer, intp length, void *ignored)
{
    register intp i;
    float start = buffer[0];
    float delta = buffer[1];
    delta -= start;
    for (i=2; i<length; ++i) {
        buffer[i] = start + i*delta;
    }
}

#line 1983
static void
DOUBLE_fill(double *buffer, intp length, void *ignored)
{
    register intp i;
    double start = buffer[0];
    double delta = buffer[1];
    delta -= start;
    for (i=2; i<length; ++i) {
        buffer[i] = start + i*delta;
    }
}

#line 1983
static void
LONGDOUBLE_fill(longdouble *buffer, intp length, void *ignored)
{
    register intp i;
    longdouble start = buffer[0];
    longdouble delta = buffer[1];
    delta -= start;
    for (i=2; i<length; ++i) {
        buffer[i] = start + i*delta;
    }
}


#line 2000
static void
CFLOAT_fill(cfloat *buffer, intp length, void *ignored)
{
    register intp i;
    cfloat start;
    cfloat delta;

    start.real = buffer->real;
    start.imag = buffer->imag;
    delta.real = buffer[1].real;
    delta.imag = buffer[1].imag;
    delta.real -= start.real;
    delta.imag -= start.imag;
    buffer += 2;
    for (i=2; i<length; i++, buffer++) {
        buffer->real = start.real + i*delta.real;
        buffer->imag = start.imag + i*delta.imag;
    }
}

#line 2000
static void
CDOUBLE_fill(cdouble *buffer, intp length, void *ignored)
{
    register intp i;
    cdouble start;
    cdouble delta;

    start.real = buffer->real;
    start.imag = buffer->imag;
    delta.real = buffer[1].real;
    delta.imag = buffer[1].imag;
    delta.real -= start.real;
    delta.imag -= start.imag;
    buffer += 2;
    for (i=2; i<length; i++, buffer++) {
        buffer->real = start.real + i*delta.real;
        buffer->imag = start.imag + i*delta.imag;
    }
}

#line 2000
static void
CLONGDOUBLE_fill(clongdouble *buffer, intp length, void *ignored)
{
    register intp i;
    clongdouble start;
    clongdouble delta;

    start.real = buffer->real;
    start.imag = buffer->imag;
    delta.real = buffer[1].real;
    delta.imag = buffer[1].imag;
    delta.real -= start.real;
    delta.imag -= start.imag;
    buffer += 2;
    for (i=2; i<length; i++, buffer++) {
        buffer->real = start.real + i*delta.real;
        buffer->imag = start.imag + i*delta.imag;
    }
}



/* this requires buffer to be filled with objects or NULL */
static void
OBJECT_fillwithscalar(PyObject **buffer, intp length, PyObject **value, void *ignored)
{
    intp i;
    PyObject *val = *value;
    for (i=0; i<length; i++) {
        Py_XDECREF(buffer[i]);
        Py_XINCREF(val);
        buffer[i] = val;
    }
}
#line 2038
static void
BOOL_fillwithscalar(Bool *buffer, intp length, Bool *value, void *ignored)
{
    memset(buffer, *value, length);
}

#line 2038
static void
BYTE_fillwithscalar(byte *buffer, intp length, byte *value, void *ignored)
{
    memset(buffer, *value, length);
}

#line 2038
static void
UBYTE_fillwithscalar(ubyte *buffer, intp length, ubyte *value, void *ignored)
{
    memset(buffer, *value, length);
}


#line 2049
static void
SHORT_fillwithscalar(short *buffer, intp length, short *value, void *ignored)
{
    register intp i;
    short val = *value;
    for (i=0; i<length; ++i) {
        buffer[i] = val;
    }
}


#line 2049
static void
USHORT_fillwithscalar(ushort *buffer, intp length, ushort *value, void *ignored)
{
    register intp i;
    ushort val = *value;
    for (i=0; i<length; ++i) {
        buffer[i] = val;
    }
}


#line 2049
static void
INT_fillwithscalar(int *buffer, intp length, int *value, void *ignored)
{
    register intp i;
    int val = *value;
    for (i=0; i<length; ++i) {
        buffer[i] = val;
    }
}


#line 2049
static void
UINT_fillwithscalar(uint *buffer, intp length, uint *value, void *ignored)
{
    register intp i;
    uint val = *value;
    for (i=0; i<length; ++i) {
        buffer[i] = val;
    }
}


#line 2049
static void
LONG_fillwithscalar(long *buffer, intp length, long *value, void *ignored)
{
    register intp i;
    long val = *value;
    for (i=0; i<length; ++i) {
        buffer[i] = val;
    }
}


#line 2049
static void
ULONG_fillwithscalar(ulong *buffer, intp length, ulong *value, void *ignored)
{
    register intp i;
    ulong val = *value;
    for (i=0; i<length; ++i) {
        buffer[i] = val;
    }
}


#line 2049
static void
LONGLONG_fillwithscalar(longlong *buffer, intp length, longlong *value, void *ignored)
{
    register intp i;
    longlong val = *value;
    for (i=0; i<length; ++i) {
        buffer[i] = val;
    }
}


#line 2049
static void
ULONGLONG_fillwithscalar(ulonglong *buffer, intp length, ulonglong *value, void *ignored)
{
    register intp i;
    ulonglong val = *value;
    for (i=0; i<length; ++i) {
        buffer[i] = val;
    }
}


#line 2049
static void
FLOAT_fillwithscalar(float *buffer, intp length, float *value, void *ignored)
{
    register intp i;
    float val = *value;
    for (i=0; i<length; ++i) {
        buffer[i] = val;
    }
}


#line 2049
static void
DOUBLE_fillwithscalar(double *buffer, intp length, double *value, void *ignored)
{
    register intp i;
    double val = *value;
    for (i=0; i<length; ++i) {
        buffer[i] = val;
    }
}


#line 2049
static void
LONGDOUBLE_fillwithscalar(longdouble *buffer, intp length, longdouble *value, void *ignored)
{
    register intp i;
    longdouble val = *value;
    for (i=0; i<length; ++i) {
        buffer[i] = val;
    }
}


#line 2049
static void
CFLOAT_fillwithscalar(cfloat *buffer, intp length, cfloat *value, void *ignored)
{
    register intp i;
    cfloat val = *value;
    for (i=0; i<length; ++i) {
        buffer[i] = val;
    }
}


#line 2049
static void
CDOUBLE_fillwithscalar(cdouble *buffer, intp length, cdouble *value, void *ignored)
{
    register intp i;
    cdouble val = *value;
    for (i=0; i<length; ++i) {
        buffer[i] = val;
    }
}


#line 2049
static void
CLONGDOUBLE_fillwithscalar(clongdouble *buffer, intp length, clongdouble *value, void *ignored)
{
    register intp i;
    clongdouble val = *value;
    for (i=0; i<length; ++i) {
        buffer[i] = val;
    }
}





/************************
 * Fast clip functions
 *************************/

#line 2071
static void
BOOL_fastclip(Bool *in, intp ni, Bool *min, Bool *max, Bool *out)
{
    register npy_intp i;
    Bool max_val=0, min_val=0;

    if (max != NULL)
        max_val = *max;
    if (min != NULL)
        min_val = *min;

    if (max == NULL) {
        for (i = 0; i < ni; i++) {
            if (in[i] < min_val) {
                out[i] = min_val;
            }
        }
        return;
    }

    if (min == NULL) {
        for (i = 0; i < ni; i++) {
            if (in[i] > max_val) {
                out[i] = max_val;
            }
        }
        return;
    }

    for (i = 0; i < ni; i++) {
        if (in[i] < min_val) {
            out[i]   = min_val;
        } else if (in[i] > max_val) {
            out[i]   = max_val;
        }
    }

    return;
}

#line 2071
static void
BYTE_fastclip(byte *in, intp ni, byte *min, byte *max, byte *out)
{
    register npy_intp i;
    byte max_val=0, min_val=0;

    if (max != NULL)
        max_val = *max;
    if (min != NULL)
        min_val = *min;

    if (max == NULL) {
        for (i = 0; i < ni; i++) {
            if (in[i] < min_val) {
                out[i] = min_val;
            }
        }
        return;
    }

    if (min == NULL) {
        for (i = 0; i < ni; i++) {
            if (in[i] > max_val) {
                out[i] = max_val;
            }
        }
        return;
    }

    for (i = 0; i < ni; i++) {
        if (in[i] < min_val) {
            out[i]   = min_val;
        } else if (in[i] > max_val) {
            out[i]   = max_val;
        }
    }

    return;
}

#line 2071
static void
UBYTE_fastclip(ubyte *in, intp ni, ubyte *min, ubyte *max, ubyte *out)
{
    register npy_intp i;
    ubyte max_val=0, min_val=0;

    if (max != NULL)
        max_val = *max;
    if (min != NULL)
        min_val = *min;

    if (max == NULL) {
        for (i = 0; i < ni; i++) {
            if (in[i] < min_val) {
                out[i] = min_val;
            }
        }
        return;
    }

    if (min == NULL) {
        for (i = 0; i < ni; i++) {
            if (in[i] > max_val) {
                out[i] = max_val;
            }
        }
        return;
    }

    for (i = 0; i < ni; i++) {
        if (in[i] < min_val) {
            out[i]   = min_val;
        } else if (in[i] > max_val) {
            out[i]   = max_val;
        }
    }

    return;
}

#line 2071
static void
SHORT_fastclip(short *in, intp ni, short *min, short *max, short *out)
{
    register npy_intp i;
    short max_val=0, min_val=0;

    if (max != NULL)
        max_val = *max;
    if (min != NULL)
        min_val = *min;

    if (max == NULL) {
        for (i = 0; i < ni; i++) {
            if (in[i] < min_val) {
                out[i] = min_val;
            }
        }
        return;
    }

    if (min == NULL) {
        for (i = 0; i < ni; i++) {
            if (in[i] > max_val) {
                out[i] = max_val;
            }
        }
        return;
    }

    for (i = 0; i < ni; i++) {
        if (in[i] < min_val) {
            out[i]   = min_val;
        } else if (in[i] > max_val) {
            out[i]   = max_val;
        }
    }

    return;
}

#line 2071
static void
USHORT_fastclip(ushort *in, intp ni, ushort *min, ushort *max, ushort *out)
{
    register npy_intp i;
    ushort max_val=0, min_val=0;

    if (max != NULL)
        max_val = *max;
    if (min != NULL)
        min_val = *min;

    if (max == NULL) {
        for (i = 0; i < ni; i++) {
            if (in[i] < min_val) {
                out[i] = min_val;
            }
        }
        return;
    }

    if (min == NULL) {
        for (i = 0; i < ni; i++) {
            if (in[i] > max_val) {
                out[i] = max_val;
            }
        }
        return;
    }

    for (i = 0; i < ni; i++) {
        if (in[i] < min_val) {
            out[i]   = min_val;
        } else if (in[i] > max_val) {
            out[i]   = max_val;
        }
    }

    return;
}

#line 2071
static void
INT_fastclip(int *in, intp ni, int *min, int *max, int *out)
{
    register npy_intp i;
    int max_val=0, min_val=0;

    if (max != NULL)
        max_val = *max;
    if (min != NULL)
        min_val = *min;

    if (max == NULL) {
        for (i = 0; i < ni; i++) {
            if (in[i] < min_val) {
                out[i] = min_val;
            }
        }
        return;
    }

    if (min == NULL) {
        for (i = 0; i < ni; i++) {
            if (in[i] > max_val) {
                out[i] = max_val;
            }
        }
        return;
    }

    for (i = 0; i < ni; i++) {
        if (in[i] < min_val) {
            out[i]   = min_val;
        } else if (in[i] > max_val) {
            out[i]   = max_val;
        }
    }

    return;
}

#line 2071
static void
UINT_fastclip(uint *in, intp ni, uint *min, uint *max, uint *out)
{
    register npy_intp i;
    uint max_val=0, min_val=0;

    if (max != NULL)
        max_val = *max;
    if (min != NULL)
        min_val = *min;

    if (max == NULL) {
        for (i = 0; i < ni; i++) {
            if (in[i] < min_val) {
                out[i] = min_val;
            }
        }
        return;
    }

    if (min == NULL) {
        for (i = 0; i < ni; i++) {
            if (in[i] > max_val) {
                out[i] = max_val;
            }
        }
        return;
    }

    for (i = 0; i < ni; i++) {
        if (in[i] < min_val) {
            out[i]   = min_val;
        } else if (in[i] > max_val) {
            out[i]   = max_val;
        }
    }

    return;
}

#line 2071
static void
LONG_fastclip(long *in, intp ni, long *min, long *max, long *out)
{
    register npy_intp i;
    long max_val=0, min_val=0;

    if (max != NULL)
        max_val = *max;
    if (min != NULL)
        min_val = *min;

    if (max == NULL) {
        for (i = 0; i < ni; i++) {
            if (in[i] < min_val) {
                out[i] = min_val;
            }
        }
        return;
    }

    if (min == NULL) {
        for (i = 0; i < ni; i++) {
            if (in[i] > max_val) {
                out[i] = max_val;
            }
        }
        return;
    }

    for (i = 0; i < ni; i++) {
        if (in[i] < min_val) {
            out[i]   = min_val;
        } else if (in[i] > max_val) {
            out[i]   = max_val;
        }
    }

    return;
}

#line 2071
static void
ULONG_fastclip(ulong *in, intp ni, ulong *min, ulong *max, ulong *out)
{
    register npy_intp i;
    ulong max_val=0, min_val=0;

    if (max != NULL)
        max_val = *max;
    if (min != NULL)
        min_val = *min;

    if (max == NULL) {
        for (i = 0; i < ni; i++) {
            if (in[i] < min_val) {
                out[i] = min_val;
            }
        }
        return;
    }

    if (min == NULL) {
        for (i = 0; i < ni; i++) {
            if (in[i] > max_val) {
                out[i] = max_val;
            }
        }
        return;
    }

    for (i = 0; i < ni; i++) {
        if (in[i] < min_val) {
            out[i]   = min_val;
        } else if (in[i] > max_val) {
            out[i]   = max_val;
        }
    }

    return;
}

#line 2071
static void
LONGLONG_fastclip(longlong *in, intp ni, longlong *min, longlong *max, longlong *out)
{
    register npy_intp i;
    longlong max_val=0, min_val=0;

    if (max != NULL)
        max_val = *max;
    if (min != NULL)
        min_val = *min;

    if (max == NULL) {
        for (i = 0; i < ni; i++) {
            if (in[i] < min_val) {
                out[i] = min_val;
            }
        }
        return;
    }

    if (min == NULL) {
        for (i = 0; i < ni; i++) {
            if (in[i] > max_val) {
                out[i] = max_val;
            }
        }
        return;
    }

    for (i = 0; i < ni; i++) {
        if (in[i] < min_val) {
            out[i]   = min_val;
        } else if (in[i] > max_val) {
            out[i]   = max_val;
        }
    }

    return;
}

#line 2071
static void
ULONGLONG_fastclip(ulonglong *in, intp ni, ulonglong *min, ulonglong *max, ulonglong *out)
{
    register npy_intp i;
    ulonglong max_val=0, min_val=0;

    if (max != NULL)
        max_val = *max;
    if (min != NULL)
        min_val = *min;

    if (max == NULL) {
        for (i = 0; i < ni; i++) {
            if (in[i] < min_val) {
                out[i] = min_val;
            }
        }
        return;
    }

    if (min == NULL) {
        for (i = 0; i < ni; i++) {
            if (in[i] > max_val) {
                out[i] = max_val;
            }
        }
        return;
    }

    for (i = 0; i < ni; i++) {
        if (in[i] < min_val) {
            out[i]   = min_val;
        } else if (in[i] > max_val) {
            out[i]   = max_val;
        }
    }

    return;
}

#line 2071
static void
FLOAT_fastclip(float *in, intp ni, float *min, float *max, float *out)
{
    register npy_intp i;
    float max_val=0, min_val=0;

    if (max != NULL)
        max_val = *max;
    if (min != NULL)
        min_val = *min;

    if (max == NULL) {
        for (i = 0; i < ni; i++) {
            if (in[i] < min_val) {
                out[i] = min_val;
            }
        }
        return;
    }

    if (min == NULL) {
        for (i = 0; i < ni; i++) {
            if (in[i] > max_val) {
                out[i] = max_val;
            }
        }
        return;
    }

    for (i = 0; i < ni; i++) {
        if (in[i] < min_val) {
            out[i]   = min_val;
        } else if (in[i] > max_val) {
            out[i]   = max_val;
        }
    }

    return;
}

#line 2071
static void
DOUBLE_fastclip(double *in, intp ni, double *min, double *max, double *out)
{
    register npy_intp i;
    double max_val=0, min_val=0;

    if (max != NULL)
        max_val = *max;
    if (min != NULL)
        min_val = *min;

    if (max == NULL) {
        for (i = 0; i < ni; i++) {
            if (in[i] < min_val) {
                out[i] = min_val;
            }
        }
        return;
    }

    if (min == NULL) {
        for (i = 0; i < ni; i++) {
            if (in[i] > max_val) {
                out[i] = max_val;
            }
        }
        return;
    }

    for (i = 0; i < ni; i++) {
        if (in[i] < min_val) {
            out[i]   = min_val;
        } else if (in[i] > max_val) {
            out[i]   = max_val;
        }
    }

    return;
}

#line 2071
static void
LONGDOUBLE_fastclip(longdouble *in, intp ni, longdouble *min, longdouble *max, longdouble *out)
{
    register npy_intp i;
    longdouble max_val=0, min_val=0;

    if (max != NULL)
        max_val = *max;
    if (min != NULL)
        min_val = *min;

    if (max == NULL) {
        for (i = 0; i < ni; i++) {
            if (in[i] < min_val) {
                out[i] = min_val;
            }
        }
        return;
    }

    if (min == NULL) {
        for (i = 0; i < ni; i++) {
            if (in[i] > max_val) {
                out[i] = max_val;
            }
        }
        return;
    }

    for (i = 0; i < ni; i++) {
        if (in[i] < min_val) {
            out[i]   = min_val;
        } else if (in[i] > max_val) {
            out[i]   = max_val;
        }
    }

    return;
}


#line 2116
static void
CFLOAT_fastclip(cfloat *in, intp ni, cfloat *min, cfloat *max, cfloat *out)
{
    register npy_intp i;
    cfloat max_val, min_val;

    min_val = *min;
    max_val = *max;

    if (max != NULL)
        max_val = *max;
    if (min != NULL)
        min_val = *min;

    if (max == NULL) {
        for (i = 0; i < ni; i++) {
            if (PyArray_CLT(in[i],min_val)) {
                out[i] = min_val;
            }
        }
        return;
    }

    if (min == NULL) {
        for (i = 0; i < ni; i++) {
            if (PyArray_CGT(in[i], max_val)) {
                out[i] = max_val;
            }
        }
        return;
    }

    for (i = 0; i < ni; i++) {
        if (PyArray_CLT(in[i], min_val)) {
            out[i] = min_val;
        } else if (PyArray_CGT(in[i], max_val)) {
            out[i] = max_val;
        }
    }
    return;
}


#line 2116
static void
CDOUBLE_fastclip(cdouble *in, intp ni, cdouble *min, cdouble *max, cdouble *out)
{
    register npy_intp i;
    cdouble max_val, min_val;

    min_val = *min;
    max_val = *max;

    if (max != NULL)
        max_val = *max;
    if (min != NULL)
        min_val = *min;

    if (max == NULL) {
        for (i = 0; i < ni; i++) {
            if (PyArray_CLT(in[i],min_val)) {
                out[i] = min_val;
            }
        }
        return;
    }

    if (min == NULL) {
        for (i = 0; i < ni; i++) {
            if (PyArray_CGT(in[i], max_val)) {
                out[i] = max_val;
            }
        }
        return;
    }

    for (i = 0; i < ni; i++) {
        if (PyArray_CLT(in[i], min_val)) {
            out[i] = min_val;
        } else if (PyArray_CGT(in[i], max_val)) {
            out[i] = max_val;
        }
    }
    return;
}


#line 2116
static void
CLONGDOUBLE_fastclip(clongdouble *in, intp ni, clongdouble *min, clongdouble *max, clongdouble *out)
{
    register npy_intp i;
    clongdouble max_val, min_val;

    min_val = *min;
    max_val = *max;

    if (max != NULL)
        max_val = *max;
    if (min != NULL)
        min_val = *min;

    if (max == NULL) {
        for (i = 0; i < ni; i++) {
            if (PyArray_CLT(in[i],min_val)) {
                out[i] = min_val;
            }
        }
        return;
    }

    if (min == NULL) {
        for (i = 0; i < ni; i++) {
            if (PyArray_CGT(in[i], max_val)) {
                out[i] = max_val;
            }
        }
        return;
    }

    for (i = 0; i < ni; i++) {
        if (PyArray_CLT(in[i], min_val)) {
            out[i] = min_val;
        } else if (PyArray_CGT(in[i], max_val)) {
            out[i] = max_val;
        }
    }
    return;
}



#define OBJECT_fastclip NULL

/************************
 * Fast putmask functions
 *************************/

#line 2170
static void
BOOL_fastputmask(Bool *in, Bool *mask, intp ni, Bool *vals, intp nv)
{
    register npy_intp i;
    Bool s_val;

    if (nv == 1) {
        s_val = *vals;
        for (i = 0; i < ni; i++) {
            if (mask[i]) {
                in[i] = s_val;
            }
        }
    }
    else {
        for (i = 0; i < ni; i++) {
            if (mask[i]) {
                in[i] = vals[i%nv];
            }
        }
    }
    return;
}

#line 2170
static void
BYTE_fastputmask(byte *in, Bool *mask, intp ni, byte *vals, intp nv)
{
    register npy_intp i;
    byte s_val;

    if (nv == 1) {
        s_val = *vals;
        for (i = 0; i < ni; i++) {
            if (mask[i]) {
                in[i] = s_val;
            }
        }
    }
    else {
        for (i = 0; i < ni; i++) {
            if (mask[i]) {
                in[i] = vals[i%nv];
            }
        }
    }
    return;
}

#line 2170
static void
UBYTE_fastputmask(ubyte *in, Bool *mask, intp ni, ubyte *vals, intp nv)
{
    register npy_intp i;
    ubyte s_val;

    if (nv == 1) {
        s_val = *vals;
        for (i = 0; i < ni; i++) {
            if (mask[i]) {
                in[i] = s_val;
            }
        }
    }
    else {
        for (i = 0; i < ni; i++) {
            if (mask[i]) {
                in[i] = vals[i%nv];
            }
        }
    }
    return;
}

#line 2170
static void
SHORT_fastputmask(short *in, Bool *mask, intp ni, short *vals, intp nv)
{
    register npy_intp i;
    short s_val;

    if (nv == 1) {
        s_val = *vals;
        for (i = 0; i < ni; i++) {
            if (mask[i]) {
                in[i] = s_val;
            }
        }
    }
    else {
        for (i = 0; i < ni; i++) {
            if (mask[i]) {
                in[i] = vals[i%nv];
            }
        }
    }
    return;
}

#line 2170
static void
USHORT_fastputmask(ushort *in, Bool *mask, intp ni, ushort *vals, intp nv)
{
    register npy_intp i;
    ushort s_val;

    if (nv == 1) {
        s_val = *vals;
        for (i = 0; i < ni; i++) {
            if (mask[i]) {
                in[i] = s_val;
            }
        }
    }
    else {
        for (i = 0; i < ni; i++) {
            if (mask[i]) {
                in[i] = vals[i%nv];
            }
        }
    }
    return;
}

#line 2170
static void
INT_fastputmask(int *in, Bool *mask, intp ni, int *vals, intp nv)
{
    register npy_intp i;
    int s_val;

    if (nv == 1) {
        s_val = *vals;
        for (i = 0; i < ni; i++) {
            if (mask[i]) {
                in[i] = s_val;
            }
        }
    }
    else {
        for (i = 0; i < ni; i++) {
            if (mask[i]) {
                in[i] = vals[i%nv];
            }
        }
    }
    return;
}

#line 2170
static void
UINT_fastputmask(uint *in, Bool *mask, intp ni, uint *vals, intp nv)
{
    register npy_intp i;
    uint s_val;

    if (nv == 1) {
        s_val = *vals;
        for (i = 0; i < ni; i++) {
            if (mask[i]) {
                in[i] = s_val;
            }
        }
    }
    else {
        for (i = 0; i < ni; i++) {
            if (mask[i]) {
                in[i] = vals[i%nv];
            }
        }
    }
    return;
}

#line 2170
static void
LONG_fastputmask(long *in, Bool *mask, intp ni, long *vals, intp nv)
{
    register npy_intp i;
    long s_val;

    if (nv == 1) {
        s_val = *vals;
        for (i = 0; i < ni; i++) {
            if (mask[i]) {
                in[i] = s_val;
            }
        }
    }
    else {
        for (i = 0; i < ni; i++) {
            if (mask[i]) {
                in[i] = vals[i%nv];
            }
        }
    }
    return;
}

#line 2170
static void
ULONG_fastputmask(ulong *in, Bool *mask, intp ni, ulong *vals, intp nv)
{
    register npy_intp i;
    ulong s_val;

    if (nv == 1) {
        s_val = *vals;
        for (i = 0; i < ni; i++) {
            if (mask[i]) {
                in[i] = s_val;
            }
        }
    }
    else {
        for (i = 0; i < ni; i++) {
            if (mask[i]) {
                in[i] = vals[i%nv];
            }
        }
    }
    return;
}

#line 2170
static void
LONGLONG_fastputmask(longlong *in, Bool *mask, intp ni, longlong *vals, intp nv)
{
    register npy_intp i;
    longlong s_val;

    if (nv == 1) {
        s_val = *vals;
        for (i = 0; i < ni; i++) {
            if (mask[i]) {
                in[i] = s_val;
            }
        }
    }
    else {
        for (i = 0; i < ni; i++) {
            if (mask[i]) {
                in[i] = vals[i%nv];
            }
        }
    }
    return;
}

#line 2170
static void
ULONGLONG_fastputmask(ulonglong *in, Bool *mask, intp ni, ulonglong *vals, intp nv)
{
    register npy_intp i;
    ulonglong s_val;

    if (nv == 1) {
        s_val = *vals;
        for (i = 0; i < ni; i++) {
            if (mask[i]) {
                in[i] = s_val;
            }
        }
    }
    else {
        for (i = 0; i < ni; i++) {
            if (mask[i]) {
                in[i] = vals[i%nv];
            }
        }
    }
    return;
}

#line 2170
static void
FLOAT_fastputmask(float *in, Bool *mask, intp ni, float *vals, intp nv)
{
    register npy_intp i;
    float s_val;

    if (nv == 1) {
        s_val = *vals;
        for (i = 0; i < ni; i++) {
            if (mask[i]) {
                in[i] = s_val;
            }
        }
    }
    else {
        for (i = 0; i < ni; i++) {
            if (mask[i]) {
                in[i] = vals[i%nv];
            }
        }
    }
    return;
}

#line 2170
static void
DOUBLE_fastputmask(double *in, Bool *mask, intp ni, double *vals, intp nv)
{
    register npy_intp i;
    double s_val;

    if (nv == 1) {
        s_val = *vals;
        for (i = 0; i < ni; i++) {
            if (mask[i]) {
                in[i] = s_val;
            }
        }
    }
    else {
        for (i = 0; i < ni; i++) {
            if (mask[i]) {
                in[i] = vals[i%nv];
            }
        }
    }
    return;
}

#line 2170
static void
LONGDOUBLE_fastputmask(longdouble *in, Bool *mask, intp ni, longdouble *vals, intp nv)
{
    register npy_intp i;
    longdouble s_val;

    if (nv == 1) {
        s_val = *vals;
        for (i = 0; i < ni; i++) {
            if (mask[i]) {
                in[i] = s_val;
            }
        }
    }
    else {
        for (i = 0; i < ni; i++) {
            if (mask[i]) {
                in[i] = vals[i%nv];
            }
        }
    }
    return;
}

#line 2170
static void
CFLOAT_fastputmask(cfloat *in, Bool *mask, intp ni, cfloat *vals, intp nv)
{
    register npy_intp i;
    cfloat s_val;

    if (nv == 1) {
        s_val = *vals;
        for (i = 0; i < ni; i++) {
            if (mask[i]) {
                in[i] = s_val;
            }
        }
    }
    else {
        for (i = 0; i < ni; i++) {
            if (mask[i]) {
                in[i] = vals[i%nv];
            }
        }
    }
    return;
}

#line 2170
static void
CDOUBLE_fastputmask(cdouble *in, Bool *mask, intp ni, cdouble *vals, intp nv)
{
    register npy_intp i;
    cdouble s_val;

    if (nv == 1) {
        s_val = *vals;
        for (i = 0; i < ni; i++) {
            if (mask[i]) {
                in[i] = s_val;
            }
        }
    }
    else {
        for (i = 0; i < ni; i++) {
            if (mask[i]) {
                in[i] = vals[i%nv];
            }
        }
    }
    return;
}

#line 2170
static void
CLONGDOUBLE_fastputmask(clongdouble *in, Bool *mask, intp ni, clongdouble *vals, intp nv)
{
    register npy_intp i;
    clongdouble s_val;

    if (nv == 1) {
        s_val = *vals;
        for (i = 0; i < ni; i++) {
            if (mask[i]) {
                in[i] = s_val;
            }
        }
    }
    else {
        for (i = 0; i < ni; i++) {
            if (mask[i]) {
                in[i] = vals[i%nv];
            }
        }
    }
    return;
}


#define OBJECT_fastputmask NULL



/************************
 * Fast take functions
 *************************/

#line 2207
static int
BOOL_fasttake(Bool *dest, Bool *src, intp *indarray,
                    intp nindarray, intp n_outer,
                    intp m_middle, intp nelem,
                    NPY_CLIPMODE clipmode)
{
    intp i, j, k, tmp;

    switch(clipmode) {
    case NPY_RAISE:
        for(i=0; i<n_outer; i++) {
            for(j=0; j<m_middle; j++) {
                tmp = indarray[j];
                if (tmp < 0) tmp = tmp+nindarray;
                if ((tmp < 0) || (tmp >= nindarray)) {
                    PyErr_SetString(PyExc_IndexError,
                                    "index out of range "\
                                    "for array");
                    return 1;
                }
                if (nelem == 1) *dest++ = *(src+tmp);
                else {
                    for(k=0; k<nelem; k++) {
                        *dest++ = *(src+tmp*nelem+k);
                    }
                }
            }
            src += nelem*nindarray;
        }
        break;
    case NPY_WRAP:
        for(i=0; i<n_outer; i++) {
            for(j=0; j<m_middle; j++) {
                tmp = indarray[j];
                if (tmp < 0) while (tmp < 0) tmp += nindarray;
                else if (tmp >= nindarray)
                    while (tmp >= nindarray)
                        tmp -= nindarray;
                if (nelem == 1) *dest++ = *(src+tmp);
                else {
                    for(k=0; k<nelem; k++) {
                        *dest++ = *(src+tmp*nelem+k);
                    }
                }
            }
            src += nelem*nindarray;
        }
        break;
    case NPY_CLIP:
        for(i=0; i<n_outer; i++) {
            for(j=0; j<m_middle; j++) {
                tmp = indarray[j];
                if (tmp < 0)
                    tmp = 0;
                else if (tmp >= nindarray)
                    tmp = nindarray-1;
                if (nelem == 1) *dest++ = *(src+tmp);
                else {
                    for(k=0; k<nelem; k++) {
                        *dest++ = *(src+tmp*nelem+k);
                    }
                }
            }
            src += nelem*nindarray;
        }
        break;
    }
    return 0;
}

#line 2207
static int
BYTE_fasttake(byte *dest, byte *src, intp *indarray,
                    intp nindarray, intp n_outer,
                    intp m_middle, intp nelem,
                    NPY_CLIPMODE clipmode)
{
    intp i, j, k, tmp;

    switch(clipmode) {
    case NPY_RAISE:
        for(i=0; i<n_outer; i++) {
            for(j=0; j<m_middle; j++) {
                tmp = indarray[j];
                if (tmp < 0) tmp = tmp+nindarray;
                if ((tmp < 0) || (tmp >= nindarray)) {
                    PyErr_SetString(PyExc_IndexError,
                                    "index out of range "\
                                    "for array");
                    return 1;
                }
                if (nelem == 1) *dest++ = *(src+tmp);
                else {
                    for(k=0; k<nelem; k++) {
                        *dest++ = *(src+tmp*nelem+k);
                    }
                }
            }
            src += nelem*nindarray;
        }
        break;
    case NPY_WRAP:
        for(i=0; i<n_outer; i++) {
            for(j=0; j<m_middle; j++) {
                tmp = indarray[j];
                if (tmp < 0) while (tmp < 0) tmp += nindarray;
                else if (tmp >= nindarray)
                    while (tmp >= nindarray)
                        tmp -= nindarray;
                if (nelem == 1) *dest++ = *(src+tmp);
                else {
                    for(k=0; k<nelem; k++) {
                        *dest++ = *(src+tmp*nelem+k);
                    }
                }
            }
            src += nelem*nindarray;
        }
        break;
    case NPY_CLIP:
        for(i=0; i<n_outer; i++) {
            for(j=0; j<m_middle; j++) {
                tmp = indarray[j];
                if (tmp < 0)
                    tmp = 0;
                else if (tmp >= nindarray)
                    tmp = nindarray-1;
                if (nelem == 1) *dest++ = *(src+tmp);
                else {
                    for(k=0; k<nelem; k++) {
                        *dest++ = *(src+tmp*nelem+k);
                    }
                }
            }
            src += nelem*nindarray;
        }
        break;
    }
    return 0;
}

#line 2207
static int
UBYTE_fasttake(ubyte *dest, ubyte *src, intp *indarray,
                    intp nindarray, intp n_outer,
                    intp m_middle, intp nelem,
                    NPY_CLIPMODE clipmode)
{
    intp i, j, k, tmp;

    switch(clipmode) {
    case NPY_RAISE:
        for(i=0; i<n_outer; i++) {
            for(j=0; j<m_middle; j++) {
                tmp = indarray[j];
                if (tmp < 0) tmp = tmp+nindarray;
                if ((tmp < 0) || (tmp >= nindarray)) {
                    PyErr_SetString(PyExc_IndexError,
                                    "index out of range "\
                                    "for array");
                    return 1;
                }
                if (nelem == 1) *dest++ = *(src+tmp);
                else {
                    for(k=0; k<nelem; k++) {
                        *dest++ = *(src+tmp*nelem+k);
                    }
                }
            }
            src += nelem*nindarray;
        }
        break;
    case NPY_WRAP:
        for(i=0; i<n_outer; i++) {
            for(j=0; j<m_middle; j++) {
                tmp = indarray[j];
                if (tmp < 0) while (tmp < 0) tmp += nindarray;
                else if (tmp >= nindarray)
                    while (tmp >= nindarray)
                        tmp -= nindarray;
                if (nelem == 1) *dest++ = *(src+tmp);
                else {
                    for(k=0; k<nelem; k++) {
                        *dest++ = *(src+tmp*nelem+k);
                    }
                }
            }
            src += nelem*nindarray;
        }
        break;
    case NPY_CLIP:
        for(i=0; i<n_outer; i++) {
            for(j=0; j<m_middle; j++) {
                tmp = indarray[j];
                if (tmp < 0)
                    tmp = 0;
                else if (tmp >= nindarray)
                    tmp = nindarray-1;
                if (nelem == 1) *dest++ = *(src+tmp);
                else {
                    for(k=0; k<nelem; k++) {
                        *dest++ = *(src+tmp*nelem+k);
                    }
                }
            }
            src += nelem*nindarray;
        }
        break;
    }
    return 0;
}

#line 2207
static int
SHORT_fasttake(short *dest, short *src, intp *indarray,
                    intp nindarray, intp n_outer,
                    intp m_middle, intp nelem,
                    NPY_CLIPMODE clipmode)
{
    intp i, j, k, tmp;

    switch(clipmode) {
    case NPY_RAISE:
        for(i=0; i<n_outer; i++) {
            for(j=0; j<m_middle; j++) {
                tmp = indarray[j];
                if (tmp < 0) tmp = tmp+nindarray;
                if ((tmp < 0) || (tmp >= nindarray)) {
                    PyErr_SetString(PyExc_IndexError,
                                    "index out of range "\
                                    "for array");
                    return 1;
                }
                if (nelem == 1) *dest++ = *(src+tmp);
                else {
                    for(k=0; k<nelem; k++) {
                        *dest++ = *(src+tmp*nelem+k);
                    }
                }
            }
            src += nelem*nindarray;
        }
        break;
    case NPY_WRAP:
        for(i=0; i<n_outer; i++) {
            for(j=0; j<m_middle; j++) {
                tmp = indarray[j];
                if (tmp < 0) while (tmp < 0) tmp += nindarray;
                else if (tmp >= nindarray)
                    while (tmp >= nindarray)
                        tmp -= nindarray;
                if (nelem == 1) *dest++ = *(src+tmp);
                else {
                    for(k=0; k<nelem; k++) {
                        *dest++ = *(src+tmp*nelem+k);
                    }
                }
            }
            src += nelem*nindarray;
        }
        break;
    case NPY_CLIP:
        for(i=0; i<n_outer; i++) {
            for(j=0; j<m_middle; j++) {
                tmp = indarray[j];
                if (tmp < 0)
                    tmp = 0;
                else if (tmp >= nindarray)
                    tmp = nindarray-1;
                if (nelem == 1) *dest++ = *(src+tmp);
                else {
                    for(k=0; k<nelem; k++) {
                        *dest++ = *(src+tmp*nelem+k);
                    }
                }
            }
            src += nelem*nindarray;
        }
        break;
    }
    return 0;
}

#line 2207
static int
USHORT_fasttake(ushort *dest, ushort *src, intp *indarray,
                    intp nindarray, intp n_outer,
                    intp m_middle, intp nelem,
                    NPY_CLIPMODE clipmode)
{
    intp i, j, k, tmp;

    switch(clipmode) {
    case NPY_RAISE:
        for(i=0; i<n_outer; i++) {
            for(j=0; j<m_middle; j++) {
                tmp = indarray[j];
                if (tmp < 0) tmp = tmp+nindarray;
                if ((tmp < 0) || (tmp >= nindarray)) {
                    PyErr_SetString(PyExc_IndexError,
                                    "index out of range "\
                                    "for array");
                    return 1;
                }
                if (nelem == 1) *dest++ = *(src+tmp);
                else {
                    for(k=0; k<nelem; k++) {
                        *dest++ = *(src+tmp*nelem+k);
                    }
                }
            }
            src += nelem*nindarray;
        }
        break;
    case NPY_WRAP:
        for(i=0; i<n_outer; i++) {
            for(j=0; j<m_middle; j++) {
                tmp = indarray[j];
                if (tmp < 0) while (tmp < 0) tmp += nindarray;
                else if (tmp >= nindarray)
                    while (tmp >= nindarray)
                        tmp -= nindarray;
                if (nelem == 1) *dest++ = *(src+tmp);
                else {
                    for(k=0; k<nelem; k++) {
                        *dest++ = *(src+tmp*nelem+k);
                    }
                }
            }
            src += nelem*nindarray;
        }
        break;
    case NPY_CLIP:
        for(i=0; i<n_outer; i++) {
            for(j=0; j<m_middle; j++) {
                tmp = indarray[j];
                if (tmp < 0)
                    tmp = 0;
                else if (tmp >= nindarray)
                    tmp = nindarray-1;
                if (nelem == 1) *dest++ = *(src+tmp);
                else {
                    for(k=0; k<nelem; k++) {
                        *dest++ = *(src+tmp*nelem+k);
                    }
                }
            }
            src += nelem*nindarray;
        }
        break;
    }
    return 0;
}

#line 2207
static int
INT_fasttake(int *dest, int *src, intp *indarray,
                    intp nindarray, intp n_outer,
                    intp m_middle, intp nelem,
                    NPY_CLIPMODE clipmode)
{
    intp i, j, k, tmp;

    switch(clipmode) {
    case NPY_RAISE:
        for(i=0; i<n_outer; i++) {
            for(j=0; j<m_middle; j++) {
                tmp = indarray[j];
                if (tmp < 0) tmp = tmp+nindarray;
                if ((tmp < 0) || (tmp >= nindarray)) {
                    PyErr_SetString(PyExc_IndexError,
                                    "index out of range "\
                                    "for array");
                    return 1;
                }
                if (nelem == 1) *dest++ = *(src+tmp);
                else {
                    for(k=0; k<nelem; k++) {
                        *dest++ = *(src+tmp*nelem+k);
                    }
                }
            }
            src += nelem*nindarray;
        }
        break;
    case NPY_WRAP:
        for(i=0; i<n_outer; i++) {
            for(j=0; j<m_middle; j++) {
                tmp = indarray[j];
                if (tmp < 0) while (tmp < 0) tmp += nindarray;
                else if (tmp >= nindarray)
                    while (tmp >= nindarray)
                        tmp -= nindarray;
                if (nelem == 1) *dest++ = *(src+tmp);
                else {
                    for(k=0; k<nelem; k++) {
                        *dest++ = *(src+tmp*nelem+k);
                    }
                }
            }
            src += nelem*nindarray;
        }
        break;
    case NPY_CLIP:
        for(i=0; i<n_outer; i++) {
            for(j=0; j<m_middle; j++) {
                tmp = indarray[j];
                if (tmp < 0)
                    tmp = 0;
                else if (tmp >= nindarray)
                    tmp = nindarray-1;
                if (nelem == 1) *dest++ = *(src+tmp);
                else {
                    for(k=0; k<nelem; k++) {
                        *dest++ = *(src+tmp*nelem+k);
                    }
                }
            }
            src += nelem*nindarray;
        }
        break;
    }
    return 0;
}

#line 2207
static int
UINT_fasttake(uint *dest, uint *src, intp *indarray,
                    intp nindarray, intp n_outer,
                    intp m_middle, intp nelem,
                    NPY_CLIPMODE clipmode)
{
    intp i, j, k, tmp;

    switch(clipmode) {
    case NPY_RAISE:
        for(i=0; i<n_outer; i++) {
            for(j=0; j<m_middle; j++) {
                tmp = indarray[j];
                if (tmp < 0) tmp = tmp+nindarray;
                if ((tmp < 0) || (tmp >= nindarray)) {
                    PyErr_SetString(PyExc_IndexError,
                                    "index out of range "\
                                    "for array");
                    return 1;
                }
                if (nelem == 1) *dest++ = *(src+tmp);
                else {
                    for(k=0; k<nelem; k++) {
                        *dest++ = *(src+tmp*nelem+k);
                    }
                }
            }
            src += nelem*nindarray;
        }
        break;
    case NPY_WRAP:
        for(i=0; i<n_outer; i++) {
            for(j=0; j<m_middle; j++) {
                tmp = indarray[j];
                if (tmp < 0) while (tmp < 0) tmp += nindarray;
                else if (tmp >= nindarray)
                    while (tmp >= nindarray)
                        tmp -= nindarray;
                if (nelem == 1) *dest++ = *(src+tmp);
                else {
                    for(k=0; k<nelem; k++) {
                        *dest++ = *(src+tmp*nelem+k);
                    }
                }
            }
            src += nelem*nindarray;
        }
        break;
    case NPY_CLIP:
        for(i=0; i<n_outer; i++) {
            for(j=0; j<m_middle; j++) {
                tmp = indarray[j];
                if (tmp < 0)
                    tmp = 0;
                else if (tmp >= nindarray)
                    tmp = nindarray-1;
                if (nelem == 1) *dest++ = *(src+tmp);
                else {
                    for(k=0; k<nelem; k++) {
                        *dest++ = *(src+tmp*nelem+k);
                    }
                }
            }
            src += nelem*nindarray;
        }
        break;
    }
    return 0;
}

#line 2207
static int
LONG_fasttake(long *dest, long *src, intp *indarray,
                    intp nindarray, intp n_outer,
                    intp m_middle, intp nelem,
                    NPY_CLIPMODE clipmode)
{
    intp i, j, k, tmp;

    switch(clipmode) {
    case NPY_RAISE:
        for(i=0; i<n_outer; i++) {
            for(j=0; j<m_middle; j++) {
                tmp = indarray[j];
                if (tmp < 0) tmp = tmp+nindarray;
                if ((tmp < 0) || (tmp >= nindarray)) {
                    PyErr_SetString(PyExc_IndexError,
                                    "index out of range "\
                                    "for array");
                    return 1;
                }
                if (nelem == 1) *dest++ = *(src+tmp);
                else {
                    for(k=0; k<nelem; k++) {
                        *dest++ = *(src+tmp*nelem+k);
                    }
                }
            }
            src += nelem*nindarray;
        }
        break;
    case NPY_WRAP:
        for(i=0; i<n_outer; i++) {
            for(j=0; j<m_middle; j++) {
                tmp = indarray[j];
                if (tmp < 0) while (tmp < 0) tmp += nindarray;
                else if (tmp >= nindarray)
                    while (tmp >= nindarray)
                        tmp -= nindarray;
                if (nelem == 1) *dest++ = *(src+tmp);
                else {
                    for(k=0; k<nelem; k++) {
                        *dest++ = *(src+tmp*nelem+k);
                    }
                }
            }
            src += nelem*nindarray;
        }
        break;
    case NPY_CLIP:
        for(i=0; i<n_outer; i++) {
            for(j=0; j<m_middle; j++) {
                tmp = indarray[j];
                if (tmp < 0)
                    tmp = 0;
                else if (tmp >= nindarray)
                    tmp = nindarray-1;
                if (nelem == 1) *dest++ = *(src+tmp);
                else {
                    for(k=0; k<nelem; k++) {
                        *dest++ = *(src+tmp*nelem+k);
                    }
                }
            }
            src += nelem*nindarray;
        }
        break;
    }
    return 0;
}

#line 2207
static int
ULONG_fasttake(ulong *dest, ulong *src, intp *indarray,
                    intp nindarray, intp n_outer,
                    intp m_middle, intp nelem,
                    NPY_CLIPMODE clipmode)
{
    intp i, j, k, tmp;

    switch(clipmode) {
    case NPY_RAISE:
        for(i=0; i<n_outer; i++) {
            for(j=0; j<m_middle; j++) {
                tmp = indarray[j];
                if (tmp < 0) tmp = tmp+nindarray;
                if ((tmp < 0) || (tmp >= nindarray)) {
                    PyErr_SetString(PyExc_IndexError,
                                    "index out of range "\
                                    "for array");
                    return 1;
                }
                if (nelem == 1) *dest++ = *(src+tmp);
                else {
                    for(k=0; k<nelem; k++) {
                        *dest++ = *(src+tmp*nelem+k);
                    }
                }
            }
            src += nelem*nindarray;
        }
        break;
    case NPY_WRAP:
        for(i=0; i<n_outer; i++) {
            for(j=0; j<m_middle; j++) {
                tmp = indarray[j];
                if (tmp < 0) while (tmp < 0) tmp += nindarray;
                else if (tmp >= nindarray)
                    while (tmp >= nindarray)
                        tmp -= nindarray;
                if (nelem == 1) *dest++ = *(src+tmp);
                else {
                    for(k=0; k<nelem; k++) {
                        *dest++ = *(src+tmp*nelem+k);
                    }
                }
            }
            src += nelem*nindarray;
        }
        break;
    case NPY_CLIP:
        for(i=0; i<n_outer; i++) {
            for(j=0; j<m_middle; j++) {
                tmp = indarray[j];
                if (tmp < 0)
                    tmp = 0;
                else if (tmp >= nindarray)
                    tmp = nindarray-1;
                if (nelem == 1) *dest++ = *(src+tmp);
                else {
                    for(k=0; k<nelem; k++) {
                        *dest++ = *(src+tmp*nelem+k);
                    }
                }
            }
            src += nelem*nindarray;
        }
        break;
    }
    return 0;
}

#line 2207
static int
LONGLONG_fasttake(longlong *dest, longlong *src, intp *indarray,
                    intp nindarray, intp n_outer,
                    intp m_middle, intp nelem,
                    NPY_CLIPMODE clipmode)
{
    intp i, j, k, tmp;

    switch(clipmode) {
    case NPY_RAISE:
        for(i=0; i<n_outer; i++) {
            for(j=0; j<m_middle; j++) {
                tmp = indarray[j];
                if (tmp < 0) tmp = tmp+nindarray;
                if ((tmp < 0) || (tmp >= nindarray)) {
                    PyErr_SetString(PyExc_IndexError,
                                    "index out of range "\
                                    "for array");
                    return 1;
                }
                if (nelem == 1) *dest++ = *(src+tmp);
                else {
                    for(k=0; k<nelem; k++) {
                        *dest++ = *(src+tmp*nelem+k);
                    }
                }
            }
            src += nelem*nindarray;
        }
        break;
    case NPY_WRAP:
        for(i=0; i<n_outer; i++) {
            for(j=0; j<m_middle; j++) {
                tmp = indarray[j];
                if (tmp < 0) while (tmp < 0) tmp += nindarray;
                else if (tmp >= nindarray)
                    while (tmp >= nindarray)
                        tmp -= nindarray;
                if (nelem == 1) *dest++ = *(src+tmp);
                else {
                    for(k=0; k<nelem; k++) {
                        *dest++ = *(src+tmp*nelem+k);
                    }
                }
            }
            src += nelem*nindarray;
        }
        break;
    case NPY_CLIP:
        for(i=0; i<n_outer; i++) {
            for(j=0; j<m_middle; j++) {
                tmp = indarray[j];
                if (tmp < 0)
                    tmp = 0;
                else if (tmp >= nindarray)
                    tmp = nindarray-1;
                if (nelem == 1) *dest++ = *(src+tmp);
                else {
                    for(k=0; k<nelem; k++) {
                        *dest++ = *(src+tmp*nelem+k);
                    }
                }
            }
            src += nelem*nindarray;
        }
        break;
    }
    return 0;
}

#line 2207
static int
ULONGLONG_fasttake(ulonglong *dest, ulonglong *src, intp *indarray,
                    intp nindarray, intp n_outer,
                    intp m_middle, intp nelem,
                    NPY_CLIPMODE clipmode)
{
    intp i, j, k, tmp;

    switch(clipmode) {
    case NPY_RAISE:
        for(i=0; i<n_outer; i++) {
            for(j=0; j<m_middle; j++) {
                tmp = indarray[j];
                if (tmp < 0) tmp = tmp+nindarray;
                if ((tmp < 0) || (tmp >= nindarray)) {
                    PyErr_SetString(PyExc_IndexError,
                                    "index out of range "\
                                    "for array");
                    return 1;
                }
                if (nelem == 1) *dest++ = *(src+tmp);
                else {
                    for(k=0; k<nelem; k++) {
                        *dest++ = *(src+tmp*nelem+k);
                    }
                }
            }
            src += nelem*nindarray;
        }
        break;
    case NPY_WRAP:
        for(i=0; i<n_outer; i++) {
            for(j=0; j<m_middle; j++) {
                tmp = indarray[j];
                if (tmp < 0) while (tmp < 0) tmp += nindarray;
                else if (tmp >= nindarray)
                    while (tmp >= nindarray)
                        tmp -= nindarray;
                if (nelem == 1) *dest++ = *(src+tmp);
                else {
                    for(k=0; k<nelem; k++) {
                        *dest++ = *(src+tmp*nelem+k);
                    }
                }
            }
            src += nelem*nindarray;
        }
        break;
    case NPY_CLIP:
        for(i=0; i<n_outer; i++) {
            for(j=0; j<m_middle; j++) {
                tmp = indarray[j];
                if (tmp < 0)
                    tmp = 0;
                else if (tmp >= nindarray)
                    tmp = nindarray-1;
                if (nelem == 1) *dest++ = *(src+tmp);
                else {
                    for(k=0; k<nelem; k++) {
                        *dest++ = *(src+tmp*nelem+k);
                    }
                }
            }
            src += nelem*nindarray;
        }
        break;
    }
    return 0;
}

#line 2207
static int
FLOAT_fasttake(float *dest, float *src, intp *indarray,
                    intp nindarray, intp n_outer,
                    intp m_middle, intp nelem,
                    NPY_CLIPMODE clipmode)
{
    intp i, j, k, tmp;

    switch(clipmode) {
    case NPY_RAISE:
        for(i=0; i<n_outer; i++) {
            for(j=0; j<m_middle; j++) {
                tmp = indarray[j];
                if (tmp < 0) tmp = tmp+nindarray;
                if ((tmp < 0) || (tmp >= nindarray)) {
                    PyErr_SetString(PyExc_IndexError,
                                    "index out of range "\
                                    "for array");
                    return 1;
                }
                if (nelem == 1) *dest++ = *(src+tmp);
                else {
                    for(k=0; k<nelem; k++) {
                        *dest++ = *(src+tmp*nelem+k);
                    }
                }
            }
            src += nelem*nindarray;
        }
        break;
    case NPY_WRAP:
        for(i=0; i<n_outer; i++) {
            for(j=0; j<m_middle; j++) {
                tmp = indarray[j];
                if (tmp < 0) while (tmp < 0) tmp += nindarray;
                else if (tmp >= nindarray)
                    while (tmp >= nindarray)
                        tmp -= nindarray;
                if (nelem == 1) *dest++ = *(src+tmp);
                else {
                    for(k=0; k<nelem; k++) {
                        *dest++ = *(src+tmp*nelem+k);
                    }
                }
            }
            src += nelem*nindarray;
        }
        break;
    case NPY_CLIP:
        for(i=0; i<n_outer; i++) {
            for(j=0; j<m_middle; j++) {
                tmp = indarray[j];
                if (tmp < 0)
                    tmp = 0;
                else if (tmp >= nindarray)
                    tmp = nindarray-1;
                if (nelem == 1) *dest++ = *(src+tmp);
                else {
                    for(k=0; k<nelem; k++) {
                        *dest++ = *(src+tmp*nelem+k);
                    }
                }
            }
            src += nelem*nindarray;
        }
        break;
    }
    return 0;
}

#line 2207
static int
DOUBLE_fasttake(double *dest, double *src, intp *indarray,
                    intp nindarray, intp n_outer,
                    intp m_middle, intp nelem,
                    NPY_CLIPMODE clipmode)
{
    intp i, j, k, tmp;

    switch(clipmode) {
    case NPY_RAISE:
        for(i=0; i<n_outer; i++) {
            for(j=0; j<m_middle; j++) {
                tmp = indarray[j];
                if (tmp < 0) tmp = tmp+nindarray;
                if ((tmp < 0) || (tmp >= nindarray)) {
                    PyErr_SetString(PyExc_IndexError,
                                    "index out of range "\
                                    "for array");
                    return 1;
                }
                if (nelem == 1) *dest++ = *(src+tmp);
                else {
                    for(k=0; k<nelem; k++) {
                        *dest++ = *(src+tmp*nelem+k);
                    }
                }
            }
            src += nelem*nindarray;
        }
        break;
    case NPY_WRAP:
        for(i=0; i<n_outer; i++) {
            for(j=0; j<m_middle; j++) {
                tmp = indarray[j];
                if (tmp < 0) while (tmp < 0) tmp += nindarray;
                else if (tmp >= nindarray)
                    while (tmp >= nindarray)
                        tmp -= nindarray;
                if (nelem == 1) *dest++ = *(src+tmp);
                else {
                    for(k=0; k<nelem; k++) {
                        *dest++ = *(src+tmp*nelem+k);
                    }
                }
            }
            src += nelem*nindarray;
        }
        break;
    case NPY_CLIP:
        for(i=0; i<n_outer; i++) {
            for(j=0; j<m_middle; j++) {
                tmp = indarray[j];
                if (tmp < 0)
                    tmp = 0;
                else if (tmp >= nindarray)
                    tmp = nindarray-1;
                if (nelem == 1) *dest++ = *(src+tmp);
                else {
                    for(k=0; k<nelem; k++) {
                        *dest++ = *(src+tmp*nelem+k);
                    }
                }
            }
            src += nelem*nindarray;
        }
        break;
    }
    return 0;
}

#line 2207
static int
LONGDOUBLE_fasttake(longdouble *dest, longdouble *src, intp *indarray,
                    intp nindarray, intp n_outer,
                    intp m_middle, intp nelem,
                    NPY_CLIPMODE clipmode)
{
    intp i, j, k, tmp;

    switch(clipmode) {
    case NPY_RAISE:
        for(i=0; i<n_outer; i++) {
            for(j=0; j<m_middle; j++) {
                tmp = indarray[j];
                if (tmp < 0) tmp = tmp+nindarray;
                if ((tmp < 0) || (tmp >= nindarray)) {
                    PyErr_SetString(PyExc_IndexError,
                                    "index out of range "\
                                    "for array");
                    return 1;
                }
                if (nelem == 1) *dest++ = *(src+tmp);
                else {
                    for(k=0; k<nelem; k++) {
                        *dest++ = *(src+tmp*nelem+k);
                    }
                }
            }
            src += nelem*nindarray;
        }
        break;
    case NPY_WRAP:
        for(i=0; i<n_outer; i++) {
            for(j=0; j<m_middle; j++) {
                tmp = indarray[j];
                if (tmp < 0) while (tmp < 0) tmp += nindarray;
                else if (tmp >= nindarray)
                    while (tmp >= nindarray)
                        tmp -= nindarray;
                if (nelem == 1) *dest++ = *(src+tmp);
                else {
                    for(k=0; k<nelem; k++) {
                        *dest++ = *(src+tmp*nelem+k);
                    }
                }
            }
            src += nelem*nindarray;
        }
        break;
    case NPY_CLIP:
        for(i=0; i<n_outer; i++) {
            for(j=0; j<m_middle; j++) {
                tmp = indarray[j];
                if (tmp < 0)
                    tmp = 0;
                else if (tmp >= nindarray)
                    tmp = nindarray-1;
                if (nelem == 1) *dest++ = *(src+tmp);
                else {
                    for(k=0; k<nelem; k++) {
                        *dest++ = *(src+tmp*nelem+k);
                    }
                }
            }
            src += nelem*nindarray;
        }
        break;
    }
    return 0;
}

#line 2207
static int
CFLOAT_fasttake(cfloat *dest, cfloat *src, intp *indarray,
                    intp nindarray, intp n_outer,
                    intp m_middle, intp nelem,
                    NPY_CLIPMODE clipmode)
{
    intp i, j, k, tmp;

    switch(clipmode) {
    case NPY_RAISE:
        for(i=0; i<n_outer; i++) {
            for(j=0; j<m_middle; j++) {
                tmp = indarray[j];
                if (tmp < 0) tmp = tmp+nindarray;
                if ((tmp < 0) || (tmp >= nindarray)) {
                    PyErr_SetString(PyExc_IndexError,
                                    "index out of range "\
                                    "for array");
                    return 1;
                }
                if (nelem == 1) *dest++ = *(src+tmp);
                else {
                    for(k=0; k<nelem; k++) {
                        *dest++ = *(src+tmp*nelem+k);
                    }
                }
            }
            src += nelem*nindarray;
        }
        break;
    case NPY_WRAP:
        for(i=0; i<n_outer; i++) {
            for(j=0; j<m_middle; j++) {
                tmp = indarray[j];
                if (tmp < 0) while (tmp < 0) tmp += nindarray;
                else if (tmp >= nindarray)
                    while (tmp >= nindarray)
                        tmp -= nindarray;
                if (nelem == 1) *dest++ = *(src+tmp);
                else {
                    for(k=0; k<nelem; k++) {
                        *dest++ = *(src+tmp*nelem+k);
                    }
                }
            }
            src += nelem*nindarray;
        }
        break;
    case NPY_CLIP:
        for(i=0; i<n_outer; i++) {
            for(j=0; j<m_middle; j++) {
                tmp = indarray[j];
                if (tmp < 0)
                    tmp = 0;
                else if (tmp >= nindarray)
                    tmp = nindarray-1;
                if (nelem == 1) *dest++ = *(src+tmp);
                else {
                    for(k=0; k<nelem; k++) {
                        *dest++ = *(src+tmp*nelem+k);
                    }
                }
            }
            src += nelem*nindarray;
        }
        break;
    }
    return 0;
}

#line 2207
static int
CDOUBLE_fasttake(cdouble *dest, cdouble *src, intp *indarray,
                    intp nindarray, intp n_outer,
                    intp m_middle, intp nelem,
                    NPY_CLIPMODE clipmode)
{
    intp i, j, k, tmp;

    switch(clipmode) {
    case NPY_RAISE:
        for(i=0; i<n_outer; i++) {
            for(j=0; j<m_middle; j++) {
                tmp = indarray[j];
                if (tmp < 0) tmp = tmp+nindarray;
                if ((tmp < 0) || (tmp >= nindarray)) {
                    PyErr_SetString(PyExc_IndexError,
                                    "index out of range "\
                                    "for array");
                    return 1;
                }
                if (nelem == 1) *dest++ = *(src+tmp);
                else {
                    for(k=0; k<nelem; k++) {
                        *dest++ = *(src+tmp*nelem+k);
                    }
                }
            }
            src += nelem*nindarray;
        }
        break;
    case NPY_WRAP:
        for(i=0; i<n_outer; i++) {
            for(j=0; j<m_middle; j++) {
                tmp = indarray[j];
                if (tmp < 0) while (tmp < 0) tmp += nindarray;
                else if (tmp >= nindarray)
                    while (tmp >= nindarray)
                        tmp -= nindarray;
                if (nelem == 1) *dest++ = *(src+tmp);
                else {
                    for(k=0; k<nelem; k++) {
                        *dest++ = *(src+tmp*nelem+k);
                    }
                }
            }
            src += nelem*nindarray;
        }
        break;
    case NPY_CLIP:
        for(i=0; i<n_outer; i++) {
            for(j=0; j<m_middle; j++) {
                tmp = indarray[j];
                if (tmp < 0)
                    tmp = 0;
                else if (tmp >= nindarray)
                    tmp = nindarray-1;
                if (nelem == 1) *dest++ = *(src+tmp);
                else {
                    for(k=0; k<nelem; k++) {
                        *dest++ = *(src+tmp*nelem+k);
                    }
                }
            }
            src += nelem*nindarray;
        }
        break;
    }
    return 0;
}

#line 2207
static int
CLONGDOUBLE_fasttake(clongdouble *dest, clongdouble *src, intp *indarray,
                    intp nindarray, intp n_outer,
                    intp m_middle, intp nelem,
                    NPY_CLIPMODE clipmode)
{
    intp i, j, k, tmp;

    switch(clipmode) {
    case NPY_RAISE:
        for(i=0; i<n_outer; i++) {
            for(j=0; j<m_middle; j++) {
                tmp = indarray[j];
                if (tmp < 0) tmp = tmp+nindarray;
                if ((tmp < 0) || (tmp >= nindarray)) {
                    PyErr_SetString(PyExc_IndexError,
                                    "index out of range "\
                                    "for array");
                    return 1;
                }
                if (nelem == 1) *dest++ = *(src+tmp);
                else {
                    for(k=0; k<nelem; k++) {
                        *dest++ = *(src+tmp*nelem+k);
                    }
                }
            }
            src += nelem*nindarray;
        }
        break;
    case NPY_WRAP:
        for(i=0; i<n_outer; i++) {
            for(j=0; j<m_middle; j++) {
                tmp = indarray[j];
                if (tmp < 0) while (tmp < 0) tmp += nindarray;
                else if (tmp >= nindarray)
                    while (tmp >= nindarray)
                        tmp -= nindarray;
                if (nelem == 1) *dest++ = *(src+tmp);
                else {
                    for(k=0; k<nelem; k++) {
                        *dest++ = *(src+tmp*nelem+k);
                    }
                }
            }
            src += nelem*nindarray;
        }
        break;
    case NPY_CLIP:
        for(i=0; i<n_outer; i++) {
            for(j=0; j<m_middle; j++) {
                tmp = indarray[j];
                if (tmp < 0)
                    tmp = 0;
                else if (tmp >= nindarray)
                    tmp = nindarray-1;
                if (nelem == 1) *dest++ = *(src+tmp);
                else {
                    for(k=0; k<nelem; k++) {
                        *dest++ = *(src+tmp*nelem+k);
                    }
                }
            }
            src += nelem*nindarray;
        }
        break;
    }
    return 0;
}


#define OBJECT_fasttake NULL


#define _ALIGN(type) offsetof(struct {char c; type v;},v)

/* Disable harmless compiler warning "4116: unnamed type definition in
   parentheses" which is caused by the _ALIGN macro.  */

#if defined(_MSC_VER)
#pragma warning(disable:4116)
#endif


#line 2298

static PyArray_ArrFuncs _PyVoid_ArrFuncs = {
    {
        (PyArray_VectorUnaryFunc*)VOID_to_BOOL,
        (PyArray_VectorUnaryFunc*)VOID_to_BYTE,
        (PyArray_VectorUnaryFunc*)VOID_to_UBYTE,
        (PyArray_VectorUnaryFunc*)VOID_to_SHORT,
        (PyArray_VectorUnaryFunc*)VOID_to_USHORT,
        (PyArray_VectorUnaryFunc*)VOID_to_INT,
        (PyArray_VectorUnaryFunc*)VOID_to_UINT,
        (PyArray_VectorUnaryFunc*)VOID_to_LONG,
        (PyArray_VectorUnaryFunc*)VOID_to_ULONG,
        (PyArray_VectorUnaryFunc*)VOID_to_LONGLONG,
        (PyArray_VectorUnaryFunc*)VOID_to_ULONGLONG,
        (PyArray_VectorUnaryFunc*)VOID_to_FLOAT,
        (PyArray_VectorUnaryFunc*)VOID_to_DOUBLE,
        (PyArray_VectorUnaryFunc*)VOID_to_LONGDOUBLE,
        (PyArray_VectorUnaryFunc*)VOID_to_CFLOAT,
        (PyArray_VectorUnaryFunc*)VOID_to_CDOUBLE,
        (PyArray_VectorUnaryFunc*)VOID_to_CLONGDOUBLE,
        (PyArray_VectorUnaryFunc*)VOID_to_OBJECT,
        (PyArray_VectorUnaryFunc*)VOID_to_STRING,
        (PyArray_VectorUnaryFunc*)VOID_to_UNICODE,
        (PyArray_VectorUnaryFunc*)VOID_to_VOID
    },
    (PyArray_GetItemFunc*)VOID_getitem,
    (PyArray_SetItemFunc*)VOID_setitem,
    (PyArray_CopySwapNFunc*)VOID_copyswapn,
    (PyArray_CopySwapFunc*)VOID_copyswap,
    (PyArray_CompareFunc*)VOID_compare,
    (PyArray_ArgFunc*)VOID_argmax,
    (PyArray_DotFunc*)NULL,
    (PyArray_ScanFunc*)VOID_scan,
    (PyArray_FromStrFunc*)VOID_fromstr,
    (PyArray_NonzeroFunc*)VOID_nonzero,
    (PyArray_FillFunc*)NULL,
    (PyArray_FillWithScalarFunc*)NULL,
    {
        NULL, NULL, NULL
    },
    {
        NULL, NULL, NULL
    },
    NULL,
    (PyArray_ScalarKindFunc*)NULL,
    NULL,
    NULL,
    (PyArray_FastClipFunc *)NULL,
    (PyArray_FastPutmaskFunc *)NULL,
    (PyArray_FastTakeFunc *)NULL
};

static PyArray_Descr VOID_Descr = {
    PyObject_HEAD_INIT(&PyArrayDescr_Type)
        &PyVoidArrType_Type,
    PyArray_VOIDLTR,
    PyArray_VOIDLTR,
    '|', 0,
    PyArray_VOID, 0,
    _ALIGN(char),
    NULL,
    NULL,
    NULL,
    &_PyVoid_ArrFuncs,
};


#line 2298

static PyArray_ArrFuncs _PyString_ArrFuncs = {
    {
        (PyArray_VectorUnaryFunc*)STRING_to_BOOL,
        (PyArray_VectorUnaryFunc*)STRING_to_BYTE,
        (PyArray_VectorUnaryFunc*)STRING_to_UBYTE,
        (PyArray_VectorUnaryFunc*)STRING_to_SHORT,
        (PyArray_VectorUnaryFunc*)STRING_to_USHORT,
        (PyArray_VectorUnaryFunc*)STRING_to_INT,
        (PyArray_VectorUnaryFunc*)STRING_to_UINT,
        (PyArray_VectorUnaryFunc*)STRING_to_LONG,
        (PyArray_VectorUnaryFunc*)STRING_to_ULONG,
        (PyArray_VectorUnaryFunc*)STRING_to_LONGLONG,
        (PyArray_VectorUnaryFunc*)STRING_to_ULONGLONG,
        (PyArray_VectorUnaryFunc*)STRING_to_FLOAT,
        (PyArray_VectorUnaryFunc*)STRING_to_DOUBLE,
        (PyArray_VectorUnaryFunc*)STRING_to_LONGDOUBLE,
        (PyArray_VectorUnaryFunc*)STRING_to_CFLOAT,
        (PyArray_VectorUnaryFunc*)STRING_to_CDOUBLE,
        (PyArray_VectorUnaryFunc*)STRING_to_CLONGDOUBLE,
        (PyArray_VectorUnaryFunc*)STRING_to_OBJECT,
        (PyArray_VectorUnaryFunc*)STRING_to_STRING,
        (PyArray_VectorUnaryFunc*)STRING_to_UNICODE,
        (PyArray_VectorUnaryFunc*)STRING_to_VOID
    },
    (PyArray_GetItemFunc*)STRING_getitem,
    (PyArray_SetItemFunc*)STRING_setitem,
    (PyArray_CopySwapNFunc*)STRING_copyswapn,
    (PyArray_CopySwapFunc*)STRING_copyswap,
    (PyArray_CompareFunc*)STRING_compare,
    (PyArray_ArgFunc*)STRING_argmax,
    (PyArray_DotFunc*)NULL,
    (PyArray_ScanFunc*)STRING_scan,
    (PyArray_FromStrFunc*)STRING_fromstr,
    (PyArray_NonzeroFunc*)STRING_nonzero,
    (PyArray_FillFunc*)NULL,
    (PyArray_FillWithScalarFunc*)NULL,
    {
        NULL, NULL, NULL
    },
    {
        NULL, NULL, NULL
    },
    NULL,
    (PyArray_ScalarKindFunc*)NULL,
    NULL,
    NULL,
    (PyArray_FastClipFunc *)NULL,
    (PyArray_FastPutmaskFunc *)NULL,
    (PyArray_FastTakeFunc *)NULL
};

static PyArray_Descr STRING_Descr = {
    PyObject_HEAD_INIT(&PyArrayDescr_Type)
        &PyStringArrType_Type,
    PyArray_STRINGLTR,
    PyArray_STRINGLTR,
    '|', 0,
    PyArray_STRING, 0,
    _ALIGN(char),
    NULL,
    NULL,
    NULL,
    &_PyString_ArrFuncs,
};


#line 2298

static PyArray_ArrFuncs _PyUnicode_ArrFuncs = {
    {
        (PyArray_VectorUnaryFunc*)UNICODE_to_BOOL,
        (PyArray_VectorUnaryFunc*)UNICODE_to_BYTE,
        (PyArray_VectorUnaryFunc*)UNICODE_to_UBYTE,
        (PyArray_VectorUnaryFunc*)UNICODE_to_SHORT,
        (PyArray_VectorUnaryFunc*)UNICODE_to_USHORT,
        (PyArray_VectorUnaryFunc*)UNICODE_to_INT,
        (PyArray_VectorUnaryFunc*)UNICODE_to_UINT,
        (PyArray_VectorUnaryFunc*)UNICODE_to_LONG,
        (PyArray_VectorUnaryFunc*)UNICODE_to_ULONG,
        (PyArray_VectorUnaryFunc*)UNICODE_to_LONGLONG,
        (PyArray_VectorUnaryFunc*)UNICODE_to_ULONGLONG,
        (PyArray_VectorUnaryFunc*)UNICODE_to_FLOAT,
        (PyArray_VectorUnaryFunc*)UNICODE_to_DOUBLE,
        (PyArray_VectorUnaryFunc*)UNICODE_to_LONGDOUBLE,
        (PyArray_VectorUnaryFunc*)UNICODE_to_CFLOAT,
        (PyArray_VectorUnaryFunc*)UNICODE_to_CDOUBLE,
        (PyArray_VectorUnaryFunc*)UNICODE_to_CLONGDOUBLE,
        (PyArray_VectorUnaryFunc*)UNICODE_to_OBJECT,
        (PyArray_VectorUnaryFunc*)UNICODE_to_STRING,
        (PyArray_VectorUnaryFunc*)UNICODE_to_UNICODE,
        (PyArray_VectorUnaryFunc*)UNICODE_to_VOID
    },
    (PyArray_GetItemFunc*)UNICODE_getitem,
    (PyArray_SetItemFunc*)UNICODE_setitem,
    (PyArray_CopySwapNFunc*)UNICODE_copyswapn,
    (PyArray_CopySwapFunc*)UNICODE_copyswap,
    (PyArray_CompareFunc*)UNICODE_compare,
    (PyArray_ArgFunc*)UNICODE_argmax,
    (PyArray_DotFunc*)NULL,
    (PyArray_ScanFunc*)UNICODE_scan,
    (PyArray_FromStrFunc*)UNICODE_fromstr,
    (PyArray_NonzeroFunc*)UNICODE_nonzero,
    (PyArray_FillFunc*)NULL,
    (PyArray_FillWithScalarFunc*)NULL,
    {
        NULL, NULL, NULL
    },
    {
        NULL, NULL, NULL
    },
    NULL,
    (PyArray_ScalarKindFunc*)NULL,
    NULL,
    NULL,
    (PyArray_FastClipFunc *)NULL,
    (PyArray_FastPutmaskFunc *)NULL,
    (PyArray_FastTakeFunc *)NULL
};

static PyArray_Descr UNICODE_Descr = {
    PyObject_HEAD_INIT(&PyArrayDescr_Type)
        &PyUnicodeArrType_Type,
    PyArray_UNICODELTR,
    PyArray_UNICODELTR,
    '=', 0,
    PyArray_UNICODE, 0,
    _ALIGN(PyArray_UCS4),
    NULL,
    NULL,
    NULL,
    &_PyUnicode_ArrFuncs,
};




#line 2377

static PyArray_ArrFuncs _PyBool_ArrFuncs = {
    {
        (PyArray_VectorUnaryFunc*)BOOL_to_BOOL,
        (PyArray_VectorUnaryFunc*)BOOL_to_BYTE,
        (PyArray_VectorUnaryFunc*)BOOL_to_UBYTE,
        (PyArray_VectorUnaryFunc*)BOOL_to_SHORT,
        (PyArray_VectorUnaryFunc*)BOOL_to_USHORT,
        (PyArray_VectorUnaryFunc*)BOOL_to_INT,
        (PyArray_VectorUnaryFunc*)BOOL_to_UINT,
        (PyArray_VectorUnaryFunc*)BOOL_to_LONG,
        (PyArray_VectorUnaryFunc*)BOOL_to_ULONG,
        (PyArray_VectorUnaryFunc*)BOOL_to_LONGLONG,
        (PyArray_VectorUnaryFunc*)BOOL_to_ULONGLONG,
        (PyArray_VectorUnaryFunc*)BOOL_to_FLOAT,
        (PyArray_VectorUnaryFunc*)BOOL_to_DOUBLE,
        (PyArray_VectorUnaryFunc*)BOOL_to_LONGDOUBLE,
        (PyArray_VectorUnaryFunc*)BOOL_to_CFLOAT,
        (PyArray_VectorUnaryFunc*)BOOL_to_CDOUBLE,
        (PyArray_VectorUnaryFunc*)BOOL_to_CLONGDOUBLE,
        (PyArray_VectorUnaryFunc*)BOOL_to_OBJECT,
        (PyArray_VectorUnaryFunc*)BOOL_to_STRING,
        (PyArray_VectorUnaryFunc*)BOOL_to_UNICODE,
        (PyArray_VectorUnaryFunc*)BOOL_to_VOID
    },
    (PyArray_GetItemFunc*)BOOL_getitem,
    (PyArray_SetItemFunc*)BOOL_setitem,
    (PyArray_CopySwapNFunc*)BOOL_copyswapn,
    (PyArray_CopySwapFunc*)BOOL_copyswap,
    (PyArray_CompareFunc*)BOOL_compare,
    (PyArray_ArgFunc*)BOOL_argmax,
    (PyArray_DotFunc*)BOOL_dot,
    (PyArray_ScanFunc*)BOOL_scan,
    (PyArray_FromStrFunc*)BOOL_fromstr,
    (PyArray_NonzeroFunc*)BOOL_nonzero,
    (PyArray_FillFunc*)BOOL_fill,
    (PyArray_FillWithScalarFunc*)BOOL_fillwithscalar,
    {
        NULL, NULL, NULL
    },
    {
        NULL, NULL, NULL
    },
    NULL,
    (PyArray_ScalarKindFunc*)NULL,
    NULL,
    NULL,
    (PyArray_FastClipFunc*)BOOL_fastclip,
    (PyArray_FastPutmaskFunc*)BOOL_fastputmask,
    (PyArray_FastTakeFunc*)BOOL_fasttake
};

static PyArray_Descr BOOL_Descr = {
    PyObject_HEAD_INIT(&PyArrayDescr_Type)
        &PyBoolArrType_Type,
    PyArray_GENBOOLLTR,
    PyArray_BOOLLTR,
    '|', 0,
    PyArray_BOOL,
    1*sizeof(Bool),
    _ALIGN(Bool),
    NULL,
    NULL,
    NULL,
    &_PyBool_ArrFuncs,
};


#line 2377

static PyArray_ArrFuncs _PyByte_ArrFuncs = {
    {
        (PyArray_VectorUnaryFunc*)BYTE_to_BOOL,
        (PyArray_VectorUnaryFunc*)BYTE_to_BYTE,
        (PyArray_VectorUnaryFunc*)BYTE_to_UBYTE,
        (PyArray_VectorUnaryFunc*)BYTE_to_SHORT,
        (PyArray_VectorUnaryFunc*)BYTE_to_USHORT,
        (PyArray_VectorUnaryFunc*)BYTE_to_INT,
        (PyArray_VectorUnaryFunc*)BYTE_to_UINT,
        (PyArray_VectorUnaryFunc*)BYTE_to_LONG,
        (PyArray_VectorUnaryFunc*)BYTE_to_ULONG,
        (PyArray_VectorUnaryFunc*)BYTE_to_LONGLONG,
        (PyArray_VectorUnaryFunc*)BYTE_to_ULONGLONG,
        (PyArray_VectorUnaryFunc*)BYTE_to_FLOAT,
        (PyArray_VectorUnaryFunc*)BYTE_to_DOUBLE,
        (PyArray_VectorUnaryFunc*)BYTE_to_LONGDOUBLE,
        (PyArray_VectorUnaryFunc*)BYTE_to_CFLOAT,
        (PyArray_VectorUnaryFunc*)BYTE_to_CDOUBLE,
        (PyArray_VectorUnaryFunc*)BYTE_to_CLONGDOUBLE,
        (PyArray_VectorUnaryFunc*)BYTE_to_OBJECT,
        (PyArray_VectorUnaryFunc*)BYTE_to_STRING,
        (PyArray_VectorUnaryFunc*)BYTE_to_UNICODE,
        (PyArray_VectorUnaryFunc*)BYTE_to_VOID
    },
    (PyArray_GetItemFunc*)BYTE_getitem,
    (PyArray_SetItemFunc*)BYTE_setitem,
    (PyArray_CopySwapNFunc*)BYTE_copyswapn,
    (PyArray_CopySwapFunc*)BYTE_copyswap,
    (PyArray_CompareFunc*)BYTE_compare,
    (PyArray_ArgFunc*)BYTE_argmax,
    (PyArray_DotFunc*)BYTE_dot,
    (PyArray_ScanFunc*)BYTE_scan,
    (PyArray_FromStrFunc*)BYTE_fromstr,
    (PyArray_NonzeroFunc*)BYTE_nonzero,
    (PyArray_FillFunc*)BYTE_fill,
    (PyArray_FillWithScalarFunc*)BYTE_fillwithscalar,
    {
        NULL, NULL, NULL
    },
    {
        NULL, NULL, NULL
    },
    NULL,
    (PyArray_ScalarKindFunc*)NULL,
    NULL,
    NULL,
    (PyArray_FastClipFunc*)BYTE_fastclip,
    (PyArray_FastPutmaskFunc*)BYTE_fastputmask,
    (PyArray_FastTakeFunc*)BYTE_fasttake
};

static PyArray_Descr BYTE_Descr = {
    PyObject_HEAD_INIT(&PyArrayDescr_Type)
        &PyByteArrType_Type,
    PyArray_SIGNEDLTR,
    PyArray_BYTELTR,
    '|', 0,
    PyArray_BYTE,
    1*sizeof(byte),
    _ALIGN(byte),
    NULL,
    NULL,
    NULL,
    &_PyByte_ArrFuncs,
};


#line 2377

static PyArray_ArrFuncs _PyUByte_ArrFuncs = {
    {
        (PyArray_VectorUnaryFunc*)UBYTE_to_BOOL,
        (PyArray_VectorUnaryFunc*)UBYTE_to_BYTE,
        (PyArray_VectorUnaryFunc*)UBYTE_to_UBYTE,
        (PyArray_VectorUnaryFunc*)UBYTE_to_SHORT,
        (PyArray_VectorUnaryFunc*)UBYTE_to_USHORT,
        (PyArray_VectorUnaryFunc*)UBYTE_to_INT,
        (PyArray_VectorUnaryFunc*)UBYTE_to_UINT,
        (PyArray_VectorUnaryFunc*)UBYTE_to_LONG,
        (PyArray_VectorUnaryFunc*)UBYTE_to_ULONG,
        (PyArray_VectorUnaryFunc*)UBYTE_to_LONGLONG,
        (PyArray_VectorUnaryFunc*)UBYTE_to_ULONGLONG,
        (PyArray_VectorUnaryFunc*)UBYTE_to_FLOAT,
        (PyArray_VectorUnaryFunc*)UBYTE_to_DOUBLE,
        (PyArray_VectorUnaryFunc*)UBYTE_to_LONGDOUBLE,
        (PyArray_VectorUnaryFunc*)UBYTE_to_CFLOAT,
        (PyArray_VectorUnaryFunc*)UBYTE_to_CDOUBLE,
        (PyArray_VectorUnaryFunc*)UBYTE_to_CLONGDOUBLE,
        (PyArray_VectorUnaryFunc*)UBYTE_to_OBJECT,
        (PyArray_VectorUnaryFunc*)UBYTE_to_STRING,
        (PyArray_VectorUnaryFunc*)UBYTE_to_UNICODE,
        (PyArray_VectorUnaryFunc*)UBYTE_to_VOID
    },
    (PyArray_GetItemFunc*)UBYTE_getitem,
    (PyArray_SetItemFunc*)UBYTE_setitem,
    (PyArray_CopySwapNFunc*)UBYTE_copyswapn,
    (PyArray_CopySwapFunc*)UBYTE_copyswap,
    (PyArray_CompareFunc*)UBYTE_compare,
    (PyArray_ArgFunc*)UBYTE_argmax,
    (PyArray_DotFunc*)UBYTE_dot,
    (PyArray_ScanFunc*)UBYTE_scan,
    (PyArray_FromStrFunc*)UBYTE_fromstr,
    (PyArray_NonzeroFunc*)UBYTE_nonzero,
    (PyArray_FillFunc*)UBYTE_fill,
    (PyArray_FillWithScalarFunc*)UBYTE_fillwithscalar,
    {
        NULL, NULL, NULL
    },
    {
        NULL, NULL, NULL
    },
    NULL,
    (PyArray_ScalarKindFunc*)NULL,
    NULL,
    NULL,
    (PyArray_FastClipFunc*)UBYTE_fastclip,
    (PyArray_FastPutmaskFunc*)UBYTE_fastputmask,
    (PyArray_FastTakeFunc*)UBYTE_fasttake
};

static PyArray_Descr UBYTE_Descr = {
    PyObject_HEAD_INIT(&PyArrayDescr_Type)
        &PyUByteArrType_Type,
    PyArray_UNSIGNEDLTR,
    PyArray_UBYTELTR,
    '|', 0,
    PyArray_UBYTE,
    1*sizeof(ubyte),
    _ALIGN(ubyte),
    NULL,
    NULL,
    NULL,
    &_PyUByte_ArrFuncs,
};


#line 2377

static PyArray_ArrFuncs _PyShort_ArrFuncs = {
    {
        (PyArray_VectorUnaryFunc*)SHORT_to_BOOL,
        (PyArray_VectorUnaryFunc*)SHORT_to_BYTE,
        (PyArray_VectorUnaryFunc*)SHORT_to_UBYTE,
        (PyArray_VectorUnaryFunc*)SHORT_to_SHORT,
        (PyArray_VectorUnaryFunc*)SHORT_to_USHORT,
        (PyArray_VectorUnaryFunc*)SHORT_to_INT,
        (PyArray_VectorUnaryFunc*)SHORT_to_UINT,
        (PyArray_VectorUnaryFunc*)SHORT_to_LONG,
        (PyArray_VectorUnaryFunc*)SHORT_to_ULONG,
        (PyArray_VectorUnaryFunc*)SHORT_to_LONGLONG,
        (PyArray_VectorUnaryFunc*)SHORT_to_ULONGLONG,
        (PyArray_VectorUnaryFunc*)SHORT_to_FLOAT,
        (PyArray_VectorUnaryFunc*)SHORT_to_DOUBLE,
        (PyArray_VectorUnaryFunc*)SHORT_to_LONGDOUBLE,
        (PyArray_VectorUnaryFunc*)SHORT_to_CFLOAT,
        (PyArray_VectorUnaryFunc*)SHORT_to_CDOUBLE,
        (PyArray_VectorUnaryFunc*)SHORT_to_CLONGDOUBLE,
        (PyArray_VectorUnaryFunc*)SHORT_to_OBJECT,
        (PyArray_VectorUnaryFunc*)SHORT_to_STRING,
        (PyArray_VectorUnaryFunc*)SHORT_to_UNICODE,
        (PyArray_VectorUnaryFunc*)SHORT_to_VOID
    },
    (PyArray_GetItemFunc*)SHORT_getitem,
    (PyArray_SetItemFunc*)SHORT_setitem,
    (PyArray_CopySwapNFunc*)SHORT_copyswapn,
    (PyArray_CopySwapFunc*)SHORT_copyswap,
    (PyArray_CompareFunc*)SHORT_compare,
    (PyArray_ArgFunc*)SHORT_argmax,
    (PyArray_DotFunc*)SHORT_dot,
    (PyArray_ScanFunc*)SHORT_scan,
    (PyArray_FromStrFunc*)SHORT_fromstr,
    (PyArray_NonzeroFunc*)SHORT_nonzero,
    (PyArray_FillFunc*)SHORT_fill,
    (PyArray_FillWithScalarFunc*)SHORT_fillwithscalar,
    {
        NULL, NULL, NULL
    },
    {
        NULL, NULL, NULL
    },
    NULL,
    (PyArray_ScalarKindFunc*)NULL,
    NULL,
    NULL,
    (PyArray_FastClipFunc*)SHORT_fastclip,
    (PyArray_FastPutmaskFunc*)SHORT_fastputmask,
    (PyArray_FastTakeFunc*)SHORT_fasttake
};

static PyArray_Descr SHORT_Descr = {
    PyObject_HEAD_INIT(&PyArrayDescr_Type)
        &PyShortArrType_Type,
    PyArray_SIGNEDLTR,
    PyArray_SHORTLTR,
    '=', 0,
    PyArray_SHORT,
    1*sizeof(short),
    _ALIGN(short),
    NULL,
    NULL,
    NULL,
    &_PyShort_ArrFuncs,
};


#line 2377

static PyArray_ArrFuncs _PyUShort_ArrFuncs = {
    {
        (PyArray_VectorUnaryFunc*)USHORT_to_BOOL,
        (PyArray_VectorUnaryFunc*)USHORT_to_BYTE,
        (PyArray_VectorUnaryFunc*)USHORT_to_UBYTE,
        (PyArray_VectorUnaryFunc*)USHORT_to_SHORT,
        (PyArray_VectorUnaryFunc*)USHORT_to_USHORT,
        (PyArray_VectorUnaryFunc*)USHORT_to_INT,
        (PyArray_VectorUnaryFunc*)USHORT_to_UINT,
        (PyArray_VectorUnaryFunc*)USHORT_to_LONG,
        (PyArray_VectorUnaryFunc*)USHORT_to_ULONG,
        (PyArray_VectorUnaryFunc*)USHORT_to_LONGLONG,
        (PyArray_VectorUnaryFunc*)USHORT_to_ULONGLONG,
        (PyArray_VectorUnaryFunc*)USHORT_to_FLOAT,
        (PyArray_VectorUnaryFunc*)USHORT_to_DOUBLE,
        (PyArray_VectorUnaryFunc*)USHORT_to_LONGDOUBLE,
        (PyArray_VectorUnaryFunc*)USHORT_to_CFLOAT,
        (PyArray_VectorUnaryFunc*)USHORT_to_CDOUBLE,
        (PyArray_VectorUnaryFunc*)USHORT_to_CLONGDOUBLE,
        (PyArray_VectorUnaryFunc*)USHORT_to_OBJECT,
        (PyArray_VectorUnaryFunc*)USHORT_to_STRING,
        (PyArray_VectorUnaryFunc*)USHORT_to_UNICODE,
        (PyArray_VectorUnaryFunc*)USHORT_to_VOID
    },
    (PyArray_GetItemFunc*)USHORT_getitem,
    (PyArray_SetItemFunc*)USHORT_setitem,
    (PyArray_CopySwapNFunc*)USHORT_copyswapn,
    (PyArray_CopySwapFunc*)USHORT_copyswap,
    (PyArray_CompareFunc*)USHORT_compare,
    (PyArray_ArgFunc*)USHORT_argmax,
    (PyArray_DotFunc*)USHORT_dot,
    (PyArray_ScanFunc*)USHORT_scan,
    (PyArray_FromStrFunc*)USHORT_fromstr,
    (PyArray_NonzeroFunc*)USHORT_nonzero,
    (PyArray_FillFunc*)USHORT_fill,
    (PyArray_FillWithScalarFunc*)USHORT_fillwithscalar,
    {
        NULL, NULL, NULL
    },
    {
        NULL, NULL, NULL
    },
    NULL,
    (PyArray_ScalarKindFunc*)NULL,
    NULL,
    NULL,
    (PyArray_FastClipFunc*)USHORT_fastclip,
    (PyArray_FastPutmaskFunc*)USHORT_fastputmask,
    (PyArray_FastTakeFunc*)USHORT_fasttake
};

static PyArray_Descr USHORT_Descr = {
    PyObject_HEAD_INIT(&PyArrayDescr_Type)
        &PyUShortArrType_Type,
    PyArray_UNSIGNEDLTR,
    PyArray_USHORTLTR,
    '=', 0,
    PyArray_USHORT,
    1*sizeof(ushort),
    _ALIGN(ushort),
    NULL,
    NULL,
    NULL,
    &_PyUShort_ArrFuncs,
};


#line 2377

static PyArray_ArrFuncs _PyInt_ArrFuncs = {
    {
        (PyArray_VectorUnaryFunc*)INT_to_BOOL,
        (PyArray_VectorUnaryFunc*)INT_to_BYTE,
        (PyArray_VectorUnaryFunc*)INT_to_UBYTE,
        (PyArray_VectorUnaryFunc*)INT_to_SHORT,
        (PyArray_VectorUnaryFunc*)INT_to_USHORT,
        (PyArray_VectorUnaryFunc*)INT_to_INT,
        (PyArray_VectorUnaryFunc*)INT_to_UINT,
        (PyArray_VectorUnaryFunc*)INT_to_LONG,
        (PyArray_VectorUnaryFunc*)INT_to_ULONG,
        (PyArray_VectorUnaryFunc*)INT_to_LONGLONG,
        (PyArray_VectorUnaryFunc*)INT_to_ULONGLONG,
        (PyArray_VectorUnaryFunc*)INT_to_FLOAT,
        (PyArray_VectorUnaryFunc*)INT_to_DOUBLE,
        (PyArray_VectorUnaryFunc*)INT_to_LONGDOUBLE,
        (PyArray_VectorUnaryFunc*)INT_to_CFLOAT,
        (PyArray_VectorUnaryFunc*)INT_to_CDOUBLE,
        (PyArray_VectorUnaryFunc*)INT_to_CLONGDOUBLE,
        (PyArray_VectorUnaryFunc*)INT_to_OBJECT,
        (PyArray_VectorUnaryFunc*)INT_to_STRING,
        (PyArray_VectorUnaryFunc*)INT_to_UNICODE,
        (PyArray_VectorUnaryFunc*)INT_to_VOID
    },
    (PyArray_GetItemFunc*)INT_getitem,
    (PyArray_SetItemFunc*)INT_setitem,
    (PyArray_CopySwapNFunc*)INT_copyswapn,
    (PyArray_CopySwapFunc*)INT_copyswap,
    (PyArray_CompareFunc*)INT_compare,
    (PyArray_ArgFunc*)INT_argmax,
    (PyArray_DotFunc*)INT_dot,
    (PyArray_ScanFunc*)INT_scan,
    (PyArray_FromStrFunc*)INT_fromstr,
    (PyArray_NonzeroFunc*)INT_nonzero,
    (PyArray_FillFunc*)INT_fill,
    (PyArray_FillWithScalarFunc*)INT_fillwithscalar,
    {
        NULL, NULL, NULL
    },
    {
        NULL, NULL, NULL
    },
    NULL,
    (PyArray_ScalarKindFunc*)NULL,
    NULL,
    NULL,
    (PyArray_FastClipFunc*)INT_fastclip,
    (PyArray_FastPutmaskFunc*)INT_fastputmask,
    (PyArray_FastTakeFunc*)INT_fasttake
};

static PyArray_Descr INT_Descr = {
    PyObject_HEAD_INIT(&PyArrayDescr_Type)
        &PyIntArrType_Type,
    PyArray_SIGNEDLTR,
    PyArray_INTLTR,
    '=', 0,
    PyArray_INT,
    1*sizeof(int),
    _ALIGN(int),
    NULL,
    NULL,
    NULL,
    &_PyInt_ArrFuncs,
};


#line 2377

static PyArray_ArrFuncs _PyUInt_ArrFuncs = {
    {
        (PyArray_VectorUnaryFunc*)UINT_to_BOOL,
        (PyArray_VectorUnaryFunc*)UINT_to_BYTE,
        (PyArray_VectorUnaryFunc*)UINT_to_UBYTE,
        (PyArray_VectorUnaryFunc*)UINT_to_SHORT,
        (PyArray_VectorUnaryFunc*)UINT_to_USHORT,
        (PyArray_VectorUnaryFunc*)UINT_to_INT,
        (PyArray_VectorUnaryFunc*)UINT_to_UINT,
        (PyArray_VectorUnaryFunc*)UINT_to_LONG,
        (PyArray_VectorUnaryFunc*)UINT_to_ULONG,
        (PyArray_VectorUnaryFunc*)UINT_to_LONGLONG,
        (PyArray_VectorUnaryFunc*)UINT_to_ULONGLONG,
        (PyArray_VectorUnaryFunc*)UINT_to_FLOAT,
        (PyArray_VectorUnaryFunc*)UINT_to_DOUBLE,
        (PyArray_VectorUnaryFunc*)UINT_to_LONGDOUBLE,
        (PyArray_VectorUnaryFunc*)UINT_to_CFLOAT,
        (PyArray_VectorUnaryFunc*)UINT_to_CDOUBLE,
        (PyArray_VectorUnaryFunc*)UINT_to_CLONGDOUBLE,
        (PyArray_VectorUnaryFunc*)UINT_to_OBJECT,
        (PyArray_VectorUnaryFunc*)UINT_to_STRING,
        (PyArray_VectorUnaryFunc*)UINT_to_UNICODE,
        (PyArray_VectorUnaryFunc*)UINT_to_VOID
    },
    (PyArray_GetItemFunc*)UINT_getitem,
    (PyArray_SetItemFunc*)UINT_setitem,
    (PyArray_CopySwapNFunc*)UINT_copyswapn,
    (PyArray_CopySwapFunc*)UINT_copyswap,
    (PyArray_CompareFunc*)UINT_compare,
    (PyArray_ArgFunc*)UINT_argmax,
    (PyArray_DotFunc*)UINT_dot,
    (PyArray_ScanFunc*)UINT_scan,
    (PyArray_FromStrFunc*)UINT_fromstr,
    (PyArray_NonzeroFunc*)UINT_nonzero,
    (PyArray_FillFunc*)UINT_fill,
    (PyArray_FillWithScalarFunc*)UINT_fillwithscalar,
    {
        NULL, NULL, NULL
    },
    {
        NULL, NULL, NULL
    },
    NULL,
    (PyArray_ScalarKindFunc*)NULL,
    NULL,
    NULL,
    (PyArray_FastClipFunc*)UINT_fastclip,
    (PyArray_FastPutmaskFunc*)UINT_fastputmask,
    (PyArray_FastTakeFunc*)UINT_fasttake
};

static PyArray_Descr UINT_Descr = {
    PyObject_HEAD_INIT(&PyArrayDescr_Type)
        &PyUIntArrType_Type,
    PyArray_UNSIGNEDLTR,
    PyArray_UINTLTR,
    '=', 0,
    PyArray_UINT,
    1*sizeof(uint),
    _ALIGN(uint),
    NULL,
    NULL,
    NULL,
    &_PyUInt_ArrFuncs,
};


#line 2377

static PyArray_ArrFuncs _PyLong_ArrFuncs = {
    {
        (PyArray_VectorUnaryFunc*)LONG_to_BOOL,
        (PyArray_VectorUnaryFunc*)LONG_to_BYTE,
        (PyArray_VectorUnaryFunc*)LONG_to_UBYTE,
        (PyArray_VectorUnaryFunc*)LONG_to_SHORT,
        (PyArray_VectorUnaryFunc*)LONG_to_USHORT,
        (PyArray_VectorUnaryFunc*)LONG_to_INT,
        (PyArray_VectorUnaryFunc*)LONG_to_UINT,
        (PyArray_VectorUnaryFunc*)LONG_to_LONG,
        (PyArray_VectorUnaryFunc*)LONG_to_ULONG,
        (PyArray_VectorUnaryFunc*)LONG_to_LONGLONG,
        (PyArray_VectorUnaryFunc*)LONG_to_ULONGLONG,
        (PyArray_VectorUnaryFunc*)LONG_to_FLOAT,
        (PyArray_VectorUnaryFunc*)LONG_to_DOUBLE,
        (PyArray_VectorUnaryFunc*)LONG_to_LONGDOUBLE,
        (PyArray_VectorUnaryFunc*)LONG_to_CFLOAT,
        (PyArray_VectorUnaryFunc*)LONG_to_CDOUBLE,
        (PyArray_VectorUnaryFunc*)LONG_to_CLONGDOUBLE,
        (PyArray_VectorUnaryFunc*)LONG_to_OBJECT,
        (PyArray_VectorUnaryFunc*)LONG_to_STRING,
        (PyArray_VectorUnaryFunc*)LONG_to_UNICODE,
        (PyArray_VectorUnaryFunc*)LONG_to_VOID
    },
    (PyArray_GetItemFunc*)LONG_getitem,
    (PyArray_SetItemFunc*)LONG_setitem,
    (PyArray_CopySwapNFunc*)LONG_copyswapn,
    (PyArray_CopySwapFunc*)LONG_copyswap,
    (PyArray_CompareFunc*)LONG_compare,
    (PyArray_ArgFunc*)LONG_argmax,
    (PyArray_DotFunc*)LONG_dot,
    (PyArray_ScanFunc*)LONG_scan,
    (PyArray_FromStrFunc*)LONG_fromstr,
    (PyArray_NonzeroFunc*)LONG_nonzero,
    (PyArray_FillFunc*)LONG_fill,
    (PyArray_FillWithScalarFunc*)LONG_fillwithscalar,
    {
        NULL, NULL, NULL
    },
    {
        NULL, NULL, NULL
    },
    NULL,
    (PyArray_ScalarKindFunc*)NULL,
    NULL,
    NULL,
    (PyArray_FastClipFunc*)LONG_fastclip,
    (PyArray_FastPutmaskFunc*)LONG_fastputmask,
    (PyArray_FastTakeFunc*)LONG_fasttake
};

static PyArray_Descr LONG_Descr = {
    PyObject_HEAD_INIT(&PyArrayDescr_Type)
        &PyLongArrType_Type,
    PyArray_SIGNEDLTR,
    PyArray_LONGLTR,
    '=', 0,
    PyArray_LONG,
    1*sizeof(long),
    _ALIGN(long),
    NULL,
    NULL,
    NULL,
    &_PyLong_ArrFuncs,
};


#line 2377

static PyArray_ArrFuncs _PyULong_ArrFuncs = {
    {
        (PyArray_VectorUnaryFunc*)ULONG_to_BOOL,
        (PyArray_VectorUnaryFunc*)ULONG_to_BYTE,
        (PyArray_VectorUnaryFunc*)ULONG_to_UBYTE,
        (PyArray_VectorUnaryFunc*)ULONG_to_SHORT,
        (PyArray_VectorUnaryFunc*)ULONG_to_USHORT,
        (PyArray_VectorUnaryFunc*)ULONG_to_INT,
        (PyArray_VectorUnaryFunc*)ULONG_to_UINT,
        (PyArray_VectorUnaryFunc*)ULONG_to_LONG,
        (PyArray_VectorUnaryFunc*)ULONG_to_ULONG,
        (PyArray_VectorUnaryFunc*)ULONG_to_LONGLONG,
        (PyArray_VectorUnaryFunc*)ULONG_to_ULONGLONG,
        (PyArray_VectorUnaryFunc*)ULONG_to_FLOAT,
        (PyArray_VectorUnaryFunc*)ULONG_to_DOUBLE,
        (PyArray_VectorUnaryFunc*)ULONG_to_LONGDOUBLE,
        (PyArray_VectorUnaryFunc*)ULONG_to_CFLOAT,
        (PyArray_VectorUnaryFunc*)ULONG_to_CDOUBLE,
        (PyArray_VectorUnaryFunc*)ULONG_to_CLONGDOUBLE,
        (PyArray_VectorUnaryFunc*)ULONG_to_OBJECT,
        (PyArray_VectorUnaryFunc*)ULONG_to_STRING,
        (PyArray_VectorUnaryFunc*)ULONG_to_UNICODE,
        (PyArray_VectorUnaryFunc*)ULONG_to_VOID
    },
    (PyArray_GetItemFunc*)ULONG_getitem,
    (PyArray_SetItemFunc*)ULONG_setitem,
    (PyArray_CopySwapNFunc*)ULONG_copyswapn,
    (PyArray_CopySwapFunc*)ULONG_copyswap,
    (PyArray_CompareFunc*)ULONG_compare,
    (PyArray_ArgFunc*)ULONG_argmax,
    (PyArray_DotFunc*)ULONG_dot,
    (PyArray_ScanFunc*)ULONG_scan,
    (PyArray_FromStrFunc*)ULONG_fromstr,
    (PyArray_NonzeroFunc*)ULONG_nonzero,
    (PyArray_FillFunc*)ULONG_fill,
    (PyArray_FillWithScalarFunc*)ULONG_fillwithscalar,
    {
        NULL, NULL, NULL
    },
    {
        NULL, NULL, NULL
    },
    NULL,
    (PyArray_ScalarKindFunc*)NULL,
    NULL,
    NULL,
    (PyArray_FastClipFunc*)ULONG_fastclip,
    (PyArray_FastPutmaskFunc*)ULONG_fastputmask,
    (PyArray_FastTakeFunc*)ULONG_fasttake
};

static PyArray_Descr ULONG_Descr = {
    PyObject_HEAD_INIT(&PyArrayDescr_Type)
        &PyULongArrType_Type,
    PyArray_UNSIGNEDLTR,
    PyArray_ULONGLTR,
    '=', 0,
    PyArray_ULONG,
    1*sizeof(ulong),
    _ALIGN(ulong),
    NULL,
    NULL,
    NULL,
    &_PyULong_ArrFuncs,
};


#line 2377

static PyArray_ArrFuncs _PyLongLong_ArrFuncs = {
    {
        (PyArray_VectorUnaryFunc*)LONGLONG_to_BOOL,
        (PyArray_VectorUnaryFunc*)LONGLONG_to_BYTE,
        (PyArray_VectorUnaryFunc*)LONGLONG_to_UBYTE,
        (PyArray_VectorUnaryFunc*)LONGLONG_to_SHORT,
        (PyArray_VectorUnaryFunc*)LONGLONG_to_USHORT,
        (PyArray_VectorUnaryFunc*)LONGLONG_to_INT,
        (PyArray_VectorUnaryFunc*)LONGLONG_to_UINT,
        (PyArray_VectorUnaryFunc*)LONGLONG_to_LONG,
        (PyArray_VectorUnaryFunc*)LONGLONG_to_ULONG,
        (PyArray_VectorUnaryFunc*)LONGLONG_to_LONGLONG,
        (PyArray_VectorUnaryFunc*)LONGLONG_to_ULONGLONG,
        (PyArray_VectorUnaryFunc*)LONGLONG_to_FLOAT,
        (PyArray_VectorUnaryFunc*)LONGLONG_to_DOUBLE,
        (PyArray_VectorUnaryFunc*)LONGLONG_to_LONGDOUBLE,
        (PyArray_VectorUnaryFunc*)LONGLONG_to_CFLOAT,
        (PyArray_VectorUnaryFunc*)LONGLONG_to_CDOUBLE,
        (PyArray_VectorUnaryFunc*)LONGLONG_to_CLONGDOUBLE,
        (PyArray_VectorUnaryFunc*)LONGLONG_to_OBJECT,
        (PyArray_VectorUnaryFunc*)LONGLONG_to_STRING,
        (PyArray_VectorUnaryFunc*)LONGLONG_to_UNICODE,
        (PyArray_VectorUnaryFunc*)LONGLONG_to_VOID
    },
    (PyArray_GetItemFunc*)LONGLONG_getitem,
    (PyArray_SetItemFunc*)LONGLONG_setitem,
    (PyArray_CopySwapNFunc*)LONGLONG_copyswapn,
    (PyArray_CopySwapFunc*)LONGLONG_copyswap,
    (PyArray_CompareFunc*)LONGLONG_compare,
    (PyArray_ArgFunc*)LONGLONG_argmax,
    (PyArray_DotFunc*)LONGLONG_dot,
    (PyArray_ScanFunc*)LONGLONG_scan,
    (PyArray_FromStrFunc*)LONGLONG_fromstr,
    (PyArray_NonzeroFunc*)LONGLONG_nonzero,
    (PyArray_FillFunc*)LONGLONG_fill,
    (PyArray_FillWithScalarFunc*)LONGLONG_fillwithscalar,
    {
        NULL, NULL, NULL
    },
    {
        NULL, NULL, NULL
    },
    NULL,
    (PyArray_ScalarKindFunc*)NULL,
    NULL,
    NULL,
    (PyArray_FastClipFunc*)LONGLONG_fastclip,
    (PyArray_FastPutmaskFunc*)LONGLONG_fastputmask,
    (PyArray_FastTakeFunc*)LONGLONG_fasttake
};

static PyArray_Descr LONGLONG_Descr = {
    PyObject_HEAD_INIT(&PyArrayDescr_Type)
        &PyLongLongArrType_Type,
    PyArray_SIGNEDLTR,
    PyArray_LONGLONGLTR,
    '=', 0,
    PyArray_LONGLONG,
    1*sizeof(longlong),
    _ALIGN(longlong),
    NULL,
    NULL,
    NULL,
    &_PyLongLong_ArrFuncs,
};


#line 2377

static PyArray_ArrFuncs _PyULongLong_ArrFuncs = {
    {
        (PyArray_VectorUnaryFunc*)ULONGLONG_to_BOOL,
        (PyArray_VectorUnaryFunc*)ULONGLONG_to_BYTE,
        (PyArray_VectorUnaryFunc*)ULONGLONG_to_UBYTE,
        (PyArray_VectorUnaryFunc*)ULONGLONG_to_SHORT,
        (PyArray_VectorUnaryFunc*)ULONGLONG_to_USHORT,
        (PyArray_VectorUnaryFunc*)ULONGLONG_to_INT,
        (PyArray_VectorUnaryFunc*)ULONGLONG_to_UINT,
        (PyArray_VectorUnaryFunc*)ULONGLONG_to_LONG,
        (PyArray_VectorUnaryFunc*)ULONGLONG_to_ULONG,
        (PyArray_VectorUnaryFunc*)ULONGLONG_to_LONGLONG,
        (PyArray_VectorUnaryFunc*)ULONGLONG_to_ULONGLONG,
        (PyArray_VectorUnaryFunc*)ULONGLONG_to_FLOAT,
        (PyArray_VectorUnaryFunc*)ULONGLONG_to_DOUBLE,
        (PyArray_VectorUnaryFunc*)ULONGLONG_to_LONGDOUBLE,
        (PyArray_VectorUnaryFunc*)ULONGLONG_to_CFLOAT,
        (PyArray_VectorUnaryFunc*)ULONGLONG_to_CDOUBLE,
        (PyArray_VectorUnaryFunc*)ULONGLONG_to_CLONGDOUBLE,
        (PyArray_VectorUnaryFunc*)ULONGLONG_to_OBJECT,
        (PyArray_VectorUnaryFunc*)ULONGLONG_to_STRING,
        (PyArray_VectorUnaryFunc*)ULONGLONG_to_UNICODE,
        (PyArray_VectorUnaryFunc*)ULONGLONG_to_VOID
    },
    (PyArray_GetItemFunc*)ULONGLONG_getitem,
    (PyArray_SetItemFunc*)ULONGLONG_setitem,
    (PyArray_CopySwapNFunc*)ULONGLONG_copyswapn,
    (PyArray_CopySwapFunc*)ULONGLONG_copyswap,
    (PyArray_CompareFunc*)ULONGLONG_compare,
    (PyArray_ArgFunc*)ULONGLONG_argmax,
    (PyArray_DotFunc*)ULONGLONG_dot,
    (PyArray_ScanFunc*)ULONGLONG_scan,
    (PyArray_FromStrFunc*)ULONGLONG_fromstr,
    (PyArray_NonzeroFunc*)ULONGLONG_nonzero,
    (PyArray_FillFunc*)ULONGLONG_fill,
    (PyArray_FillWithScalarFunc*)ULONGLONG_fillwithscalar,
    {
        NULL, NULL, NULL
    },
    {
        NULL, NULL, NULL
    },
    NULL,
    (PyArray_ScalarKindFunc*)NULL,
    NULL,
    NULL,
    (PyArray_FastClipFunc*)ULONGLONG_fastclip,
    (PyArray_FastPutmaskFunc*)ULONGLONG_fastputmask,
    (PyArray_FastTakeFunc*)ULONGLONG_fasttake
};

static PyArray_Descr ULONGLONG_Descr = {
    PyObject_HEAD_INIT(&PyArrayDescr_Type)
        &PyULongLongArrType_Type,
    PyArray_UNSIGNEDLTR,
    PyArray_ULONGLONGLTR,
    '=', 0,
    PyArray_ULONGLONG,
    1*sizeof(ulonglong),
    _ALIGN(ulonglong),
    NULL,
    NULL,
    NULL,
    &_PyULongLong_ArrFuncs,
};


#line 2377

static PyArray_ArrFuncs _PyFloat_ArrFuncs = {
    {
        (PyArray_VectorUnaryFunc*)FLOAT_to_BOOL,
        (PyArray_VectorUnaryFunc*)FLOAT_to_BYTE,
        (PyArray_VectorUnaryFunc*)FLOAT_to_UBYTE,
        (PyArray_VectorUnaryFunc*)FLOAT_to_SHORT,
        (PyArray_VectorUnaryFunc*)FLOAT_to_USHORT,
        (PyArray_VectorUnaryFunc*)FLOAT_to_INT,
        (PyArray_VectorUnaryFunc*)FLOAT_to_UINT,
        (PyArray_VectorUnaryFunc*)FLOAT_to_LONG,
        (PyArray_VectorUnaryFunc*)FLOAT_to_ULONG,
        (PyArray_VectorUnaryFunc*)FLOAT_to_LONGLONG,
        (PyArray_VectorUnaryFunc*)FLOAT_to_ULONGLONG,
        (PyArray_VectorUnaryFunc*)FLOAT_to_FLOAT,
        (PyArray_VectorUnaryFunc*)FLOAT_to_DOUBLE,
        (PyArray_VectorUnaryFunc*)FLOAT_to_LONGDOUBLE,
        (PyArray_VectorUnaryFunc*)FLOAT_to_CFLOAT,
        (PyArray_VectorUnaryFunc*)FLOAT_to_CDOUBLE,
        (PyArray_VectorUnaryFunc*)FLOAT_to_CLONGDOUBLE,
        (PyArray_VectorUnaryFunc*)FLOAT_to_OBJECT,
        (PyArray_VectorUnaryFunc*)FLOAT_to_STRING,
        (PyArray_VectorUnaryFunc*)FLOAT_to_UNICODE,
        (PyArray_VectorUnaryFunc*)FLOAT_to_VOID
    },
    (PyArray_GetItemFunc*)FLOAT_getitem,
    (PyArray_SetItemFunc*)FLOAT_setitem,
    (PyArray_CopySwapNFunc*)FLOAT_copyswapn,
    (PyArray_CopySwapFunc*)FLOAT_copyswap,
    (PyArray_CompareFunc*)FLOAT_compare,
    (PyArray_ArgFunc*)FLOAT_argmax,
    (PyArray_DotFunc*)FLOAT_dot,
    (PyArray_ScanFunc*)FLOAT_scan,
    (PyArray_FromStrFunc*)FLOAT_fromstr,
    (PyArray_NonzeroFunc*)FLOAT_nonzero,
    (PyArray_FillFunc*)FLOAT_fill,
    (PyArray_FillWithScalarFunc*)FLOAT_fillwithscalar,
    {
        NULL, NULL, NULL
    },
    {
        NULL, NULL, NULL
    },
    NULL,
    (PyArray_ScalarKindFunc*)NULL,
    NULL,
    NULL,
    (PyArray_FastClipFunc*)FLOAT_fastclip,
    (PyArray_FastPutmaskFunc*)FLOAT_fastputmask,
    (PyArray_FastTakeFunc*)FLOAT_fasttake
};

static PyArray_Descr FLOAT_Descr = {
    PyObject_HEAD_INIT(&PyArrayDescr_Type)
        &PyFloatArrType_Type,
    PyArray_FLOATINGLTR,
    PyArray_FLOATLTR,
    '=', 0,
    PyArray_FLOAT,
    1*sizeof(float),
    _ALIGN(float),
    NULL,
    NULL,
    NULL,
    &_PyFloat_ArrFuncs,
};


#line 2377

static PyArray_ArrFuncs _PyDouble_ArrFuncs = {
    {
        (PyArray_VectorUnaryFunc*)DOUBLE_to_BOOL,
        (PyArray_VectorUnaryFunc*)DOUBLE_to_BYTE,
        (PyArray_VectorUnaryFunc*)DOUBLE_to_UBYTE,
        (PyArray_VectorUnaryFunc*)DOUBLE_to_SHORT,
        (PyArray_VectorUnaryFunc*)DOUBLE_to_USHORT,
        (PyArray_VectorUnaryFunc*)DOUBLE_to_INT,
        (PyArray_VectorUnaryFunc*)DOUBLE_to_UINT,
        (PyArray_VectorUnaryFunc*)DOUBLE_to_LONG,
        (PyArray_VectorUnaryFunc*)DOUBLE_to_ULONG,
        (PyArray_VectorUnaryFunc*)DOUBLE_to_LONGLONG,
        (PyArray_VectorUnaryFunc*)DOUBLE_to_ULONGLONG,
        (PyArray_VectorUnaryFunc*)DOUBLE_to_FLOAT,
        (PyArray_VectorUnaryFunc*)DOUBLE_to_DOUBLE,
        (PyArray_VectorUnaryFunc*)DOUBLE_to_LONGDOUBLE,
        (PyArray_VectorUnaryFunc*)DOUBLE_to_CFLOAT,
        (PyArray_VectorUnaryFunc*)DOUBLE_to_CDOUBLE,
        (PyArray_VectorUnaryFunc*)DOUBLE_to_CLONGDOUBLE,
        (PyArray_VectorUnaryFunc*)DOUBLE_to_OBJECT,
        (PyArray_VectorUnaryFunc*)DOUBLE_to_STRING,
        (PyArray_VectorUnaryFunc*)DOUBLE_to_UNICODE,
        (PyArray_VectorUnaryFunc*)DOUBLE_to_VOID
    },
    (PyArray_GetItemFunc*)DOUBLE_getitem,
    (PyArray_SetItemFunc*)DOUBLE_setitem,
    (PyArray_CopySwapNFunc*)DOUBLE_copyswapn,
    (PyArray_CopySwapFunc*)DOUBLE_copyswap,
    (PyArray_CompareFunc*)DOUBLE_compare,
    (PyArray_ArgFunc*)DOUBLE_argmax,
    (PyArray_DotFunc*)DOUBLE_dot,
    (PyArray_ScanFunc*)DOUBLE_scan,
    (PyArray_FromStrFunc*)DOUBLE_fromstr,
    (PyArray_NonzeroFunc*)DOUBLE_nonzero,
    (PyArray_FillFunc*)DOUBLE_fill,
    (PyArray_FillWithScalarFunc*)DOUBLE_fillwithscalar,
    {
        NULL, NULL, NULL
    },
    {
        NULL, NULL, NULL
    },
    NULL,
    (PyArray_ScalarKindFunc*)NULL,
    NULL,
    NULL,
    (PyArray_FastClipFunc*)DOUBLE_fastclip,
    (PyArray_FastPutmaskFunc*)DOUBLE_fastputmask,
    (PyArray_FastTakeFunc*)DOUBLE_fasttake
};

static PyArray_Descr DOUBLE_Descr = {
    PyObject_HEAD_INIT(&PyArrayDescr_Type)
        &PyDoubleArrType_Type,
    PyArray_FLOATINGLTR,
    PyArray_DOUBLELTR,
    '=', 0,
    PyArray_DOUBLE,
    1*sizeof(double),
    _ALIGN(double),
    NULL,
    NULL,
    NULL,
    &_PyDouble_ArrFuncs,
};


#line 2377

static PyArray_ArrFuncs _PyLongDouble_ArrFuncs = {
    {
        (PyArray_VectorUnaryFunc*)LONGDOUBLE_to_BOOL,
        (PyArray_VectorUnaryFunc*)LONGDOUBLE_to_BYTE,
        (PyArray_VectorUnaryFunc*)LONGDOUBLE_to_UBYTE,
        (PyArray_VectorUnaryFunc*)LONGDOUBLE_to_SHORT,
        (PyArray_VectorUnaryFunc*)LONGDOUBLE_to_USHORT,
        (PyArray_VectorUnaryFunc*)LONGDOUBLE_to_INT,
        (PyArray_VectorUnaryFunc*)LONGDOUBLE_to_UINT,
        (PyArray_VectorUnaryFunc*)LONGDOUBLE_to_LONG,
        (PyArray_VectorUnaryFunc*)LONGDOUBLE_to_ULONG,
        (PyArray_VectorUnaryFunc*)LONGDOUBLE_to_LONGLONG,
        (PyArray_VectorUnaryFunc*)LONGDOUBLE_to_ULONGLONG,
        (PyArray_VectorUnaryFunc*)LONGDOUBLE_to_FLOAT,
        (PyArray_VectorUnaryFunc*)LONGDOUBLE_to_DOUBLE,
        (PyArray_VectorUnaryFunc*)LONGDOUBLE_to_LONGDOUBLE,
        (PyArray_VectorUnaryFunc*)LONGDOUBLE_to_CFLOAT,
        (PyArray_VectorUnaryFunc*)LONGDOUBLE_to_CDOUBLE,
        (PyArray_VectorUnaryFunc*)LONGDOUBLE_to_CLONGDOUBLE,
        (PyArray_VectorUnaryFunc*)LONGDOUBLE_to_OBJECT,
        (PyArray_VectorUnaryFunc*)LONGDOUBLE_to_STRING,
        (PyArray_VectorUnaryFunc*)LONGDOUBLE_to_UNICODE,
        (PyArray_VectorUnaryFunc*)LONGDOUBLE_to_VOID
    },
    (PyArray_GetItemFunc*)LONGDOUBLE_getitem,
    (PyArray_SetItemFunc*)LONGDOUBLE_setitem,
    (PyArray_CopySwapNFunc*)LONGDOUBLE_copyswapn,
    (PyArray_CopySwapFunc*)LONGDOUBLE_copyswap,
    (PyArray_CompareFunc*)LONGDOUBLE_compare,
    (PyArray_ArgFunc*)LONGDOUBLE_argmax,
    (PyArray_DotFunc*)LONGDOUBLE_dot,
    (PyArray_ScanFunc*)LONGDOUBLE_scan,
    (PyArray_FromStrFunc*)LONGDOUBLE_fromstr,
    (PyArray_NonzeroFunc*)LONGDOUBLE_nonzero,
    (PyArray_FillFunc*)LONGDOUBLE_fill,
    (PyArray_FillWithScalarFunc*)LONGDOUBLE_fillwithscalar,
    {
        NULL, NULL, NULL
    },
    {
        NULL, NULL, NULL
    },
    NULL,
    (PyArray_ScalarKindFunc*)NULL,
    NULL,
    NULL,
    (PyArray_FastClipFunc*)LONGDOUBLE_fastclip,
    (PyArray_FastPutmaskFunc*)LONGDOUBLE_fastputmask,
    (PyArray_FastTakeFunc*)LONGDOUBLE_fasttake
};

static PyArray_Descr LONGDOUBLE_Descr = {
    PyObject_HEAD_INIT(&PyArrayDescr_Type)
        &PyLongDoubleArrType_Type,
    PyArray_FLOATINGLTR,
    PyArray_LONGDOUBLELTR,
    '=', 0,
    PyArray_LONGDOUBLE,
    1*sizeof(longdouble),
    _ALIGN(longdouble),
    NULL,
    NULL,
    NULL,
    &_PyLongDouble_ArrFuncs,
};


#line 2377

static PyArray_ArrFuncs _PyCFloat_ArrFuncs = {
    {
        (PyArray_VectorUnaryFunc*)CFLOAT_to_BOOL,
        (PyArray_VectorUnaryFunc*)CFLOAT_to_BYTE,
        (PyArray_VectorUnaryFunc*)CFLOAT_to_UBYTE,
        (PyArray_VectorUnaryFunc*)CFLOAT_to_SHORT,
        (PyArray_VectorUnaryFunc*)CFLOAT_to_USHORT,
        (PyArray_VectorUnaryFunc*)CFLOAT_to_INT,
        (PyArray_VectorUnaryFunc*)CFLOAT_to_UINT,
        (PyArray_VectorUnaryFunc*)CFLOAT_to_LONG,
        (PyArray_VectorUnaryFunc*)CFLOAT_to_ULONG,
        (PyArray_VectorUnaryFunc*)CFLOAT_to_LONGLONG,
        (PyArray_VectorUnaryFunc*)CFLOAT_to_ULONGLONG,
        (PyArray_VectorUnaryFunc*)CFLOAT_to_FLOAT,
        (PyArray_VectorUnaryFunc*)CFLOAT_to_DOUBLE,
        (PyArray_VectorUnaryFunc*)CFLOAT_to_LONGDOUBLE,
        (PyArray_VectorUnaryFunc*)CFLOAT_to_CFLOAT,
        (PyArray_VectorUnaryFunc*)CFLOAT_to_CDOUBLE,
        (PyArray_VectorUnaryFunc*)CFLOAT_to_CLONGDOUBLE,
        (PyArray_VectorUnaryFunc*)CFLOAT_to_OBJECT,
        (PyArray_VectorUnaryFunc*)CFLOAT_to_STRING,
        (PyArray_VectorUnaryFunc*)CFLOAT_to_UNICODE,
        (PyArray_VectorUnaryFunc*)CFLOAT_to_VOID
    },
    (PyArray_GetItemFunc*)CFLOAT_getitem,
    (PyArray_SetItemFunc*)CFLOAT_setitem,
    (PyArray_CopySwapNFunc*)CFLOAT_copyswapn,
    (PyArray_CopySwapFunc*)CFLOAT_copyswap,
    (PyArray_CompareFunc*)CFLOAT_compare,
    (PyArray_ArgFunc*)CFLOAT_argmax,
    (PyArray_DotFunc*)CFLOAT_dot,
    (PyArray_ScanFunc*)CFLOAT_scan,
    (PyArray_FromStrFunc*)CFLOAT_fromstr,
    (PyArray_NonzeroFunc*)CFLOAT_nonzero,
    (PyArray_FillFunc*)CFLOAT_fill,
    (PyArray_FillWithScalarFunc*)CFLOAT_fillwithscalar,
    {
        NULL, NULL, NULL
    },
    {
        NULL, NULL, NULL
    },
    NULL,
    (PyArray_ScalarKindFunc*)NULL,
    NULL,
    NULL,
    (PyArray_FastClipFunc*)CFLOAT_fastclip,
    (PyArray_FastPutmaskFunc*)CFLOAT_fastputmask,
    (PyArray_FastTakeFunc*)CFLOAT_fasttake
};

static PyArray_Descr CFLOAT_Descr = {
    PyObject_HEAD_INIT(&PyArrayDescr_Type)
        &PyCFloatArrType_Type,
    PyArray_COMPLEXLTR,
    PyArray_CFLOATLTR,
    '=', 0,
    PyArray_CFLOAT,
    2*sizeof(float),
    _ALIGN(float),
    NULL,
    NULL,
    NULL,
    &_PyCFloat_ArrFuncs,
};


#line 2377

static PyArray_ArrFuncs _PyCDouble_ArrFuncs = {
    {
        (PyArray_VectorUnaryFunc*)CDOUBLE_to_BOOL,
        (PyArray_VectorUnaryFunc*)CDOUBLE_to_BYTE,
        (PyArray_VectorUnaryFunc*)CDOUBLE_to_UBYTE,
        (PyArray_VectorUnaryFunc*)CDOUBLE_to_SHORT,
        (PyArray_VectorUnaryFunc*)CDOUBLE_to_USHORT,
        (PyArray_VectorUnaryFunc*)CDOUBLE_to_INT,
        (PyArray_VectorUnaryFunc*)CDOUBLE_to_UINT,
        (PyArray_VectorUnaryFunc*)CDOUBLE_to_LONG,
        (PyArray_VectorUnaryFunc*)CDOUBLE_to_ULONG,
        (PyArray_VectorUnaryFunc*)CDOUBLE_to_LONGLONG,
        (PyArray_VectorUnaryFunc*)CDOUBLE_to_ULONGLONG,
        (PyArray_VectorUnaryFunc*)CDOUBLE_to_FLOAT,
        (PyArray_VectorUnaryFunc*)CDOUBLE_to_DOUBLE,
        (PyArray_VectorUnaryFunc*)CDOUBLE_to_LONGDOUBLE,
        (PyArray_VectorUnaryFunc*)CDOUBLE_to_CFLOAT,
        (PyArray_VectorUnaryFunc*)CDOUBLE_to_CDOUBLE,
        (PyArray_VectorUnaryFunc*)CDOUBLE_to_CLONGDOUBLE,
        (PyArray_VectorUnaryFunc*)CDOUBLE_to_OBJECT,
        (PyArray_VectorUnaryFunc*)CDOUBLE_to_STRING,
        (PyArray_VectorUnaryFunc*)CDOUBLE_to_UNICODE,
        (PyArray_VectorUnaryFunc*)CDOUBLE_to_VOID
    },
    (PyArray_GetItemFunc*)CDOUBLE_getitem,
    (PyArray_SetItemFunc*)CDOUBLE_setitem,
    (PyArray_CopySwapNFunc*)CDOUBLE_copyswapn,
    (PyArray_CopySwapFunc*)CDOUBLE_copyswap,
    (PyArray_CompareFunc*)CDOUBLE_compare,
    (PyArray_ArgFunc*)CDOUBLE_argmax,
    (PyArray_DotFunc*)CDOUBLE_dot,
    (PyArray_ScanFunc*)CDOUBLE_scan,
    (PyArray_FromStrFunc*)CDOUBLE_fromstr,
    (PyArray_NonzeroFunc*)CDOUBLE_nonzero,
    (PyArray_FillFunc*)CDOUBLE_fill,
    (PyArray_FillWithScalarFunc*)CDOUBLE_fillwithscalar,
    {
        NULL, NULL, NULL
    },
    {
        NULL, NULL, NULL
    },
    NULL,
    (PyArray_ScalarKindFunc*)NULL,
    NULL,
    NULL,
    (PyArray_FastClipFunc*)CDOUBLE_fastclip,
    (PyArray_FastPutmaskFunc*)CDOUBLE_fastputmask,
    (PyArray_FastTakeFunc*)CDOUBLE_fasttake
};

static PyArray_Descr CDOUBLE_Descr = {
    PyObject_HEAD_INIT(&PyArrayDescr_Type)
        &PyCDoubleArrType_Type,
    PyArray_COMPLEXLTR,
    PyArray_CDOUBLELTR,
    '=', 0,
    PyArray_CDOUBLE,
    2*sizeof(double),
    _ALIGN(double),
    NULL,
    NULL,
    NULL,
    &_PyCDouble_ArrFuncs,
};


#line 2377

static PyArray_ArrFuncs _PyCLongDouble_ArrFuncs = {
    {
        (PyArray_VectorUnaryFunc*)CLONGDOUBLE_to_BOOL,
        (PyArray_VectorUnaryFunc*)CLONGDOUBLE_to_BYTE,
        (PyArray_VectorUnaryFunc*)CLONGDOUBLE_to_UBYTE,
        (PyArray_VectorUnaryFunc*)CLONGDOUBLE_to_SHORT,
        (PyArray_VectorUnaryFunc*)CLONGDOUBLE_to_USHORT,
        (PyArray_VectorUnaryFunc*)CLONGDOUBLE_to_INT,
        (PyArray_VectorUnaryFunc*)CLONGDOUBLE_to_UINT,
        (PyArray_VectorUnaryFunc*)CLONGDOUBLE_to_LONG,
        (PyArray_VectorUnaryFunc*)CLONGDOUBLE_to_ULONG,
        (PyArray_VectorUnaryFunc*)CLONGDOUBLE_to_LONGLONG,
        (PyArray_VectorUnaryFunc*)CLONGDOUBLE_to_ULONGLONG,
        (PyArray_VectorUnaryFunc*)CLONGDOUBLE_to_FLOAT,
        (PyArray_VectorUnaryFunc*)CLONGDOUBLE_to_DOUBLE,
        (PyArray_VectorUnaryFunc*)CLONGDOUBLE_to_LONGDOUBLE,
        (PyArray_VectorUnaryFunc*)CLONGDOUBLE_to_CFLOAT,
        (PyArray_VectorUnaryFunc*)CLONGDOUBLE_to_CDOUBLE,
        (PyArray_VectorUnaryFunc*)CLONGDOUBLE_to_CLONGDOUBLE,
        (PyArray_VectorUnaryFunc*)CLONGDOUBLE_to_OBJECT,
        (PyArray_VectorUnaryFunc*)CLONGDOUBLE_to_STRING,
        (PyArray_VectorUnaryFunc*)CLONGDOUBLE_to_UNICODE,
        (PyArray_VectorUnaryFunc*)CLONGDOUBLE_to_VOID
    },
    (PyArray_GetItemFunc*)CLONGDOUBLE_getitem,
    (PyArray_SetItemFunc*)CLONGDOUBLE_setitem,
    (PyArray_CopySwapNFunc*)CLONGDOUBLE_copyswapn,
    (PyArray_CopySwapFunc*)CLONGDOUBLE_copyswap,
    (PyArray_CompareFunc*)CLONGDOUBLE_compare,
    (PyArray_ArgFunc*)CLONGDOUBLE_argmax,
    (PyArray_DotFunc*)CLONGDOUBLE_dot,
    (PyArray_ScanFunc*)CLONGDOUBLE_scan,
    (PyArray_FromStrFunc*)CLONGDOUBLE_fromstr,
    (PyArray_NonzeroFunc*)CLONGDOUBLE_nonzero,
    (PyArray_FillFunc*)CLONGDOUBLE_fill,
    (PyArray_FillWithScalarFunc*)CLONGDOUBLE_fillwithscalar,
    {
        NULL, NULL, NULL
    },
    {
        NULL, NULL, NULL
    },
    NULL,
    (PyArray_ScalarKindFunc*)NULL,
    NULL,
    NULL,
    (PyArray_FastClipFunc*)CLONGDOUBLE_fastclip,
    (PyArray_FastPutmaskFunc*)CLONGDOUBLE_fastputmask,
    (PyArray_FastTakeFunc*)CLONGDOUBLE_fasttake
};

static PyArray_Descr CLONGDOUBLE_Descr = {
    PyObject_HEAD_INIT(&PyArrayDescr_Type)
        &PyCLongDoubleArrType_Type,
    PyArray_COMPLEXLTR,
    PyArray_CLONGDOUBLELTR,
    '=', 0,
    PyArray_CLONGDOUBLE,
    2*sizeof(longdouble),
    _ALIGN(longdouble),
    NULL,
    NULL,
    NULL,
    &_PyCLongDouble_ArrFuncs,
};


#line 2377

static PyArray_ArrFuncs _PyObject_ArrFuncs = {
    {
        (PyArray_VectorUnaryFunc*)OBJECT_to_BOOL,
        (PyArray_VectorUnaryFunc*)OBJECT_to_BYTE,
        (PyArray_VectorUnaryFunc*)OBJECT_to_UBYTE,
        (PyArray_VectorUnaryFunc*)OBJECT_to_SHORT,
        (PyArray_VectorUnaryFunc*)OBJECT_to_USHORT,
        (PyArray_VectorUnaryFunc*)OBJECT_to_INT,
        (PyArray_VectorUnaryFunc*)OBJECT_to_UINT,
        (PyArray_VectorUnaryFunc*)OBJECT_to_LONG,
        (PyArray_VectorUnaryFunc*)OBJECT_to_ULONG,
        (PyArray_VectorUnaryFunc*)OBJECT_to_LONGLONG,
        (PyArray_VectorUnaryFunc*)OBJECT_to_ULONGLONG,
        (PyArray_VectorUnaryFunc*)OBJECT_to_FLOAT,
        (PyArray_VectorUnaryFunc*)OBJECT_to_DOUBLE,
        (PyArray_VectorUnaryFunc*)OBJECT_to_LONGDOUBLE,
        (PyArray_VectorUnaryFunc*)OBJECT_to_CFLOAT,
        (PyArray_VectorUnaryFunc*)OBJECT_to_CDOUBLE,
        (PyArray_VectorUnaryFunc*)OBJECT_to_CLONGDOUBLE,
        (PyArray_VectorUnaryFunc*)OBJECT_to_OBJECT,
        (PyArray_VectorUnaryFunc*)OBJECT_to_STRING,
        (PyArray_VectorUnaryFunc*)OBJECT_to_UNICODE,
        (PyArray_VectorUnaryFunc*)OBJECT_to_VOID
    },
    (PyArray_GetItemFunc*)OBJECT_getitem,
    (PyArray_SetItemFunc*)OBJECT_setitem,
    (PyArray_CopySwapNFunc*)OBJECT_copyswapn,
    (PyArray_CopySwapFunc*)OBJECT_copyswap,
    (PyArray_CompareFunc*)OBJECT_compare,
    (PyArray_ArgFunc*)OBJECT_argmax,
    (PyArray_DotFunc*)OBJECT_dot,
    (PyArray_ScanFunc*)OBJECT_scan,
    (PyArray_FromStrFunc*)OBJECT_fromstr,
    (PyArray_NonzeroFunc*)OBJECT_nonzero,
    (PyArray_FillFunc*)OBJECT_fill,
    (PyArray_FillWithScalarFunc*)OBJECT_fillwithscalar,
    {
        NULL, NULL, NULL
    },
    {
        NULL, NULL, NULL
    },
    NULL,
    (PyArray_ScalarKindFunc*)NULL,
    NULL,
    NULL,
    (PyArray_FastClipFunc*)OBJECT_fastclip,
    (PyArray_FastPutmaskFunc*)OBJECT_fastputmask,
    (PyArray_FastTakeFunc*)OBJECT_fasttake
};

static PyArray_Descr OBJECT_Descr = {
    PyObject_HEAD_INIT(&PyArrayDescr_Type)
        &PyObjectArrType_Type,
    PyArray_OBJECTLTR,
    PyArray_OBJECTLTR,
    '|', NPY_OBJECT_DTYPE_FLAGS,
    PyArray_OBJECT,
    1*sizeof(PyObject *),
    _ALIGN(PyObject *),
    NULL,
    NULL,
    NULL,
    &_PyObject_ArrFuncs,
};



#define _MAX_LETTER 128
static char _letter_to_num[_MAX_LETTER];

static PyArray_Descr *_builtin_descrs[] = {
    &BOOL_Descr,
    &BYTE_Descr,
    &UBYTE_Descr,
    &SHORT_Descr,
    &USHORT_Descr,
    &INT_Descr,
    &UINT_Descr,
    &LONG_Descr,
    &ULONG_Descr,
    &LONGLONG_Descr,
    &ULONGLONG_Descr,
    &FLOAT_Descr,
    &DOUBLE_Descr,
    &LONGDOUBLE_Descr,
    &CFLOAT_Descr,
    &CDOUBLE_Descr,
    &CLONGDOUBLE_Descr,
    &OBJECT_Descr,
    &STRING_Descr,
    &UNICODE_Descr,
    &VOID_Descr,
};

/*NUMPY_API
 Get the PyArray_Descr structure for a type.
*/
static PyArray_Descr *
PyArray_DescrFromType(int type)
{
    PyArray_Descr *ret = NULL;

    if (type < PyArray_NTYPES) {
        ret = _builtin_descrs[type];
    }
    else if (type == PyArray_NOTYPE) {
        /*
         * This needs to not raise an error so
         * that PyArray_DescrFromType(PyArray_NOTYPE)
         * works for backwards-compatible C-API
         */
        return NULL;
    }
    else if ((type == PyArray_CHAR) || (type == PyArray_CHARLTR)) {
        ret = PyArray_DescrNew(_builtin_descrs[PyArray_STRING]);

        if (ret == NULL) {
            return NULL;
        }
        ret->elsize = 1;
        ret->type = PyArray_CHARLTR;
        return ret;
    }
    else if (PyTypeNum_ISUSERDEF(type)) {
        ret = userdescrs[type - PyArray_USERDEF];
    }
    else {
        int num = PyArray_NTYPES;
        if (type < _MAX_LETTER) {
            num = (int) _letter_to_num[type];
        }
        if (num >= PyArray_NTYPES) {
            ret = NULL;
        }
        else {
            ret = _builtin_descrs[num];
        }
    }
    if (ret == NULL) {
        PyErr_SetString(PyExc_ValueError,
                "Invalid data-type for array");
    }
    else {
        Py_INCREF(ret);
    }
    return ret;
}



static int
set_typeinfo(PyObject *dict)
{
    PyObject *infodict, *s;
    int i;

    for (i=0; i<_MAX_LETTER; i++) {
        _letter_to_num[i] = PyArray_NTYPES;
    }

#line 2542
    _letter_to_num[PyArray_BOOLLTR] = PyArray_BOOL;

#line 2542
    _letter_to_num[PyArray_BYTELTR] = PyArray_BYTE;

#line 2542
    _letter_to_num[PyArray_UBYTELTR] = PyArray_UBYTE;

#line 2542
    _letter_to_num[PyArray_SHORTLTR] = PyArray_SHORT;

#line 2542
    _letter_to_num[PyArray_USHORTLTR] = PyArray_USHORT;

#line 2542
    _letter_to_num[PyArray_INTLTR] = PyArray_INT;

#line 2542
    _letter_to_num[PyArray_UINTLTR] = PyArray_UINT;

#line 2542
    _letter_to_num[PyArray_INTPLTR] = PyArray_INTP;

#line 2542
    _letter_to_num[PyArray_UINTPLTR] = PyArray_UINTP;

#line 2542
    _letter_to_num[PyArray_LONGLTR] = PyArray_LONG;

#line 2542
    _letter_to_num[PyArray_ULONGLTR] = PyArray_ULONG;

#line 2542
    _letter_to_num[PyArray_LONGLONGLTR] = PyArray_LONGLONG;

#line 2542
    _letter_to_num[PyArray_ULONGLONGLTR] = PyArray_ULONGLONG;

#line 2542
    _letter_to_num[PyArray_FLOATLTR] = PyArray_FLOAT;

#line 2542
    _letter_to_num[PyArray_DOUBLELTR] = PyArray_DOUBLE;

#line 2542
    _letter_to_num[PyArray_LONGDOUBLELTR] = PyArray_LONGDOUBLE;

#line 2542
    _letter_to_num[PyArray_CFLOATLTR] = PyArray_CFLOAT;

#line 2542
    _letter_to_num[PyArray_CDOUBLELTR] = PyArray_CDOUBLE;

#line 2542
    _letter_to_num[PyArray_CLONGDOUBLELTR] = PyArray_CLONGDOUBLE;

#line 2542
    _letter_to_num[PyArray_OBJECTLTR] = PyArray_OBJECT;

#line 2542
    _letter_to_num[PyArray_STRINGLTR] = PyArray_STRING;

#line 2542
    _letter_to_num[PyArray_UNICODELTR] = PyArray_UNICODE;

#line 2542
    _letter_to_num[PyArray_VOIDLTR] = PyArray_VOID;

    _letter_to_num[PyArray_STRINGLTR2] = PyArray_STRING;

#line 2549
    BOOL_Descr.fields = Py_None;

#line 2549
    BYTE_Descr.fields = Py_None;

#line 2549
    UBYTE_Descr.fields = Py_None;

#line 2549
    SHORT_Descr.fields = Py_None;

#line 2549
    USHORT_Descr.fields = Py_None;

#line 2549
    INT_Descr.fields = Py_None;

#line 2549
    UINT_Descr.fields = Py_None;

#line 2549
    LONG_Descr.fields = Py_None;

#line 2549
    ULONG_Descr.fields = Py_None;

#line 2549
    LONGLONG_Descr.fields = Py_None;

#line 2549
    ULONGLONG_Descr.fields = Py_None;

#line 2549
    FLOAT_Descr.fields = Py_None;

#line 2549
    DOUBLE_Descr.fields = Py_None;

#line 2549
    LONGDOUBLE_Descr.fields = Py_None;

#line 2549
    CFLOAT_Descr.fields = Py_None;

#line 2549
    CDOUBLE_Descr.fields = Py_None;

#line 2549
    CLONGDOUBLE_Descr.fields = Py_None;

#line 2549
    OBJECT_Descr.fields = Py_None;

#line 2549
    STRING_Descr.fields = Py_None;

#line 2549
    UNICODE_Descr.fields = Py_None;

#line 2549
    VOID_Descr.fields = Py_None;


    /* Set a dictionary with type information */
    infodict = PyDict_New();
    if (infodict == NULL) return -1;

#define BITSOF_INTP CHAR_BIT*SIZEOF_PY_INTPTR_T
#define BITSOF_BYTE CHAR_BIT

#line 2570
    PyDict_SetItemString(infodict, "BOOL",
            s=Py_BuildValue("ciiiiiO",
                PyArray_BOOLLTR,
                PyArray_BOOL,
                BITSOF_BOOL,
                _ALIGN(Bool),
                1, 0,
                (PyObject *)&PyBoolArrType_Type));
    Py_DECREF(s);

#line 2570
    PyDict_SetItemString(infodict, "BYTE",
            s=Py_BuildValue("ciiiiiO",
                PyArray_BYTELTR,
                PyArray_BYTE,
                BITSOF_BYTE,
                _ALIGN(byte),
                MAX_BYTE, MIN_BYTE,
                (PyObject *)&PyByteArrType_Type));
    Py_DECREF(s);

#line 2570
    PyDict_SetItemString(infodict, "UBYTE",
            s=Py_BuildValue("ciiiiiO",
                PyArray_UBYTELTR,
                PyArray_UBYTE,
                BITSOF_BYTE,
                _ALIGN(ubyte),
                MAX_UBYTE, 0,
                (PyObject *)&PyUByteArrType_Type));
    Py_DECREF(s);

#line 2570
    PyDict_SetItemString(infodict, "SHORT",
            s=Py_BuildValue("ciiiiiO",
                PyArray_SHORTLTR,
                PyArray_SHORT,
                BITSOF_SHORT,
                _ALIGN(short),
                MAX_SHORT, MIN_SHORT,
                (PyObject *)&PyShortArrType_Type));
    Py_DECREF(s);

#line 2570
    PyDict_SetItemString(infodict, "USHORT",
            s=Py_BuildValue("ciiiiiO",
                PyArray_USHORTLTR,
                PyArray_USHORT,
                BITSOF_SHORT,
                _ALIGN(ushort),
                MAX_USHORT, 0,
                (PyObject *)&PyUShortArrType_Type));
    Py_DECREF(s);

#line 2570
    PyDict_SetItemString(infodict, "INT",
            s=Py_BuildValue("ciiiiiO",
                PyArray_INTLTR,
                PyArray_INT,
                BITSOF_INT,
                _ALIGN(int),
                MAX_INT, MIN_INT,
                (PyObject *)&PyIntArrType_Type));
    Py_DECREF(s);

#line 2570
    PyDict_SetItemString(infodict, "UINT",
            s=Py_BuildValue("ciiiNiO",
                PyArray_UINTLTR,
                PyArray_UINT,
                BITSOF_INT,
                _ALIGN(uint),
                PyLong_FromUnsignedLong(MAX_UINT), 0,
                (PyObject *)&PyUIntArrType_Type));
    Py_DECREF(s);

#line 2570
    PyDict_SetItemString(infodict, "INTP",
            s=Py_BuildValue("ciiiNNO",
                PyArray_INTPLTR,
                PyArray_INTP,
                BITSOF_INTP,
                _ALIGN(intp),
                PyLong_FromLongLong((longlong) MAX_INTP), PyLong_FromLongLong((longlong) MIN_INTP),
                (PyObject *)&PyIntpArrType_Type));
    Py_DECREF(s);

#line 2570
    PyDict_SetItemString(infodict, "UINTP",
            s=Py_BuildValue("ciiiNiO",
                PyArray_UINTPLTR,
                PyArray_UINTP,
                BITSOF_INTP,
                _ALIGN(uintp),
                PyLong_FromUnsignedLongLong((ulonglong) MAX_UINTP), 0,
                (PyObject *)&PyUIntpArrType_Type));
    Py_DECREF(s);

#line 2570
    PyDict_SetItemString(infodict, "LONG",
            s=Py_BuildValue("ciiillO",
                PyArray_LONGLTR,
                PyArray_LONG,
                BITSOF_LONG,
                _ALIGN(long),
                MAX_LONG, MIN_LONG,
                (PyObject *)&PyLongArrType_Type));
    Py_DECREF(s);

#line 2570
    PyDict_SetItemString(infodict, "ULONG",
            s=Py_BuildValue("ciiiNiO",
                PyArray_ULONGLTR,
                PyArray_ULONG,
                BITSOF_LONG,
                _ALIGN(ulong),
                PyLong_FromUnsignedLong((unsigned long) MAX_ULONG), 0,
                (PyObject *)&PyULongArrType_Type));
    Py_DECREF(s);

#line 2570
    PyDict_SetItemString(infodict, "LONGLONG",
            s=Py_BuildValue("ciiiNNO",
                PyArray_LONGLONGLTR,
                PyArray_LONGLONG,
                BITSOF_LONGLONG,
                _ALIGN(longlong),
                PyLong_FromLongLong((longlong) MAX_LONGLONG), PyLong_FromLongLong((longlong) MIN_LONGLONG),
                (PyObject *)&PyLongLongArrType_Type));
    Py_DECREF(s);

#line 2570
    PyDict_SetItemString(infodict, "ULONGLONG",
            s=Py_BuildValue("ciiiNiO",
                PyArray_ULONGLONGLTR,
                PyArray_ULONGLONG,
                BITSOF_LONGLONG,
                _ALIGN(ulonglong),
                PyLong_FromUnsignedLongLong((ulonglong) MAX_ULONGLONG), 0,
                (PyObject *)&PyULongLongArrType_Type));
    Py_DECREF(s);


#define BITSOF_CFLOAT 2*BITSOF_FLOAT
#define BITSOF_CDOUBLE 2*BITSOF_DOUBLE
#define BITSOF_CLONGDOUBLE 2*BITSOF_LONGDOUBLE

#line 2591
    PyDict_SetItemString(infodict, "FLOAT",
            s=Py_BuildValue("ciiiO", PyArray_FLOATLTR,
                PyArray_FLOAT, BITSOF_FLOAT,
                _ALIGN(float),
                (PyObject *)\
                &PyFloatArrType_Type));
    Py_DECREF(s);
    
#line 2591
    PyDict_SetItemString(infodict, "DOUBLE",
            s=Py_BuildValue("ciiiO", PyArray_DOUBLELTR,
                PyArray_DOUBLE, BITSOF_DOUBLE,
                _ALIGN(double),
                (PyObject *)\
                &PyDoubleArrType_Type));
    Py_DECREF(s);
    
#line 2591
    PyDict_SetItemString(infodict, "LONGDOUBLE",
            s=Py_BuildValue("ciiiO", PyArray_LONGDOUBLELTR,
                PyArray_LONGDOUBLE, BITSOF_LONGDOUBLE,
                _ALIGN(longdouble),
                (PyObject *)\
                &PyLongDoubleArrType_Type));
    Py_DECREF(s);
    
#line 2591
    PyDict_SetItemString(infodict, "CFLOAT",
            s=Py_BuildValue("ciiiO", PyArray_CFLOATLTR,
                PyArray_CFLOAT, BITSOF_CFLOAT,
                _ALIGN(cfloat),
                (PyObject *)\
                &PyCFloatArrType_Type));
    Py_DECREF(s);
    
#line 2591
    PyDict_SetItemString(infodict, "CDOUBLE",
            s=Py_BuildValue("ciiiO", PyArray_CDOUBLELTR,
                PyArray_CDOUBLE, BITSOF_CDOUBLE,
                _ALIGN(cdouble),
                (PyObject *)\
                &PyCDoubleArrType_Type));
    Py_DECREF(s);
    
#line 2591
    PyDict_SetItemString(infodict, "CLONGDOUBLE",
            s=Py_BuildValue("ciiiO", PyArray_CLONGDOUBLELTR,
                PyArray_CLONGDOUBLE, BITSOF_CLONGDOUBLE,
                _ALIGN(clongdouble),
                (PyObject *)\
                &PyCLongDoubleArrType_Type));
    Py_DECREF(s);
    

    PyDict_SetItemString(infodict, "OBJECT",
            s=Py_BuildValue("ciiiO", PyArray_OBJECTLTR,
                PyArray_OBJECT,
                sizeof(PyObject *)*CHAR_BIT,
                _ALIGN(PyObject *),
                (PyObject *)\
                &PyObjectArrType_Type));
    Py_DECREF(s);
    PyDict_SetItemString(infodict, "STRING",
            s=Py_BuildValue("ciiiO", PyArray_STRINGLTR,
                PyArray_STRING, 0,
                _ALIGN(char),
                (PyObject *)\
                &PyStringArrType_Type));
    Py_DECREF(s);
    PyDict_SetItemString(infodict, "UNICODE",
            s=Py_BuildValue("ciiiO", PyArray_UNICODELTR,
                PyArray_UNICODE, 0,
                _ALIGN(PyArray_UCS4),
                (PyObject *)\
                &PyUnicodeArrType_Type));
    Py_DECREF(s);
    PyDict_SetItemString(infodict, "VOID",
            s=Py_BuildValue("ciiiO", PyArray_VOIDLTR,
                PyArray_VOID, 0,
                _ALIGN(char),
                (PyObject *)\
                &PyVoidArrType_Type));
    Py_DECREF(s);

#define SETTYPE(name)                           \
    Py_INCREF(&Py##name##ArrType_Type);     \
    PyDict_SetItemString(infodict, #name,   \
            (PyObject *)&Py##name##ArrType_Type);

    SETTYPE(Generic)
        SETTYPE(Number)
        SETTYPE(Integer)
        SETTYPE(Inexact)
        SETTYPE(SignedInteger)
        SETTYPE(UnsignedInteger)
        SETTYPE(Floating)
        SETTYPE(ComplexFloating)
        SETTYPE(Flexible)
        SETTYPE(Character)

#undef SETTYPE

        PyDict_SetItemString(dict, "typeinfo", infodict);
    Py_DECREF(infodict);
    return 0;
}

#undef _MAX_LETTER

